
schichor_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fd0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ef4  08011170  08011170  00021170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013064  08013064  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08013064  08013064  00023064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801306c  0801306c  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801306c  0801306c  0002306c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013070  08013070  00023070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08013074  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008940  20000204  08013278  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20008b44  08013278  00038b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b8c7  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055d7  00000000  00000000  0005bafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ff0  00000000  00000000  000610d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e20  00000000  00000000  000630c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e28a  00000000  00000000  00064ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027505  00000000  00000000  00083172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab9f0  00000000  00000000  000aa677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00156067  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000982c  00000000  00000000  001560bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011158 	.word	0x08011158

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	08011158 	.word	0x08011158

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96e 	b.w	8000ecc <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468c      	mov	ip, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 8083 	bne.w	8000d1e <__udivmoddi4+0x116>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d947      	bls.n	8000cae <__udivmoddi4+0xa6>
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	b142      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	f1c2 0020 	rsb	r0, r2, #32
 8000c28:	fa24 f000 	lsr.w	r0, r4, r0
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	4097      	lsls	r7, r2
 8000c30:	ea40 0c01 	orr.w	ip, r0, r1
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c40:	fa1f fe87 	uxth.w	lr, r7
 8000c44:	fb08 c116 	mls	r1, r8, r6, ip
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5a:	f080 8119 	bcs.w	8000e90 <__udivmoddi4+0x288>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8116 	bls.w	8000e90 <__udivmoddi4+0x288>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8105 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f240 8102 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c98:	eba4 040e 	sub.w	r4, r4, lr
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	b11d      	cbz	r5, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xaa>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d150      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cba:	1bcb      	subs	r3, r1, r7
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	2601      	movs	r6, #1
 8000cc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cca:	0c21      	lsrs	r1, r4, #16
 8000ccc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000cdc:	1879      	adds	r1, r7, r1
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0xe2>
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	f200 80e9 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x10c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x10a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80d9 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e7bf      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	f000 80b1 	beq.w	8000e8a <__udivmoddi4+0x282>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2e:	4630      	mov	r0, r6
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f683 	clz	r6, r3
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d14a      	bne.n	8000dd4 <__udivmoddi4+0x1cc>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b8 	bhi.w	8000eb8 <__udivmoddi4+0x2b0>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	468c      	mov	ip, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0a8      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000d56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f603 	lsr.w	r6, r0, r3
 8000d64:	4097      	lsls	r7, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6e:	40d9      	lsrs	r1, r3
 8000d70:	4330      	orrs	r0, r6
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d78:	fa1f f887 	uxth.w	r8, r7
 8000d7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb06 f108 	mul.w	r1, r6, r8
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x19c>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d96:	f080 808d 	bcs.w	8000eb4 <__udivmoddi4+0x2ac>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 808a 	bls.w	8000eb4 <__udivmoddi4+0x2ac>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b281      	uxth	r1, r0
 8000da8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb00 f308 	mul.w	r3, r0, r8
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc2:	d273      	bcs.n	8000eac <__udivmoddi4+0x2a4>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d971      	bls.n	8000eac <__udivmoddi4+0x2a4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4439      	add	r1, r7
 8000dcc:	1acb      	subs	r3, r1, r3
 8000dce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd2:	e778      	b.n	8000cc6 <__udivmoddi4+0xbe>
 8000dd4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ddc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de0:	431c      	orrs	r4, r3
 8000de2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000de6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df2:	431f      	orrs	r7, r3
 8000df4:	0c3b      	lsrs	r3, r7, #16
 8000df6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfa:	fa1f f884 	uxth.w	r8, r4
 8000dfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e06:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0a:	458a      	cmp	sl, r1
 8000e0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e10:	fa00 f306 	lsl.w	r3, r0, r6
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x220>
 8000e16:	1861      	adds	r1, r4, r1
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1c:	d248      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e1e:	458a      	cmp	sl, r1
 8000e20:	d946      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4421      	add	r1, r4
 8000e28:	eba1 010a 	sub.w	r1, r1, sl
 8000e2c:	b2bf      	uxth	r7, r7
 8000e2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3a:	fb00 f808 	mul.w	r8, r0, r8
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x24a>
 8000e42:	19e7      	adds	r7, r4, r7
 8000e44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e48:	d22e      	bcs.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4a:	45b8      	cmp	r8, r7
 8000e4c:	d92c      	bls.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4427      	add	r7, r4
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	eba7 0708 	sub.w	r7, r7, r8
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	454f      	cmp	r7, r9
 8000e60:	46c6      	mov	lr, r8
 8000e62:	4649      	mov	r1, r9
 8000e64:	d31a      	bcc.n	8000e9c <__udivmoddi4+0x294>
 8000e66:	d017      	beq.n	8000e98 <__udivmoddi4+0x290>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x27a>
 8000e6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e76:	40f2      	lsrs	r2, r6
 8000e78:	ea4c 0202 	orr.w	r2, ip, r2
 8000e7c:	40f7      	lsrs	r7, r6
 8000e7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e82:	2600      	movs	r6, #0
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e70b      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6fd      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e98:	4543      	cmp	r3, r8
 8000e9a:	d2e5      	bcs.n	8000e68 <__udivmoddi4+0x260>
 8000e9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7df      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e7d2      	b.n	8000e52 <__udivmoddi4+0x24a>
 8000eac:	4660      	mov	r0, ip
 8000eae:	e78d      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb0:	4681      	mov	r9, r0
 8000eb2:	e7b9      	b.n	8000e28 <__udivmoddi4+0x220>
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	e775      	b.n	8000da4 <__udivmoddi4+0x19c>
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e74a      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	4439      	add	r1, r7
 8000ec2:	e713      	b.n	8000cec <__udivmoddi4+0xe4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	e724      	b.n	8000d14 <__udivmoddi4+0x10c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <BlockTillConversionComplete>:
static void DeactivateExternalPullup(DallasTemperature_HandleTypeDef* dt);
//static bool IsAllZeros(const uint8_t * const scratchPad, const size_t length);

// Continue to check if the IC has responded with a temperature
static void BlockTillConversionComplete(DallasTemperature_HandleTypeDef* dt, uint8_t bitResolution)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	70fb      	strb	r3, [r7, #3]
	int delms = DT_MillisToWaitForConversion(bitResolution);
 8000edc:	78fb      	ldrb	r3, [r7, #3]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fb9a 	bl	8001618 <DT_MillisToWaitForConversion>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	60fb      	str	r3, [r7, #12]

	if (dt->checkForConversion && !dt->parasite)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7a9b      	ldrb	r3, [r3, #10]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d01d      	beq.n	8000f2c <BlockTillConversionComplete+0x5c>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	799b      	ldrb	r3, [r3, #6]
 8000ef4:	f083 0301 	eor.w	r3, r3, #1
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d016      	beq.n	8000f2c <BlockTillConversionComplete+0x5c>
	{
		unsigned long now = HAL_GetTick();
 8000efe:	f002 ff55 	bl	8003dac <HAL_GetTick>
 8000f02:	60b8      	str	r0, [r7, #8]
		while (!DT_IsConversionComplete(dt) && (HAL_GetTick() - delms < now))
 8000f04:	e000      	b.n	8000f08 <BlockTillConversionComplete+0x38>
		{
			__NOP();
 8000f06:	bf00      	nop
		while (!DT_IsConversionComplete(dt) && (HAL_GetTick() - delms < now))
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 fb47 	bl	800159c <DT_IsConversionComplete>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	f083 0301 	eor.w	r3, r3, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d013      	beq.n	8000f42 <BlockTillConversionComplete+0x72>
 8000f1a:	f002 ff47 	bl	8003dac <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d8ed      	bhi.n	8000f06 <BlockTillConversionComplete+0x36>
	{
 8000f2a:	e00a      	b.n	8000f42 <BlockTillConversionComplete+0x72>
		}
	}
	else
	{
		ActivateExternalPullup(dt);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f80d 	bl	8000f4c <ActivateExternalPullup>
		HAL_Delay(delms);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f002 ff45 	bl	8003dc4 <HAL_Delay>
		DeactivateExternalPullup(dt);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 f81a 	bl	8000f74 <DeactivateExternalPullup>
	}
}
 8000f40:	e000      	b.n	8000f44 <BlockTillConversionComplete+0x74>
	{
 8000f42:	bf00      	nop
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <ActivateExternalPullup>:

static void ActivateExternalPullup(DallasTemperature_HandleTypeDef* dt)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	if(dt->useExternalPullup)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	79db      	ldrb	r3, [r3, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d005      	beq.n	8000f68 <ActivateExternalPullup+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f62:	4803      	ldr	r0, [pc, #12]	; (8000f70 <ActivateExternalPullup+0x24>)
 8000f64:	f004 f9d4 	bl	8005310 <HAL_GPIO_WritePin>
	}
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40020800 	.word	0x40020800

08000f74 <DeactivateExternalPullup>:

static void DeactivateExternalPullup(DallasTemperature_HandleTypeDef* dt)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	if(dt->useExternalPullup)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	79db      	ldrb	r3, [r3, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d005      	beq.n	8000f90 <DeactivateExternalPullup+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8a:	4803      	ldr	r0, [pc, #12]	; (8000f98 <DeactivateExternalPullup+0x24>)
 8000f8c:	f004 f9c0 	bl	8005310 <HAL_GPIO_WritePin>
	}
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40020800 	.word	0x40020800

08000f9c <DT_SetOneWire>:

	DeactivateExternalPullup(dt);
}

void DT_SetOneWire(DallasTemperature_HandleTypeDef* dt, OneWire_HandleTypeDef* ow)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
	dt->ow 					= ow;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	601a      	str	r2, [r3, #0]
	dt->devices 			= 0;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	711a      	strb	r2, [r3, #4]
	dt->ds18Count 			= 0;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	715a      	strb	r2, [r3, #5]
	dt->parasite 			= false;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	719a      	strb	r2, [r3, #6]
	dt->bitResolution 		= 9;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2209      	movs	r2, #9
 8000fc2:	721a      	strb	r2, [r3, #8]
	dt->waitForConversion 	= true;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	725a      	strb	r2, [r3, #9]
	dt->checkForConversion 	= true;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	729a      	strb	r2, [r3, #10]
	dt->autoSaveScratchPad 	= true;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	72da      	strb	r2, [r3, #11]
	dt->useExternalPullup 	= false;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	71da      	strb	r2, [r3, #7]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <DT_Begin>:

void DT_Begin(DallasTemperature_HandleTypeDef* dt)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b08b      	sub	sp, #44	; 0x2c
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	AllDeviceAddress deviceAddress;

	OW_ResetSearch(dt->ow);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 ff9c 	bl	8001f32 <OW_ResetSearch>
	dt->devices = 0; 	// Reset the number of devices when we enumerate wire devices
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	711a      	strb	r2, [r3, #4]
	dt->ds18Count = 0; 	// Reset number of DS18xxx Family devices
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	715a      	strb	r2, [r3, #5]

	dt->devices = OW_Search(dt->ow, deviceAddress, ONEWIRE_MAX_DEVICES);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f107 010c 	add.w	r1, r7, #12
 800100e:	2203      	movs	r2, #3
 8001010:	4618      	mov	r0, r3
 8001012:	f000 ffb1 	bl	8001f78 <OW_Search>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	711a      	strb	r2, [r3, #4]

	for(uint8_t i = 0; i < dt->devices; i++)
 800101e:	2300      	movs	r3, #0
 8001020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001024:	e059      	b.n	80010da <DT_Begin+0xf2>
	{
		if (DT_ValidAddress(&deviceAddress[i * 8]))
 8001026:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	f107 020c 	add.w	r2, r7, #12
 8001030:	4413      	add	r3, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f868 	bl	8001108 <DT_ValidAddress>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d048      	beq.n	80010d0 <DT_Begin+0xe8>
		{

			if (!dt->parasite && DT_ReadPowerSupply(dt, &deviceAddress[i * 8]))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	799b      	ldrb	r3, [r3, #6]
 8001042:	f083 0301 	eor.w	r3, r3, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00f      	beq.n	800106c <DT_Begin+0x84>
 800104c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	f107 020c 	add.w	r2, r7, #12
 8001056:	4413      	add	r3, r2
 8001058:	4619      	mov	r1, r3
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f986 	bl	800136c <DT_ReadPowerSupply>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d002      	beq.n	800106c <DT_Begin+0x84>
				dt->parasite = true;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	719a      	strb	r2, [r3, #6]

			dt->bitResolution = max(dt->bitResolution, DT_GetResolution(dt, &deviceAddress[i * 8]));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7a1c      	ldrb	r4, [r3, #8]
 8001070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	f107 020c 	add.w	r2, r7, #12
 800107a:	4413      	add	r3, r2
 800107c:	4619      	mov	r1, r3
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 fa5c 	bl	800153c <DT_GetResolution>
 8001084:	4603      	mov	r3, r0
 8001086:	429c      	cmp	r4, r3
 8001088:	d902      	bls.n	8001090 <DT_Begin+0xa8>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7a1a      	ldrb	r2, [r3, #8]
 800108e:	e00b      	b.n	80010a8 <DT_Begin+0xc0>
 8001090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	f107 020c 	add.w	r2, r7, #12
 800109a:	4413      	add	r3, r2
 800109c:	4619      	mov	r1, r3
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 fa4c 	bl	800153c <DT_GetResolution>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	721a      	strb	r2, [r3, #8]

			if (DT_ValidFamily(&deviceAddress[i * 8]))
 80010ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	f107 020c 	add.w	r2, r7, #12
 80010b6:	4413      	add	r3, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f83b 	bl	8001134 <DT_ValidFamily>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <DT_Begin+0xe8>
			{
				dt->ds18Count++;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	795b      	ldrb	r3, [r3, #5]
 80010c8:	3301      	adds	r3, #1
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	715a      	strb	r2, [r3, #5]
	for(uint8_t i = 0; i < dt->devices; i++)
 80010d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010d4:	3301      	adds	r3, #1
 80010d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	791b      	ldrb	r3, [r3, #4]
 80010de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d39f      	bcc.n	8001026 <DT_Begin+0x3e>
			}
		}
	}
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	372c      	adds	r7, #44	; 0x2c
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}

080010f0 <DT_GetDeviceCount>:

// returns the number of devices found on the bus
uint8_t DT_GetDeviceCount(DallasTemperature_HandleTypeDef* dt)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	return dt->devices;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	791b      	ldrb	r3, [r3, #4]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <DT_ValidAddress>:
	return dt->ds18Count;
}

// returns true if address is valid
bool DT_ValidAddress(const uint8_t* deviceAddress)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	return (OW_Crc8(deviceAddress, 7) == deviceAddress[7]);
 8001110:	2107      	movs	r1, #7
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f001 f80c 	bl	8002130 <OW_Crc8>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3307      	adds	r3, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	bf0c      	ite	eq
 8001126:	2301      	moveq	r3, #1
 8001128:	2300      	movne	r3, #0
 800112a:	b2db      	uxtb	r3, r3
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <DT_ValidFamily>:

bool DT_ValidFamily(const uint8_t* deviceAddress)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	switch (deviceAddress[DSROM_FAMILY])
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b42      	cmp	r3, #66	; 0x42
 8001142:	dc14      	bgt.n	800116e <DT_ValidFamily+0x3a>
 8001144:	2b28      	cmp	r3, #40	; 0x28
 8001146:	da04      	bge.n	8001152 <DT_ValidFamily+0x1e>
 8001148:	2b10      	cmp	r3, #16
 800114a:	d00e      	beq.n	800116a <DT_ValidFamily+0x36>
 800114c:	2b22      	cmp	r3, #34	; 0x22
 800114e:	d00c      	beq.n	800116a <DT_ValidFamily+0x36>
 8001150:	e00d      	b.n	800116e <DT_ValidFamily+0x3a>
 8001152:	3b28      	subs	r3, #40	; 0x28
 8001154:	2201      	movs	r2, #1
 8001156:	409a      	lsls	r2, r3
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <DT_ValidFamily+0x48>)
 800115a:	4013      	ands	r3, r2
 800115c:	2b00      	cmp	r3, #0
 800115e:	bf14      	ite	ne
 8001160:	2301      	movne	r3, #1
 8001162:	2300      	moveq	r3, #0
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <DT_ValidFamily+0x3a>
	case DS18S20MODEL:
	case DS18B20MODEL:
	case DS1822MODEL:
	case DS1825MODEL:
	case DS28EA00MODEL:
		return true;
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <DT_ValidFamily+0x3c>
	default:
		return false;
 800116e:	2300      	movs	r3, #0
	}
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	04080001 	.word	0x04080001

08001180 <DT_GetAddress>:

// finds an address at a given index on the bus
// returns true if the device was found
bool DT_GetAddress(DallasTemperature_HandleTypeDef* dt, uint8_t* currentDeviceAddress, uint8_t index)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	; 0x30
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	4613      	mov	r3, r2
 800118c:	71fb      	strb	r3, [r7, #7]
	AllDeviceAddress deviceAddress;

	uint8_t depth = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	depth = OW_Search(dt->ow, deviceAddress, ONEWIRE_MAX_DEVICES);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f107 0114 	add.w	r1, r7, #20
 800119c:	2203      	movs	r2, #3
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 feea 	bl	8001f78 <OW_Search>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(index < depth && DT_ValidAddress(&deviceAddress[index * 8]))
 80011aa:	79fa      	ldrb	r2, [r7, #7]
 80011ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d216      	bcs.n	80011e2 <DT_GetAddress+0x62>
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	f107 0214 	add.w	r2, r7, #20
 80011bc:	4413      	add	r3, r2
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ffa2 	bl	8001108 <DT_ValidAddress>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00b      	beq.n	80011e2 <DT_GetAddress+0x62>
	{
		memcpy(currentDeviceAddress, &deviceAddress[index * 8], 8);
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	f107 0214 	add.w	r2, r7, #20
 80011d2:	4413      	add	r3, r2
 80011d4:	2208      	movs	r2, #8
 80011d6:	4619      	mov	r1, r3
 80011d8:	68b8      	ldr	r0, [r7, #8]
 80011da:	f00d f921 	bl	800e420 <memcpy>
		return true;
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <DT_GetAddress+0x64>
	}

	return false;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3730      	adds	r7, #48	; 0x30
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <DT_IsConnected_ScratchPad>:
}

// attempt to determine if the device at the given address is connected to the bus
// also allows for updating the read scratchpad
bool DT_IsConnected_ScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, uint8_t* scratchPad)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	bool b = DT_ReadScratchPad(dt, deviceAddress, scratchPad);
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f000 f81b 	bl	8001238 <DT_ReadScratchPad>
 8001202:	4603      	mov	r3, r0
 8001204:	75fb      	strb	r3, [r7, #23]
	return (b /*&& IsAllZeros(scratchPad, 8)*/ && (OW_Crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]));
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00c      	beq.n	8001226 <DT_IsConnected_ScratchPad+0x3a>
 800120c:	2108      	movs	r1, #8
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 ff8e 	bl	8002130 <OW_Crc8>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3308      	adds	r3, #8
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	429a      	cmp	r2, r3
 8001220:	d101      	bne.n	8001226 <DT_IsConnected_ScratchPad+0x3a>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <DT_IsConnected_ScratchPad+0x3c>
 8001226:	2300      	movs	r3, #0
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <DT_ReadScratchPad>:

bool DT_ReadScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, uint8_t* scratchPad)
{
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b08c      	sub	sp, #48	; 0x30
 800123c:	af02      	add	r7, sp, #8
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
	// send the reset command and fail fast
	int b = OW_Reset(dt->ow);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f000 fdbb 	bl	8001dc4 <OW_Reset>
 800124e:	4603      	mov	r3, r0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24

	if (b == 0)
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <DT_ReadScratchPad+0x24>
		return false;
 8001258:	2300      	movs	r3, #0
 800125a:	e027      	b.n	80012ac <DT_ReadScratchPad+0x74>

	uint8_t query[19]={0x55, 0, 0, 0, 0, 0, 0, 0, 0, READSCRATCH, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <DT_ReadScratchPad+0x7c>)
 800125e:	f107 0410 	add.w	r4, r7, #16
 8001262:	461d      	mov	r5, r3
 8001264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001268:	682b      	ldr	r3, [r5, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	8022      	strh	r2, [r4, #0]
 800126e:	3402      	adds	r4, #2
 8001270:	0c1b      	lsrs	r3, r3, #16
 8001272:	7023      	strb	r3, [r4, #0]
	memcpy(&query[1], deviceAddress, 8);
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	3301      	adds	r3, #1
 800127a:	2208      	movs	r2, #8
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	4618      	mov	r0, r3
 8001280:	f00d f8ce 	bl	800e420 <memcpy>
	//         DS18B20 & DS1822: store for crc
	// byte 7: DS18S20: COUNT_PER_C
	//         DS18B20 & DS1822: store for crc
	// byte 8: SCRATCHPAD_CRC

	b = OW_Send(dt->ow, query, 19, scratchPad, 9, 10);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	f107 0110 	add.w	r1, r7, #16
 800128c:	230a      	movs	r3, #10
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	2309      	movs	r3, #9
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2213      	movs	r2, #19
 8001298:	f000 fdc8 	bl	8001e2c <OW_Send>
 800129c:	4603      	mov	r3, r0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24

	return (b == OW_OK);
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	bf0c      	ite	eq
 80012a6:	2301      	moveq	r3, #1
 80012a8:	2300      	movne	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3728      	adds	r7, #40	; 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bdb0      	pop	{r4, r5, r7, pc}
 80012b4:	08011170 	.word	0x08011170

080012b8 <DT_WriteScratchPad>:

void DT_WriteScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, const uint8_t* scratchPad)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af02      	add	r7, sp, #8
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
	uint8_t query[13]={0x55, 0, 0, 0, 0, 0, 0, 0, 0, WRITESCRATCH, scratchPad[HIGH_ALARM_TEMP], scratchPad[LOW_ALARM_TEMP], scratchPad[CONFIGURATION]};
 80012c4:	2355      	movs	r3, #85	; 0x55
 80012c6:	743b      	strb	r3, [r7, #16]
 80012c8:	2300      	movs	r3, #0
 80012ca:	747b      	strb	r3, [r7, #17]
 80012cc:	2300      	movs	r3, #0
 80012ce:	74bb      	strb	r3, [r7, #18]
 80012d0:	2300      	movs	r3, #0
 80012d2:	74fb      	strb	r3, [r7, #19]
 80012d4:	2300      	movs	r3, #0
 80012d6:	753b      	strb	r3, [r7, #20]
 80012d8:	2300      	movs	r3, #0
 80012da:	757b      	strb	r3, [r7, #21]
 80012dc:	2300      	movs	r3, #0
 80012de:	75bb      	strb	r3, [r7, #22]
 80012e0:	2300      	movs	r3, #0
 80012e2:	75fb      	strb	r3, [r7, #23]
 80012e4:	2300      	movs	r3, #0
 80012e6:	763b      	strb	r3, [r7, #24]
 80012e8:	234e      	movs	r3, #78	; 0x4e
 80012ea:	767b      	strb	r3, [r7, #25]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	789b      	ldrb	r3, [r3, #2]
 80012f0:	76bb      	strb	r3, [r7, #26]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	78db      	ldrb	r3, [r3, #3]
 80012f6:	76fb      	strb	r3, [r7, #27]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	791b      	ldrb	r3, [r3, #4]
 80012fc:	773b      	strb	r3, [r7, #28]
	memcpy(&query[1], deviceAddress, 8);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	3301      	adds	r3, #1
 8001304:	2208      	movs	r2, #8
 8001306:	68b9      	ldr	r1, [r7, #8]
 8001308:	4618      	mov	r0, r3
 800130a:	f00d f889 	bl	800e420 <memcpy>

	// DS1820 and DS18S20 have no configuration register
	if (deviceAddress[DSROM_FAMILY] != DS18S20MODEL)
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b10      	cmp	r3, #16
 8001314:	d00c      	beq.n	8001330 <DT_WriteScratchPad+0x78>
	{
		OW_Send(dt->ow, query, 13, NULL, 0, OW_NO_READ);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	f107 0110 	add.w	r1, r7, #16
 800131e:	23ff      	movs	r3, #255	; 0xff
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	2300      	movs	r3, #0
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2300      	movs	r3, #0
 8001328:	220d      	movs	r2, #13
 800132a:	f000 fd7f 	bl	8001e2c <OW_Send>
 800132e:	e00b      	b.n	8001348 <DT_WriteScratchPad+0x90>
	}
	else
	{
		OW_Send(dt->ow, query, 12, NULL, 0, OW_NO_READ);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	f107 0110 	add.w	r1, r7, #16
 8001338:	23ff      	movs	r3, #255	; 0xff
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	2300      	movs	r3, #0
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2300      	movs	r3, #0
 8001342:	220c      	movs	r2, #12
 8001344:	f000 fd72 	bl	8001e2c <OW_Send>
	}

	if (dt->autoSaveScratchPad)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	7adb      	ldrb	r3, [r3, #11]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d004      	beq.n	800135a <DT_WriteScratchPad+0xa2>
	{
		DT_SaveScratchPad(dt, deviceAddress);
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 f97e 	bl	8001654 <DT_SaveScratchPad>
	}
	else
	{
		OW_Reset(dt->ow);
	}
}
 8001358:	e004      	b.n	8001364 <DT_WriteScratchPad+0xac>
		OW_Reset(dt->ow);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f000 fd30 	bl	8001dc4 <OW_Reset>
}
 8001364:	bf00      	nop
 8001366:	3720      	adds	r7, #32
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <DT_ReadPowerSupply>:
// returns true if parasite mode is used (2 wire)
// returns false if normal mode is used (3 wire)
// if no address is given (or nullptr) it checks if any device on the bus
// uses parasite mode.
bool DT_ReadPowerSupply(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af02      	add	r7, sp, #8
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
	uint8_t parasiteMode = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	75fb      	strb	r3, [r7, #23]

	OW_Reset(dt->ow);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fd20 	bl	8001dc4 <OW_Reset>

	uint8_t query[11]={0x55, 0, 0, 0, 0, 0, 0, 0, 0, READPOWERSUPPLY, 0xFF};
 8001384:	4a21      	ldr	r2, [pc, #132]	; (800140c <DT_ReadPowerSupply+0xa0>)
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	ca07      	ldmia	r2, {r0, r1, r2}
 800138c:	c303      	stmia	r3!, {r0, r1}
 800138e:	801a      	strh	r2, [r3, #0]
 8001390:	3302      	adds	r3, #2
 8001392:	0c12      	lsrs	r2, r2, #16
 8001394:	701a      	strb	r2, [r3, #0]

	if (deviceAddress == NULL)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d111      	bne.n	80013c0 <DT_ReadPowerSupply+0x54>
	{
	  query[0] = 0xCC;
 800139c:	23cc      	movs	r3, #204	; 0xcc
 800139e:	733b      	strb	r3, [r7, #12]
	  query[1] = READPOWERSUPPLY;
 80013a0:	23b4      	movs	r3, #180	; 0xb4
 80013a2:	737b      	strb	r3, [r7, #13]
	  OW_Send(dt->ow, query, 3, &parasiteMode, 1, 2);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	f107 0317 	add.w	r3, r7, #23
 80013ac:	f107 010c 	add.w	r1, r7, #12
 80013b0:	2202      	movs	r2, #2
 80013b2:	9201      	str	r2, [sp, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	9200      	str	r2, [sp, #0]
 80013b8:	2203      	movs	r2, #3
 80013ba:	f000 fd37 	bl	8001e2c <OW_Send>
 80013be:	e016      	b.n	80013ee <DT_ReadPowerSupply+0x82>
	}
	else
	{
	  query[0] = 0x55;
 80013c0:	2355      	movs	r3, #85	; 0x55
 80013c2:	733b      	strb	r3, [r7, #12]
	  memcpy(&query[1], deviceAddress, 8);
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	3301      	adds	r3, #1
 80013ca:	2208      	movs	r2, #8
 80013cc:	6839      	ldr	r1, [r7, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00d f826 	bl	800e420 <memcpy>
	  OW_Send(dt->ow, query, 10, &parasiteMode, 1, 10);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	f107 0317 	add.w	r3, r7, #23
 80013dc:	f107 010c 	add.w	r1, r7, #12
 80013e0:	220a      	movs	r2, #10
 80013e2:	9201      	str	r2, [sp, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	9200      	str	r2, [sp, #0]
 80013e8:	220a      	movs	r2, #10
 80013ea:	f000 fd1f 	bl	8001e2c <OW_Send>
	}

	OW_Reset(dt->ow);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fce6 	bl	8001dc4 <OW_Reset>

	if (parasiteMode == 0)
 80013f8:	7dfb      	ldrb	r3, [r7, #23]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <DT_ReadPowerSupply+0x96>
	{
		return true;
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <DT_ReadPowerSupply+0x98>
	}
	else
	{
		return false;
 8001402:	2300      	movs	r3, #0
	}
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	08011184 	.word	0x08011184

08001410 <DT_SetResolution>:
}

// set resolution of a device to 9, 10, 11, or 12 bits
// if new resolution is out of range, 9 bits is used.
bool DT_SetResolution(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, uint8_t newResolution, bool skipGlobalBitResolutionCalculation)
{
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b08b      	sub	sp, #44	; 0x2c
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	4611      	mov	r1, r2
 800141c:	461a      	mov	r2, r3
 800141e:	460b      	mov	r3, r1
 8001420:	71fb      	strb	r3, [r7, #7]
 8001422:	4613      	mov	r3, r2
 8001424:	71bb      	strb	r3, [r7, #6]
	// ensure same behavior as setResolution(uint8_t newResolution)
	newResolution = constrain(newResolution, 9, 12);
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b08      	cmp	r3, #8
 800142a:	d905      	bls.n	8001438 <DT_SetResolution+0x28>
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	2b0c      	cmp	r3, #12
 8001430:	bf28      	it	cs
 8001432:	230c      	movcs	r3, #12
 8001434:	b2db      	uxtb	r3, r3
 8001436:	e000      	b.n	800143a <DT_SetResolution+0x2a>
 8001438:	2309      	movs	r3, #9
 800143a:	71fb      	strb	r3, [r7, #7]

	// return when stored value == new value
	if (DT_GetResolution(dt, deviceAddress) == newResolution)
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f000 f87c 	bl	800153c <DT_GetResolution>
 8001444:	4603      	mov	r3, r0
 8001446:	461a      	mov	r2, r3
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <DT_SetResolution+0x42>
		return true;
 800144e:	2301      	movs	r3, #1
 8001450:	e070      	b.n	8001534 <DT_SetResolution+0x124>

	ScratchPad scratchPad;

	if (DT_IsConnected_ScratchPad(dt, deviceAddress, scratchPad))
 8001452:	f107 0318 	add.w	r3, r7, #24
 8001456:	461a      	mov	r2, r3
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f7ff fec6 	bl	80011ec <DT_IsConnected_ScratchPad>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d065      	beq.n	8001532 <DT_SetResolution+0x122>
	{
		// DS1820 and DS18S20 have no resolution configuration register
		if (deviceAddress[DSROM_FAMILY] != DS18S20MODEL)
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b10      	cmp	r3, #16
 800146c:	d05f      	beq.n	800152e <DT_SetResolution+0x11e>
		{
			switch (newResolution)
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b0c      	cmp	r3, #12
 8001472:	d006      	beq.n	8001482 <DT_SetResolution+0x72>
 8001474:	2b0c      	cmp	r3, #12
 8001476:	dc0d      	bgt.n	8001494 <DT_SetResolution+0x84>
 8001478:	2b0a      	cmp	r3, #10
 800147a:	d008      	beq.n	800148e <DT_SetResolution+0x7e>
 800147c:	2b0b      	cmp	r3, #11
 800147e:	d003      	beq.n	8001488 <DT_SetResolution+0x78>
 8001480:	e008      	b.n	8001494 <DT_SetResolution+0x84>
			{
			case 12:
				scratchPad[CONFIGURATION] = TEMP_12_BIT;
 8001482:	237f      	movs	r3, #127	; 0x7f
 8001484:	773b      	strb	r3, [r7, #28]
				break;
 8001486:	e008      	b.n	800149a <DT_SetResolution+0x8a>
			case 11:
				scratchPad[CONFIGURATION] = TEMP_11_BIT;
 8001488:	235f      	movs	r3, #95	; 0x5f
 800148a:	773b      	strb	r3, [r7, #28]
				break;
 800148c:	e005      	b.n	800149a <DT_SetResolution+0x8a>
			case 10:
				scratchPad[CONFIGURATION] = TEMP_10_BIT;
 800148e:	233f      	movs	r3, #63	; 0x3f
 8001490:	773b      	strb	r3, [r7, #28]
				break;
 8001492:	e002      	b.n	800149a <DT_SetResolution+0x8a>
			case 9:
			default:
				scratchPad[CONFIGURATION] = TEMP_9_BIT;
 8001494:	231f      	movs	r3, #31
 8001496:	773b      	strb	r3, [r7, #28]
				break;
 8001498:	bf00      	nop
			}

			DT_WriteScratchPad(dt, deviceAddress, scratchPad);
 800149a:	f107 0318 	add.w	r3, r7, #24
 800149e:	461a      	mov	r2, r3
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f7ff ff08 	bl	80012b8 <DT_WriteScratchPad>

			// without calculation we can always set it to max
			dt->bitResolution = max(dt->bitResolution, newResolution);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	7a1b      	ldrb	r3, [r3, #8]
 80014ac:	79fa      	ldrb	r2, [r7, #7]
 80014ae:	4293      	cmp	r3, r2
 80014b0:	bf38      	it	cc
 80014b2:	4613      	movcc	r3, r2
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	721a      	strb	r2, [r3, #8]

			if (!skipGlobalBitResolutionCalculation && (dt->bitResolution > newResolution))
 80014ba:	79bb      	ldrb	r3, [r7, #6]
 80014bc:	f083 0301 	eor.w	r3, r3, #1
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d033      	beq.n	800152e <DT_SetResolution+0x11e>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	7a1b      	ldrb	r3, [r3, #8]
 80014ca:	79fa      	ldrb	r2, [r7, #7]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d22e      	bcs.n	800152e <DT_SetResolution+0x11e>
			{
				dt->bitResolution = newResolution;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	79fa      	ldrb	r2, [r7, #7]
 80014d4:	721a      	strb	r2, [r3, #8]

				CurrentDeviceAddress deviceAddr;

				for (int i = 0; i < dt->devices; i++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
 80014da:	e022      	b.n	8001522 <DT_SetResolution+0x112>
				{
					DT_GetAddress(dt, deviceAddr, i);
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	4619      	mov	r1, r3
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff fe4a 	bl	8001180 <DT_GetAddress>
					dt->bitResolution = max(dt->bitResolution, DT_GetResolution(dt, deviceAddr));
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	7a1c      	ldrb	r4, [r3, #8]
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	4619      	mov	r1, r3
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 f820 	bl	800153c <DT_GetResolution>
 80014fc:	4603      	mov	r3, r0
 80014fe:	429c      	cmp	r4, r3
 8001500:	d902      	bls.n	8001508 <DT_SetResolution+0xf8>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	7a1a      	ldrb	r2, [r3, #8]
 8001506:	e007      	b.n	8001518 <DT_SetResolution+0x108>
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	4619      	mov	r1, r3
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 f814 	bl	800153c <DT_GetResolution>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	721a      	strb	r2, [r3, #8]
				for (int i = 0; i < dt->devices; i++)
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	3301      	adds	r3, #1
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	791b      	ldrb	r3, [r3, #4]
 8001526:	461a      	mov	r2, r3
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	4293      	cmp	r3, r2
 800152c:	dbd6      	blt.n	80014dc <DT_SetResolution+0xcc>
				}
			}
		}
		return true;  // new value set
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <DT_SetResolution+0x124>
	}
	return false;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	372c      	adds	r7, #44	; 0x2c
 8001538:	46bd      	mov	sp, r7
 800153a:	bd90      	pop	{r4, r7, pc}

0800153c <DT_GetResolution>:
}

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DT_GetResolution(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	// DS1820 and DS18S20 have no resolution configuration register
	if (deviceAddress[0] == DS18S20MODEL)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b10      	cmp	r3, #16
 800154c:	d101      	bne.n	8001552 <DT_GetResolution+0x16>
		return 12;
 800154e:	230c      	movs	r3, #12
 8001550:	e020      	b.n	8001594 <DT_GetResolution+0x58>

	ScratchPad scratchPad;
	if (DT_IsConnected_ScratchPad(dt, deviceAddress, scratchPad))
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	461a      	mov	r2, r3
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fe46 	bl	80011ec <DT_IsConnected_ScratchPad>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d015      	beq.n	8001592 <DT_GetResolution+0x56>
	{
		switch (scratchPad[CONFIGURATION])
 8001566:	7c3b      	ldrb	r3, [r7, #16]
 8001568:	2b7f      	cmp	r3, #127	; 0x7f
 800156a:	d00a      	beq.n	8001582 <DT_GetResolution+0x46>
 800156c:	2b7f      	cmp	r3, #127	; 0x7f
 800156e:	dc10      	bgt.n	8001592 <DT_GetResolution+0x56>
 8001570:	2b5f      	cmp	r3, #95	; 0x5f
 8001572:	d008      	beq.n	8001586 <DT_GetResolution+0x4a>
 8001574:	2b5f      	cmp	r3, #95	; 0x5f
 8001576:	dc0c      	bgt.n	8001592 <DT_GetResolution+0x56>
 8001578:	2b1f      	cmp	r3, #31
 800157a:	d008      	beq.n	800158e <DT_GetResolution+0x52>
 800157c:	2b3f      	cmp	r3, #63	; 0x3f
 800157e:	d004      	beq.n	800158a <DT_GetResolution+0x4e>
 8001580:	e007      	b.n	8001592 <DT_GetResolution+0x56>
		{
		case TEMP_12_BIT:
			return 12;
 8001582:	230c      	movs	r3, #12
 8001584:	e006      	b.n	8001594 <DT_GetResolution+0x58>

		case TEMP_11_BIT:
			return 11;
 8001586:	230b      	movs	r3, #11
 8001588:	e004      	b.n	8001594 <DT_GetResolution+0x58>

		case TEMP_10_BIT:
			return 10;
 800158a:	230a      	movs	r3, #10
 800158c:	e002      	b.n	8001594 <DT_GetResolution+0x58>

		case TEMP_9_BIT:
			return 9;
 800158e:	2309      	movs	r3, #9
 8001590:	e000      	b.n	8001594 <DT_GetResolution+0x58>
		}
	}
	return 0;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <DT_IsConversionComplete>:
{
	return dt->checkForConversion;
}

bool DT_IsConversionComplete(DallasTemperature_HandleTypeDef* dt)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af02      	add	r7, sp, #8
 80015a2:	6078      	str	r0, [r7, #4]
	uint8_t b;
	OW_Send(dt->ow, (uint8_t *) OW_READ_SLOT, 0, &b, 1, 0);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	f107 030f 	add.w	r3, r7, #15
 80015ac:	2200      	movs	r2, #0
 80015ae:	9201      	str	r2, [sp, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	9200      	str	r2, [sp, #0]
 80015b4:	2200      	movs	r2, #0
 80015b6:	21ff      	movs	r1, #255	; 0xff
 80015b8:	f000 fc38 	bl	8001e2c <OW_Send>

	return (b == 1);
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	bf0c      	ite	eq
 80015c2:	2301      	moveq	r3, #1
 80015c4:	2300      	movne	r3, #0
 80015c6:	b2db      	uxtb	r3, r3
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <DT_RequestTemperatures>:

// sends command for all devices on the bus to perform a temperature conversion
void DT_RequestTemperatures(DallasTemperature_HandleTypeDef* dt)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	6078      	str	r0, [r7, #4]
	OW_Send(dt->ow, (uint8_t *) "\xcc\x44", 2, (uint8_t *) NULL, 0, OW_NO_READ);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6818      	ldr	r0, [r3, #0]
 80015dc:	23ff      	movs	r3, #255	; 0xff
 80015de:	9301      	str	r3, [sp, #4]
 80015e0:	2300      	movs	r3, #0
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2300      	movs	r3, #0
 80015e6:	2202      	movs	r2, #2
 80015e8:	490a      	ldr	r1, [pc, #40]	; (8001614 <DT_RequestTemperatures+0x44>)
 80015ea:	f000 fc1f 	bl	8001e2c <OW_Send>

	// ASYNC mode?
	if (!dt->waitForConversion)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	7a5b      	ldrb	r3, [r3, #9]
 80015f2:	f083 0301 	eor.w	r3, r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d106      	bne.n	800160a <DT_RequestTemperatures+0x3a>
		return;

	BlockTillConversionComplete(dt, dt->bitResolution);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7a1b      	ldrb	r3, [r3, #8]
 8001600:	4619      	mov	r1, r3
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff fc64 	bl	8000ed0 <BlockTillConversionComplete>
 8001608:	e000      	b.n	800160c <DT_RequestTemperatures+0x3c>
		return;
 800160a:	bf00      	nop
}
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	08011190 	.word	0x08011190

08001618 <DT_MillisToWaitForConversion>:
	return DT_RequestTemperaturesByAddress(dt, deviceAddress);
}

// returns number of milliseconds to wait till conversion is complete (based on IC datasheet)
int16_t DT_MillisToWaitForConversion(uint8_t bitResolution)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
	switch (bitResolution)
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	2b0b      	cmp	r3, #11
 8001626:	d00a      	beq.n	800163e <DT_MillisToWaitForConversion+0x26>
 8001628:	2b0b      	cmp	r3, #11
 800162a:	dc0b      	bgt.n	8001644 <DT_MillisToWaitForConversion+0x2c>
 800162c:	2b09      	cmp	r3, #9
 800162e:	d002      	beq.n	8001636 <DT_MillisToWaitForConversion+0x1e>
 8001630:	2b0a      	cmp	r3, #10
 8001632:	d002      	beq.n	800163a <DT_MillisToWaitForConversion+0x22>
 8001634:	e006      	b.n	8001644 <DT_MillisToWaitForConversion+0x2c>
	{
	case 9:
		return 94;
 8001636:	235e      	movs	r3, #94	; 0x5e
 8001638:	e006      	b.n	8001648 <DT_MillisToWaitForConversion+0x30>
	case 10:
		return 188;
 800163a:	23bc      	movs	r3, #188	; 0xbc
 800163c:	e004      	b.n	8001648 <DT_MillisToWaitForConversion+0x30>
	case 11:
		return 375;
 800163e:	f240 1377 	movw	r3, #375	; 0x177
 8001642:	e001      	b.n	8001648 <DT_MillisToWaitForConversion+0x30>
	default:
		return 750;
 8001644:	f240 23ee 	movw	r3, #750	; 0x2ee
	}
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <DT_SaveScratchPad>:

// Sends command to one or more devices to save values from scratchpad to EEPROM
// If optional argument deviceAddress is omitted the command is send to all devices
// Returns true if no errors were encountered, false indicates failure
bool DT_SaveScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af02      	add	r7, sp, #8
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
	uint8_t query[10]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 800165e:	4a2f      	ldr	r2, [pc, #188]	; (800171c <DT_SaveScratchPad+0xc8>)
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	ca07      	ldmia	r2, {r0, r1, r2}
 8001666:	c303      	stmia	r3!, {r0, r1}
 8001668:	801a      	strh	r2, [r3, #0]

	if (OW_Reset(dt->ow) == 0)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fba8 	bl	8001dc4 <OW_Reset>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <DT_SaveScratchPad+0x2a>
		return false;
 800167a:	2300      	movs	r3, #0
 800167c:	e04a      	b.n	8001714 <DT_SaveScratchPad+0xc0>

  if (deviceAddress == NULL)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d110      	bne.n	80016a6 <DT_SaveScratchPad+0x52>
  {
	  query[0] = 0xCC;
 8001684:	23cc      	movs	r3, #204	; 0xcc
 8001686:	733b      	strb	r3, [r7, #12]
	  query[1] = COPYSCRATCH;
 8001688:	2348      	movs	r3, #72	; 0x48
 800168a:	737b      	strb	r3, [r7, #13]
	  OW_Send(dt->ow, query, 2, NULL, 0, OW_NO_READ);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	f107 010c 	add.w	r1, r7, #12
 8001694:	23ff      	movs	r3, #255	; 0xff
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	2300      	movs	r3, #0
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2300      	movs	r3, #0
 800169e:	2202      	movs	r2, #2
 80016a0:	f000 fbc4 	bl	8001e2c <OW_Send>
 80016a4:	e017      	b.n	80016d6 <DT_SaveScratchPad+0x82>
  }
  else
  {
	  query[0] = 0x55;
 80016a6:	2355      	movs	r3, #85	; 0x55
 80016a8:	733b      	strb	r3, [r7, #12]
	  memcpy(&query[1], deviceAddress, 8);
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	3301      	adds	r3, #1
 80016b0:	2208      	movs	r2, #8
 80016b2:	6839      	ldr	r1, [r7, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f00c feb3 	bl	800e420 <memcpy>
	  query[9] = COPYSCRATCH;
 80016ba:	2348      	movs	r3, #72	; 0x48
 80016bc:	757b      	strb	r3, [r7, #21]
	  OW_Send(dt->ow, query, 10, NULL, 0, OW_NO_READ);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6818      	ldr	r0, [r3, #0]
 80016c2:	f107 010c 	add.w	r1, r7, #12
 80016c6:	23ff      	movs	r3, #255	; 0xff
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	2300      	movs	r3, #0
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2300      	movs	r3, #0
 80016d0:	220a      	movs	r2, #10
 80016d2:	f000 fbab 	bl	8001e2c <OW_Send>
  }

  // Specification: NV Write Cycle Time is typically 2ms, max 10ms
  // Waiting 20ms to allow for sensors that take longer in practice
  if (!dt->parasite)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	799b      	ldrb	r3, [r3, #6]
 80016da:	f083 0301 	eor.w	r3, r3, #1
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <DT_SaveScratchPad+0x98>
  {
    HAL_Delay(20);
 80016e4:	2014      	movs	r0, #20
 80016e6:	f002 fb6d 	bl	8003dc4 <HAL_Delay>
 80016ea:	e008      	b.n	80016fe <DT_SaveScratchPad+0xaa>
  }
  else
  {

	ActivateExternalPullup(dt);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fc2d 	bl	8000f4c <ActivateExternalPullup>
    HAL_Delay(20);
 80016f2:	2014      	movs	r0, #20
 80016f4:	f002 fb66 	bl	8003dc4 <HAL_Delay>
    DeactivateExternalPullup(dt);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fc3b 	bl	8000f74 <DeactivateExternalPullup>
  }

  return OW_Reset(dt->ow) == 1;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fb5e 	bl	8001dc4 <OW_Reset>
 8001708:	4603      	mov	r3, r0
 800170a:	2b01      	cmp	r3, #1
 800170c:	bf0c      	ite	eq
 800170e:	2301      	moveq	r3, #1
 8001710:	2300      	movne	r3, #0
 8001712:	b2db      	uxtb	r3, r3
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	080111a0 	.word	0x080111a0

08001720 <DT_GetTempCByIndex>:
  return dt->autoSaveScratchPad;
}

// Fetch temperature for device index
float DT_GetTempCByIndex(DallasTemperature_HandleTypeDef* dt, uint8_t deviceIndex)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	70fb      	strb	r3, [r7, #3]
	CurrentDeviceAddress deviceAddress;

	if (!DT_GetAddress(dt, deviceAddress, deviceIndex))
 800172c:	78fa      	ldrb	r2, [r7, #3]
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	4619      	mov	r1, r3
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fd23 	bl	8001180 <DT_GetAddress>
 800173a:	4603      	mov	r3, r0
 800173c:	f083 0301 	eor.w	r3, r3, #1
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d002      	beq.n	800174c <DT_GetTempCByIndex+0x2c>
	{
		return DEVICE_DISCONNECTED_C;
 8001746:	eddf 7a08 	vldr	s15, [pc, #32]	; 8001768 <DT_GetTempCByIndex+0x48>
 800174a:	e007      	b.n	800175c <DT_GetTempCByIndex+0x3c>
	}

	return DT_GetTempC(dt, (uint8_t*) deviceAddress);
 800174c:	f107 0308 	add.w	r3, r7, #8
 8001750:	4619      	mov	r1, r3
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f860 	bl	8001818 <DT_GetTempC>
 8001758:	eef0 7a40 	vmov.f32	s15, s0
}
 800175c:	eeb0 0a67 	vmov.f32	s0, s15
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	c2fe0000 	.word	0xc2fe0000

0800176c <DT_CalculateTemperature>:
	return DT_GetTempF(dt, (uint8_t*) deviceAddress);
}

// reads scratchpad and returns fixed-point temperature, scaling factor 2^-7
int16_t DT_CalculateTemperature(const uint8_t* deviceAddress, uint8_t* scratchPad)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
	int16_t fpTemperature = (((int16_t) scratchPad[TEMP_MSB]) << 11) | (((int16_t) scratchPad[TEMP_LSB]) << 3);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	02db      	lsls	r3, r3, #11
 800177e:	b21a      	sxth	r2, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	b21b      	sxth	r3, r3
 8001788:	4313      	orrs	r3, r2
 800178a:	81fb      	strh	r3, [r7, #14]
	 value for a DS18S20, and James Cameron added legacy DS1820 support.

	 See - http://myarduinotoy.blogspot.co.uk/2013/02/12bit-result-from-ds18s20.html
	 */

	if (deviceAddress[0] == DS18S20MODEL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b10      	cmp	r3, #16
 8001792:	d11a      	bne.n	80017ca <DT_CalculateTemperature+0x5e>
	{
		fpTemperature = ((fpTemperature & 0xfff0) << 3) - 16 + (((scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) << 7) / scratchPad[COUNT_PER_C]);
 8001794:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	b29b      	uxth	r3, r3
 800179c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	3307      	adds	r3, #7
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	3306      	adds	r3, #6
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	1acb      	subs	r3, r1, r3
 80017b2:	01db      	lsls	r3, r3, #7
 80017b4:	6839      	ldr	r1, [r7, #0]
 80017b6:	3107      	adds	r1, #7
 80017b8:	7809      	ldrb	r1, [r1, #0]
 80017ba:	fb93 f3f1 	sdiv	r3, r3, r1
 80017be:	b29b      	uxth	r3, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	3b10      	subs	r3, #16
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	81fb      	strh	r3, [r7, #14]
	}

	return fpTemperature;
 80017ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <DT_GetTemp>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_RAW is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
int16_t DT_GetTemp(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
	ScratchPad scratchPad;
	if (DT_IsConnected_ScratchPad(dt, deviceAddress, scratchPad))
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	461a      	mov	r2, r3
 80017ec:	6839      	ldr	r1, [r7, #0]
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fcfc 	bl	80011ec <DT_IsConnected_ScratchPad>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d007      	beq.n	800180a <DT_GetTemp+0x2e>
		return DT_CalculateTemperature(deviceAddress, scratchPad);
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	4619      	mov	r1, r3
 8001800:	6838      	ldr	r0, [r7, #0]
 8001802:	f7ff ffb3 	bl	800176c <DT_CalculateTemperature>
 8001806:	4603      	mov	r3, r0
 8001808:	e000      	b.n	800180c <DT_GetTemp+0x30>
	return DEVICE_DISCONNECTED_RAW;
 800180a:	4b02      	ldr	r3, [pc, #8]	; (8001814 <DT_GetTemp+0x38>)
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	ffffe480 	.word	0xffffe480

08001818 <DT_GetTempC>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_C is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DT_GetTempC(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
	return DT_RawToCelsius(DT_GetTemp(dt, deviceAddress));
 8001822:	6839      	ldr	r1, [r7, #0]
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ffd9 	bl	80017dc <DT_GetTemp>
 800182a:	4603      	mov	r3, r0
 800182c:	4618      	mov	r0, r3
 800182e:	f000 f807 	bl	8001840 <DT_RawToCelsius>
 8001832:	eef0 7a40 	vmov.f32	s15, s0
}
 8001836:	eeb0 0a67 	vmov.f32	s0, s15
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <DT_RawToCelsius>:
	return (fahrenheit - 32) * 0.555555556;
}

// convert from raw to Celsius
float DT_RawToCelsius(int16_t raw)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
	if (raw <= DEVICE_DISCONNECTED_RAW)
 800184a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800184e:	f513 5fdc 	cmn.w	r3, #7040	; 0x1b80
 8001852:	dc02      	bgt.n	800185a <DT_RawToCelsius+0x1a>
		return DEVICE_DISCONNECTED_C;
 8001854:	eddf 7a09 	vldr	s15, [pc, #36]	; 800187c <DT_RawToCelsius+0x3c>
 8001858:	e009      	b.n	800186e <DT_RawToCelsius+0x2e>
	// C = RAW/128
	return (float) raw * 0.0078125;
 800185a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185e:	ee07 3a90 	vmov	s15, r3
 8001862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001866:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001880 <DT_RawToCelsius+0x40>
 800186a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800186e:	eeb0 0a67 	vmov.f32	s0, s15
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	c2fe0000 	.word	0xc2fe0000
 8001880:	3c000000 	.word	0x3c000000

08001884 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7fe fcb1 	bl	80001f4 <strlen>
 8001892:	4603      	mov	r3, r0
 8001894:	b29a      	uxth	r2, r3
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4803      	ldr	r0, [pc, #12]	; (80018ac <Send_Uart+0x28>)
 800189e:	f006 f84f 	bl	8007940 <HAL_UART_Transmit>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200069dc 	.word	0x200069dc

080018b0 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80018b8:	2201      	movs	r2, #1
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	480a      	ldr	r0, [pc, #40]	; (80018e8 <Mount_SD+0x38>)
 80018be:	f009 f9df 	bl	800ac80 <f_mount>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <Mount_SD+0x3c>)
 80018c8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <Mount_SD+0x3c>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <Mount_SD+0x2a>
 80018d2:	4807      	ldr	r0, [pc, #28]	; (80018f0 <Mount_SD+0x40>)
 80018d4:	f7ff ffd6 	bl	8001884 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 80018d8:	e002      	b.n	80018e0 <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 80018da:	4806      	ldr	r0, [pc, #24]	; (80018f4 <Mount_SD+0x44>)
 80018dc:	f7ff ffd2 	bl	8001884 <Send_Uart>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	2000463c 	.word	0x2000463c
 80018ec:	20005684 	.word	0x20005684
 80018f0:	080111ac 	.word	0x080111ac
 80018f4:	080111d0 	.word	0x080111d0

080018f8 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001900:	2201      	movs	r2, #1
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	2000      	movs	r0, #0
 8001906:	f009 f9bb 	bl	800ac80 <f_mount>
 800190a:	4603      	mov	r3, r0
 800190c:	461a      	mov	r2, r3
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <Unmount_SD+0x38>)
 8001910:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <Unmount_SD+0x38>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d103      	bne.n	8001922 <Unmount_SD+0x2a>
 800191a:	4806      	ldr	r0, [pc, #24]	; (8001934 <Unmount_SD+0x3c>)
 800191c:	f7ff ffb2 	bl	8001884 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8001920:	e002      	b.n	8001928 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <Unmount_SD+0x40>)
 8001924:	f7ff ffae 	bl	8001884 <Send_Uart>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20005684 	.word	0x20005684
 8001934:	080111f4 	.word	0x080111f4
 8001938:	0801121c 	.word	0x0801121c

0800193c <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08e      	sub	sp, #56	; 0x38
 8001940:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = pvPortMalloc(20*sizeof (char));
 8001942:	2014      	movs	r0, #20
 8001944:	f00c fb58 	bl	800dff8 <pvPortMalloc>
 8001948:	6378      	str	r0, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 800194a:	4a29      	ldr	r2, [pc, #164]	; (80019f0 <Format_SD+0xb4>)
 800194c:	4929      	ldr	r1, [pc, #164]	; (80019f4 <Format_SD+0xb8>)
 800194e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001950:	f00d f9e6 	bl	800ed20 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001958:	4618      	mov	r0, r3
 800195a:	f009 fe43 	bl	800b5e4 <f_opendir>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <Format_SD+0xbc>)
 8001964:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001966:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <Format_SD+0xbc>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d136      	bne.n	80019dc <Format_SD+0xa0>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	4922      	ldr	r1, [pc, #136]	; (80019fc <Format_SD+0xc0>)
 8001972:	4618      	mov	r0, r3
 8001974:	f009 feda 	bl	800b72c <f_readdir>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <Format_SD+0xbc>)
 800197e:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <Format_SD+0xbc>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d125      	bne.n	80019d4 <Format_SD+0x98>
 8001988:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <Format_SD+0xc0>)
 800198a:	7a5b      	ldrb	r3, [r3, #9]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d021      	beq.n	80019d4 <Format_SD+0x98>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <Format_SD+0xc0>)
 8001992:	7a1b      	ldrb	r3, [r3, #8]
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b00      	cmp	r3, #0
 800199a:	d011      	beq.n	80019c0 <Format_SD+0x84>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 800199c:	4918      	ldr	r1, [pc, #96]	; (8001a00 <Format_SD+0xc4>)
 800199e:	4819      	ldr	r0, [pc, #100]	; (8001a04 <Format_SD+0xc8>)
 80019a0:	f7fe fc1e 	bl	80001e0 <strcmp>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d012      	beq.n	80019d0 <Format_SD+0x94>
            	fresult = f_unlink(fno.fname);
 80019aa:	4815      	ldr	r0, [pc, #84]	; (8001a00 <Format_SD+0xc4>)
 80019ac:	f009 ff41 	bl	800b832 <f_unlink>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <Format_SD+0xbc>)
 80019b6:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <Format_SD+0xbc>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b07      	cmp	r3, #7
 80019be:	e7d6      	b.n	800196e <Format_SD+0x32>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 80019c0:	480f      	ldr	r0, [pc, #60]	; (8001a00 <Format_SD+0xc4>)
 80019c2:	f009 ff36 	bl	800b832 <f_unlink>
 80019c6:	4603      	mov	r3, r0
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <Format_SD+0xbc>)
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	e7ce      	b.n	800196e <Format_SD+0x32>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80019d0:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80019d2:	e7cc      	b.n	800196e <Format_SD+0x32>
            }
        }
        f_closedir(&dir);
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	4618      	mov	r0, r3
 80019d8:	f009 fe7d 	bl	800b6d6 <f_closedir>
    }
    vPortFree(path);
 80019dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019de:	f00c fbd7 	bl	800e190 <vPortFree>
    return fresult;
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <Format_SD+0xbc>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3738      	adds	r7, #56	; 0x38
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	08011270 	.word	0x08011270
 80019f4:	08011240 	.word	0x08011240
 80019f8:	20005684 	.word	0x20005684
 80019fc:	20004624 	.word	0x20004624
 8001a00:	2000462d 	.word	0x2000462d
 8001a04:	08011244 	.word	0x08011244

08001a08 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001a10:	4940      	ldr	r1, [pc, #256]	; (8001b14 <Create_File+0x10c>)
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f009 fecd 	bl	800b7b2 <f_stat>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b3e      	ldr	r3, [pc, #248]	; (8001b18 <Create_File+0x110>)
 8001a1e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001a20:	4b3d      	ldr	r3, [pc, #244]	; (8001b18 <Create_File+0x110>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d111      	bne.n	8001a4c <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001a28:	2064      	movs	r0, #100	; 0x64
 8001a2a:	f00c fae5 	bl	800dff8 <pvPortMalloc>
 8001a2e:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	493a      	ldr	r1, [pc, #232]	; (8001b1c <Create_File+0x114>)
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f00d f973 	bl	800ed20 <siprintf>
		Send_Uart(buf);
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f7ff ff22 	bl	8001884 <Send_Uart>
		vPortFree(buf);
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f00c fba5 	bl	800e190 <vPortFree>
	    return fresult;
 8001a46:	4b34      	ldr	r3, [pc, #208]	; (8001b18 <Create_File+0x110>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	e05f      	b.n	8001b0c <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001a4c:	220b      	movs	r2, #11
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4833      	ldr	r0, [pc, #204]	; (8001b20 <Create_File+0x118>)
 8001a52:	f009 f979 	bl	800ad48 <f_open>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <Create_File+0x110>)
 8001a5c:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001a5e:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <Create_File+0x110>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d014      	beq.n	8001a90 <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001a66:	2064      	movs	r0, #100	; 0x64
 8001a68:	f00c fac6 	bl	800dff8 <pvPortMalloc>
 8001a6c:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8001a6e:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <Create_File+0x110>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	492b      	ldr	r1, [pc, #172]	; (8001b24 <Create_File+0x11c>)
 8001a78:	6938      	ldr	r0, [r7, #16]
 8001a7a:	f00d f951 	bl	800ed20 <siprintf>
			Send_Uart(buf);
 8001a7e:	6938      	ldr	r0, [r7, #16]
 8001a80:	f7ff ff00 	bl	8001884 <Send_Uart>
			vPortFree(buf);
 8001a84:	6938      	ldr	r0, [r7, #16]
 8001a86:	f00c fb83 	bl	800e190 <vPortFree>
		    return fresult;
 8001a8a:	4b23      	ldr	r3, [pc, #140]	; (8001b18 <Create_File+0x110>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	e03d      	b.n	8001b0c <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001a90:	2064      	movs	r0, #100	; 0x64
 8001a92:	f00c fab1 	bl	800dff8 <pvPortMalloc>
 8001a96:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4923      	ldr	r1, [pc, #140]	; (8001b28 <Create_File+0x120>)
 8001a9c:	69f8      	ldr	r0, [r7, #28]
 8001a9e:	f00d f93f 	bl	800ed20 <siprintf>
			Send_Uart(buf);
 8001aa2:	69f8      	ldr	r0, [r7, #28]
 8001aa4:	f7ff feee 	bl	8001884 <Send_Uart>
			vPortFree(buf);
 8001aa8:	69f8      	ldr	r0, [r7, #28]
 8001aaa:	f00c fb71 	bl	800e190 <vPortFree>
		}

		fresult = f_close(&fil);
 8001aae:	481c      	ldr	r0, [pc, #112]	; (8001b20 <Create_File+0x118>)
 8001ab0:	f009 fd69 	bl	800b586 <f_close>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <Create_File+0x110>)
 8001aba:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <Create_File+0x110>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d012      	beq.n	8001aea <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001ac4:	2064      	movs	r0, #100	; 0x64
 8001ac6:	f00c fa97 	bl	800dff8 <pvPortMalloc>
 8001aca:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <Create_File+0x110>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4915      	ldr	r1, [pc, #84]	; (8001b2c <Create_File+0x124>)
 8001ad6:	6978      	ldr	r0, [r7, #20]
 8001ad8:	f00d f922 	bl	800ed20 <siprintf>
			Send_Uart(buf);
 8001adc:	6978      	ldr	r0, [r7, #20]
 8001ade:	f7ff fed1 	bl	8001884 <Send_Uart>
			vPortFree(buf);
 8001ae2:	6978      	ldr	r0, [r7, #20]
 8001ae4:	f00c fb54 	bl	800e190 <vPortFree>
 8001ae8:	e00e      	b.n	8001b08 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001aea:	2064      	movs	r0, #100	; 0x64
 8001aec:	f00c fa84 	bl	800dff8 <pvPortMalloc>
 8001af0:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	490e      	ldr	r1, [pc, #56]	; (8001b30 <Create_File+0x128>)
 8001af6:	69b8      	ldr	r0, [r7, #24]
 8001af8:	f00d f912 	bl	800ed20 <siprintf>
			Send_Uart(buf);
 8001afc:	69b8      	ldr	r0, [r7, #24]
 8001afe:	f7ff fec1 	bl	8001884 <Send_Uart>
			vPortFree(buf);
 8001b02:	69b8      	ldr	r0, [r7, #24]
 8001b04:	f00c fb44 	bl	800e190 <vPortFree>
		}
	}
    return fresult;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <Create_File+0x110>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20004624 	.word	0x20004624
 8001b18:	20005684 	.word	0x20005684
 8001b1c:	080113ec 	.word	0x080113ec
 8001b20:	2000568c 	.word	0x2000568c
 8001b24:	08011424 	.word	0x08011424
 8001b28:	0801144c 	.word	0x0801144c
 8001b2c:	0801148c 	.word	0x0801148c
 8001b30:	080113cc 	.word	0x080113cc

08001b34 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001b3e:	4953      	ldr	r1, [pc, #332]	; (8001c8c <Update_File+0x158>)
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f009 fe36 	bl	800b7b2 <f_stat>
 8001b46:	4603      	mov	r3, r0
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b51      	ldr	r3, [pc, #324]	; (8001c90 <Update_File+0x15c>)
 8001b4c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001b4e:	4b50      	ldr	r3, [pc, #320]	; (8001c90 <Update_File+0x15c>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d011      	beq.n	8001b7a <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001b56:	2064      	movs	r0, #100	; 0x64
 8001b58:	f00c fa4e 	bl	800dff8 <pvPortMalloc>
 8001b5c:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	494c      	ldr	r1, [pc, #304]	; (8001c94 <Update_File+0x160>)
 8001b62:	68b8      	ldr	r0, [r7, #8]
 8001b64:	f00d f8dc 	bl	800ed20 <siprintf>
		Send_Uart (buf);
 8001b68:	68b8      	ldr	r0, [r7, #8]
 8001b6a:	f7ff fe8b 	bl	8001884 <Send_Uart>
		vPortFree(buf);
 8001b6e:	68b8      	ldr	r0, [r7, #8]
 8001b70:	f00c fb0e 	bl	800e190 <vPortFree>
	    return fresult;
 8001b74:	4b46      	ldr	r3, [pc, #280]	; (8001c90 <Update_File+0x15c>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	e083      	b.n	8001c82 <Update_File+0x14e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001b7a:	2232      	movs	r2, #50	; 0x32
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	4846      	ldr	r0, [pc, #280]	; (8001c98 <Update_File+0x164>)
 8001b80:	f009 f8e2 	bl	800ad48 <f_open>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b41      	ldr	r3, [pc, #260]	; (8001c90 <Update_File+0x15c>)
 8001b8a:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001b8c:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <Update_File+0x15c>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d014      	beq.n	8001bbe <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001b94:	2064      	movs	r0, #100	; 0x64
 8001b96:	f00c fa2f 	bl	800dff8 <pvPortMalloc>
 8001b9a:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001b9c:	4b3c      	ldr	r3, [pc, #240]	; (8001c90 <Update_File+0x15c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	493d      	ldr	r1, [pc, #244]	; (8001c9c <Update_File+0x168>)
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f00d f8ba 	bl	800ed20 <siprintf>
	    	Send_Uart(buf);
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f7ff fe69 	bl	8001884 <Send_Uart>
	        vPortFree(buf);
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f00c faec 	bl	800e190 <vPortFree>
	        return fresult;
 8001bb8:	4b35      	ldr	r3, [pc, #212]	; (8001c90 <Update_File+0x15c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	e061      	b.n	8001c82 <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8001bbe:	6838      	ldr	r0, [r7, #0]
 8001bc0:	f7fe fb18 	bl	80001f4 <strlen>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <Update_File+0x16c>)
 8001bc8:	6839      	ldr	r1, [r7, #0]
 8001bca:	4833      	ldr	r0, [pc, #204]	; (8001c98 <Update_File+0x164>)
 8001bcc:	f009 fa8f 	bl	800b0ee <f_write>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <Update_File+0x15c>)
 8001bd6:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001bd8:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <Update_File+0x15c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d012      	beq.n	8001c06 <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001be0:	2064      	movs	r0, #100	; 0x64
 8001be2:	f00c fa09 	bl	800dff8 <pvPortMalloc>
 8001be6:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8001be8:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <Update_File+0x15c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	492c      	ldr	r1, [pc, #176]	; (8001ca4 <Update_File+0x170>)
 8001bf2:	69b8      	ldr	r0, [r7, #24]
 8001bf4:	f00d f894 	bl	800ed20 <siprintf>
	    	Send_Uart(buf);
 8001bf8:	69b8      	ldr	r0, [r7, #24]
 8001bfa:	f7ff fe43 	bl	8001884 <Send_Uart>
	    	vPortFree(buf);
 8001bfe:	69b8      	ldr	r0, [r7, #24]
 8001c00:	f00c fac6 	bl	800e190 <vPortFree>
 8001c04:	e00e      	b.n	8001c24 <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001c06:	2064      	movs	r0, #100	; 0x64
 8001c08:	f00c f9f6 	bl	800dff8 <pvPortMalloc>
 8001c0c:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4925      	ldr	r1, [pc, #148]	; (8001ca8 <Update_File+0x174>)
 8001c12:	69f8      	ldr	r0, [r7, #28]
 8001c14:	f00d f884 	bl	800ed20 <siprintf>
	    	Send_Uart(buf);
 8001c18:	69f8      	ldr	r0, [r7, #28]
 8001c1a:	f7ff fe33 	bl	8001884 <Send_Uart>
	    	vPortFree(buf);
 8001c1e:	69f8      	ldr	r0, [r7, #28]
 8001c20:	f00c fab6 	bl	800e190 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8001c24:	481c      	ldr	r0, [pc, #112]	; (8001c98 <Update_File+0x164>)
 8001c26:	f009 fcae 	bl	800b586 <f_close>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <Update_File+0x15c>)
 8001c30:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <Update_File+0x15c>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d012      	beq.n	8001c60 <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001c3a:	2064      	movs	r0, #100	; 0x64
 8001c3c:	f00c f9dc 	bl	800dff8 <pvPortMalloc>
 8001c40:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <Update_File+0x15c>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4918      	ldr	r1, [pc, #96]	; (8001cac <Update_File+0x178>)
 8001c4c:	6938      	ldr	r0, [r7, #16]
 8001c4e:	f00d f867 	bl	800ed20 <siprintf>
	    	Send_Uart(buf);
 8001c52:	6938      	ldr	r0, [r7, #16]
 8001c54:	f7ff fe16 	bl	8001884 <Send_Uart>
	    	vPortFree(buf);
 8001c58:	6938      	ldr	r0, [r7, #16]
 8001c5a:	f00c fa99 	bl	800e190 <vPortFree>
 8001c5e:	e00e      	b.n	8001c7e <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001c60:	2064      	movs	r0, #100	; 0x64
 8001c62:	f00c f9c9 	bl	800dff8 <pvPortMalloc>
 8001c66:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4911      	ldr	r1, [pc, #68]	; (8001cb0 <Update_File+0x17c>)
 8001c6c:	6978      	ldr	r0, [r7, #20]
 8001c6e:	f00d f857 	bl	800ed20 <siprintf>
	    	Send_Uart(buf);
 8001c72:	6978      	ldr	r0, [r7, #20]
 8001c74:	f7ff fe06 	bl	8001884 <Send_Uart>
	    	vPortFree(buf);
 8001c78:	6978      	ldr	r0, [r7, #20]
 8001c7a:	f00c fa89 	bl	800e190 <vPortFree>
	     }
	}
    return fresult;
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <Update_File+0x15c>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20004624 	.word	0x20004624
 8001c90:	20005684 	.word	0x20005684
 8001c94:	08011274 	.word	0x08011274
 8001c98:	2000568c 	.word	0x2000568c
 8001c9c:	08011294 	.word	0x08011294
 8001ca0:	2000567c 	.word	0x2000567c
 8001ca4:	080114b0 	.word	0x080114b0
 8001ca8:	080114d8 	.word	0x080114d8
 8001cac:	080113a4 	.word	0x080113a4
 8001cb0:	080113cc 	.word	0x080113cc

08001cb4 <OW_UART_Init>:
#if ONEWIRE_SEARCH
static void OW_SendBits(OneWire_HandleTypeDef* ow, uint8_t num_bits);
#endif

static HAL_StatusTypeDef OW_UART_Init(OneWire_HandleTypeDef* ow, uint32_t baudRate)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
	UART_HandleTypeDef* HUARTx = ow->huart;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60fb      	str	r3, [r7, #12]
//	GPIO_InitStruct.Pin = GPIO_PIN_10;
//	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
//	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    HUARTx->Init.BaudRate = baudRate;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
    HUARTx->Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
    HUARTx->Init.StopBits = UART_STOPBITS_1;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
    HUARTx->Init.Parity = UART_PARITY_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
    HUARTx->Init.Mode = UART_MODE_TX_RX;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
    HUARTx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
    HUARTx->Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
	return HAL_HalfDuplex_Init(HUARTx);
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f005 fdd1 	bl	8007896 <HAL_HalfDuplex_Init>
 8001cf4:	4603      	mov	r3, r0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <OW_ToBits>:

static void OW_ToBits(uint8_t owByte, uint8_t *owBits)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b085      	sub	sp, #20
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	6039      	str	r1, [r7, #0]
 8001d08:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	e014      	b.n	8001d3a <OW_ToBits+0x3c>
	{
		if (owByte & 0x01)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <OW_ToBits+0x24>
		{
			*owBits = OW_1;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	22ff      	movs	r2, #255	; 0xff
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	e002      	b.n	8001d28 <OW_ToBits+0x2a>
		}
		else
		{
			*owBits = OW_0;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
		}
		owBits++;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	603b      	str	r3, [r7, #0]
		owByte = owByte >> 1;
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	085b      	lsrs	r3, r3, #1
 8001d32:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++)
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	3301      	adds	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	2b07      	cmp	r3, #7
 8001d3e:	d9e7      	bls.n	8001d10 <OW_ToBits+0x12>
	}
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <OW_ToByte>:

static uint8_t OW_ToByte(uint8_t *owBits)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b085      	sub	sp, #20
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
	uint8_t owByte, i;
	owByte = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < 8; i++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73bb      	strb	r3, [r7, #14]
 8001d5e:	e010      	b.n	8001d82 <OW_ToByte+0x34>
	{
		owByte = owByte >> 1;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	73fb      	strb	r3, [r7, #15]
		if (*owBits == OW_R_1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2bff      	cmp	r3, #255	; 0xff
 8001d6c:	d103      	bne.n	8001d76 <OW_ToByte+0x28>
		{
			owByte |= 0x80;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d74:	73fb      	strb	r3, [r7, #15]
		}
		owBits++;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++)
 8001d7c:	7bbb      	ldrb	r3, [r7, #14]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	73bb      	strb	r3, [r7, #14]
 8001d82:	7bbb      	ldrb	r3, [r7, #14]
 8001d84:	2b07      	cmp	r3, #7
 8001d86:	d9eb      	bls.n	8001d60 <OW_ToByte+0x12>
	}

	return owByte;
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <OW_Begin>:
{
	return OW_Begin(ow, huart);
}

HAL_StatusTypeDef OW_Begin(OneWire_HandleTypeDef* ow, UART_HandleTypeDef* huart)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
	ow->huart = huart;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	601a      	str	r2, [r3, #0]
	HAL_StatusTypeDef status = OW_UART_Init(ow, 9600);
 8001da6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ff82 	bl	8001cb4 <OW_UART_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	73fb      	strb	r3, [r7, #15]
#if ONEWIRE_SEARCH
	OW_ResetSearch(ow);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f8bc 	bl	8001f32 <OW_ResetSearch>
#endif
	return status;
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <OW_Reset>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OW_Reset(OneWire_HandleTypeDef* ow)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	uint8_t owPresence = 0xf0;
 8001dcc:	23f0      	movs	r3, #240	; 0xf0
 8001dce:	73fb      	strb	r3, [r7, #15]

	OW_UART_Init(ow, 9600);
 8001dd0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff6d 	bl	8001cb4 <OW_UART_Init>

	HAL_UART_Receive_DMA(ow->huart, &owPresence, 1);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f107 010f 	add.w	r1, r7, #15
 8001de2:	2201      	movs	r2, #1
 8001de4:	4618      	mov	r0, r3
 8001de6:	f005 febb 	bl	8007b60 <HAL_UART_Receive_DMA>
	//HAL_UART_Transmit(ow->huart, &owPresence, 1, HAL_MAX_DELAY);
	HAL_UART_Transmit_DMA(ow->huart, &owPresence, 1);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f107 010f 	add.w	r1, r7, #15
 8001df2:	2201      	movs	r2, #1
 8001df4:	4618      	mov	r0, r3
 8001df6:	f005 fe35 	bl	8007a64 <HAL_UART_Transmit_DMA>

	/*## Wait for the end of the transfer ###################################*/
	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001dfa:	e000      	b.n	8001dfe <OW_Reset+0x3a>
	{
		__NOP();
 8001dfc:	bf00      	nop
	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f006 f9a8 	bl	8008158 <HAL_UART_GetState>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b20      	cmp	r3, #32
 8001e0c:	d1f6      	bne.n	8001dfc <OW_Reset+0x38>
	}

	OW_UART_Init(ow, 115200);
 8001e0e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ff4e 	bl	8001cb4 <OW_UART_Init>

	if (owPresence != 0xf0)
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	2bf0      	cmp	r3, #240	; 0xf0
 8001e1c:	d001      	beq.n	8001e22 <OW_Reset+0x5e>
	{
		return OW_OK;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <OW_Reset+0x60>
	}

	return OW_NO_DEVICE;
 8001e22:	2303      	movs	r3, #3
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <OW_Send>:
// dLen - the length of the read buffer. Read no more than this length
// readStart - which transmission character to start reading from (numbered from 0)
// you can specify OW_NO_READ, then you don't need to specify data and dLen
//-----------------------------------------------------------------------------
uint8_t OW_Send(OneWire_HandleTypeDef* ow, uint8_t *command, uint8_t cLen, uint8_t *data, uint8_t dLen, uint8_t readStart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	71fb      	strb	r3, [r7, #7]
	if (OW_Reset(ow) == OW_NO_DEVICE)
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7ff ffc1 	bl	8001dc4 <OW_Reset>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d145      	bne.n	8001ed4 <OW_Send+0xa8>
	{
		return OW_NO_DEVICE;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e047      	b.n	8001edc <OW_Send+0xb0>
	}

	while (cLen > 0)
	{

		OW_ToBits(*command, ow->ROM_NO);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	781a      	ldrb	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3304      	adds	r3, #4
 8001e54:	4619      	mov	r1, r3
 8001e56:	4610      	mov	r0, r2
 8001e58:	f7ff ff51 	bl	8001cfe <OW_ToBits>
		command++;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
		cLen--;
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	71fb      	strb	r3, [r7, #7]

		HAL_UART_Receive_DMA(ow->huart, ow->ROM_NO, sizeof(ow->ROM_NO) / sizeof(ow->ROM_NO[0]));
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3304      	adds	r3, #4
 8001e70:	2208      	movs	r2, #8
 8001e72:	4619      	mov	r1, r3
 8001e74:	f005 fe74 	bl	8007b60 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit_DMA(ow->huart, ow->ROM_NO, sizeof(ow->ROM_NO) / sizeof(ow->ROM_NO[0]));
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	2208      	movs	r2, #8
 8001e82:	4619      	mov	r1, r3
 8001e84:	f005 fdee 	bl	8007a64 <HAL_UART_Transmit_DMA>

		while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001e88:	e000      	b.n	8001e8c <OW_Send+0x60>
		{
			__NOP();
 8001e8a:	bf00      	nop
		while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f006 f961 	bl	8008158 <HAL_UART_GetState>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	d1f6      	bne.n	8001e8a <OW_Send+0x5e>
		}

		if (readStart == 0 && dLen > 0)
 8001e9c:	7f3b      	ldrb	r3, [r7, #28]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d112      	bne.n	8001ec8 <OW_Send+0x9c>
 8001ea2:	7e3b      	ldrb	r3, [r7, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00f      	beq.n	8001ec8 <OW_Send+0x9c>
		{
			*data = OW_ToByte(ow->ROM_NO);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff4e 	bl	8001d4e <OW_ToByte>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	701a      	strb	r2, [r3, #0]
			data++;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	603b      	str	r3, [r7, #0]
			dLen--;
 8001ec0:	7e3b      	ldrb	r3, [r7, #24]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	763b      	strb	r3, [r7, #24]
 8001ec6:	e005      	b.n	8001ed4 <OW_Send+0xa8>
		}
		else
		{
			if (readStart != OW_NO_READ)
 8001ec8:	7f3b      	ldrb	r3, [r7, #28]
 8001eca:	2bff      	cmp	r3, #255	; 0xff
 8001ecc:	d002      	beq.n	8001ed4 <OW_Send+0xa8>
			{
				readStart--;
 8001ece:	7f3b      	ldrb	r3, [r7, #28]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	773b      	strb	r3, [r7, #28]
	while (cLen > 0)
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1b8      	bne.n	8001e4c <OW_Send+0x20>
			}
		}
	}

	return OW_OK;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <OW_SendBits>:

#if ONEWIRE_SEARCH
static void OW_SendBits(OneWire_HandleTypeDef* ow, uint8_t numBits)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Receive_DMA(ow->huart, ow->ROM_NO, numBits);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	78fa      	ldrb	r2, [r7, #3]
 8001efa:	b292      	uxth	r2, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f005 fe2f 	bl	8007b60 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(ow->huart, ow->ROM_NO, numBits);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	b292      	uxth	r2, r2
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f005 fda8 	bl	8007a64 <HAL_UART_Transmit_DMA>

	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001f14:	e000      	b.n	8001f18 <OW_SendBits+0x34>
	{
		__NOP();
 8001f16:	bf00      	nop
	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f006 f91b 	bl	8008158 <HAL_UART_GetState>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d1f6      	bne.n	8001f16 <OW_SendBits+0x32>
	}
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <OW_ResetSearch>:
//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OW_ResetSearch(OneWire_HandleTypeDef* ow)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b085      	sub	sp, #20
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  // reset the search state
  ow->LastDiscrepancy = 0;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	731a      	strb	r2, [r3, #12]
  ow->LastDeviceFlag = false;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	739a      	strb	r2, [r3, #14]
  ow->LastFamilyDiscrepancy = 0;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	735a      	strb	r2, [r3, #13]
  for(int i = 7; ; i--)
 8001f4c:	2307      	movs	r3, #7
 8001f4e:	60fb      	str	r3, [r7, #12]
  {
    ow->ROM_NO[i] = 0;
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4413      	add	r3, r2
 8001f56:	3304      	adds	r3, #4
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
    if ( i == 0) break;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <OW_ResetSearch+0x38>
  for(int i = 7; ; i--)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
    ow->ROM_NO[i] = 0;
 8001f68:	e7f2      	b.n	8001f50 <OW_ResetSearch+0x1e>
    if ( i == 0) break;
 8001f6a:	bf00      	nop
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <OW_Search>:
   ow->LastFamilyDiscrepancy = 0;
   ow->LastDeviceFlag = false;
}

uint8_t OW_Search(OneWire_HandleTypeDef* ow, uint8_t *buf, uint8_t num)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	4613      	mov	r3, r2
 8001f84:	71fb      	strb	r3, [r7, #7]

	uint8_t found = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	77fb      	strb	r3, [r7, #31]
	uint8_t *lastDevice = NULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
	uint8_t *curDevice = buf;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	617b      	str	r3, [r7, #20]
	uint8_t numBit, lastCollision, currentCollision, currentSelection;

	lastCollision = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	74bb      	strb	r3, [r7, #18]

	while (found < num)
 8001f96:	e0bf      	b.n	8002118 <OW_Search+0x1a0>
	{
		numBit = 1;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	74fb      	strb	r3, [r7, #19]
		currentCollision = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	747b      	strb	r3, [r7, #17]

		OW_Send(ow, (uint8_t*)"\xf0", 1, NULL, 0, OW_NO_READ);
 8001fa0:	23ff      	movs	r3, #255	; 0xff
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2201      	movs	r2, #1
 8001fac:	495f      	ldr	r1, [pc, #380]	; (800212c <OW_Search+0x1b4>)
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f7ff ff3c 	bl	8001e2c <OW_Send>

		for (numBit = 1; numBit <= 64; numBit++)
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	74fb      	strb	r3, [r7, #19]
 8001fb8:	e09b      	b.n	80020f2 <OW_Search+0x17a>
		{
			OW_ToBits(OW_READ_SLOT, ow->ROM_NO);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	20ff      	movs	r0, #255	; 0xff
 8001fc2:	f7ff fe9c 	bl	8001cfe <OW_ToBits>
			OW_SendBits(ow, 2);
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f7ff ff8b 	bl	8001ee4 <OW_SendBits>

			if (ow->ROM_NO[0] == OW_R_1)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	791b      	ldrb	r3, [r3, #4]
 8001fd2:	2bff      	cmp	r3, #255	; 0xff
 8001fd4:	d108      	bne.n	8001fe8 <OW_Search+0x70>
			{
				if (ow->ROM_NO[1] == OW_R_1)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	795b      	ldrb	r3, [r3, #5]
 8001fda:	2bff      	cmp	r3, #255	; 0xff
 8001fdc:	d101      	bne.n	8001fe2 <OW_Search+0x6a>
				{
					return found;
 8001fde:	7ffb      	ldrb	r3, [r7, #31]
 8001fe0:	e0a0      	b.n	8002124 <OW_Search+0x1ac>
				}
				else
				{
					currentSelection = 1;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	743b      	strb	r3, [r7, #16]
 8001fe6:	e037      	b.n	8002058 <OW_Search+0xe0>
				}
			}
			else
			{
				if (ow->ROM_NO[1] == OW_R_1)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	795b      	ldrb	r3, [r3, #5]
 8001fec:	2bff      	cmp	r3, #255	; 0xff
 8001fee:	d102      	bne.n	8001ff6 <OW_Search+0x7e>
				{
					currentSelection = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	743b      	strb	r3, [r7, #16]
 8001ff4:	e030      	b.n	8002058 <OW_Search+0xe0>
				}
				else
				{
					if (numBit < lastCollision)
 8001ff6:	7cfa      	ldrb	r2, [r7, #19]
 8001ff8:	7cbb      	ldrb	r3, [r7, #18]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d21d      	bcs.n	800203a <OW_Search+0xc2>
					{
							if (lastDevice[(numBit - 1) >> 3] & 1 << ((numBit - 1) & 0x07))
 8001ffe:	7cfb      	ldrb	r3, [r7, #19]
 8002000:	3b01      	subs	r3, #1
 8002002:	10db      	asrs	r3, r3, #3
 8002004:	461a      	mov	r2, r3
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4413      	add	r3, r2
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	7cfb      	ldrb	r3, [r7, #19]
 8002010:	3b01      	subs	r3, #1
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	fa42 f303 	asr.w	r3, r2, r3
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d008      	beq.n	8002034 <OW_Search+0xbc>
							{
							currentSelection = 1;
 8002022:	2301      	movs	r3, #1
 8002024:	743b      	strb	r3, [r7, #16]

								if (currentCollision < numBit)
 8002026:	7c7a      	ldrb	r2, [r7, #17]
 8002028:	7cfb      	ldrb	r3, [r7, #19]
 800202a:	429a      	cmp	r2, r3
 800202c:	d214      	bcs.n	8002058 <OW_Search+0xe0>
								{
										currentCollision = numBit;
 800202e:	7cfb      	ldrb	r3, [r7, #19]
 8002030:	747b      	strb	r3, [r7, #17]
 8002032:	e011      	b.n	8002058 <OW_Search+0xe0>
								}
							}
							else
							{
								currentSelection = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	743b      	strb	r3, [r7, #16]
 8002038:	e00e      	b.n	8002058 <OW_Search+0xe0>
							}
					}
					else
					{
						if (numBit == lastCollision)
 800203a:	7cfa      	ldrb	r2, [r7, #19]
 800203c:	7cbb      	ldrb	r3, [r7, #18]
 800203e:	429a      	cmp	r2, r3
 8002040:	d102      	bne.n	8002048 <OW_Search+0xd0>
						{
								currentSelection = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	743b      	strb	r3, [r7, #16]
 8002046:	e007      	b.n	8002058 <OW_Search+0xe0>
						}
						else
						{
							currentSelection = 1;
 8002048:	2301      	movs	r3, #1
 800204a:	743b      	strb	r3, [r7, #16]

							if (currentCollision < numBit)
 800204c:	7c7a      	ldrb	r2, [r7, #17]
 800204e:	7cfb      	ldrb	r3, [r7, #19]
 8002050:	429a      	cmp	r2, r3
 8002052:	d201      	bcs.n	8002058 <OW_Search+0xe0>
							{
									currentCollision = numBit;
 8002054:	7cfb      	ldrb	r3, [r7, #19]
 8002056:	747b      	strb	r3, [r7, #17]
						}
					}
				}
			}

			if (currentSelection == 1)
 8002058:	7c3b      	ldrb	r3, [r7, #16]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d120      	bne.n	80020a0 <OW_Search+0x128>
			{
				curDevice[(numBit - 1) >> 3] |= 1 << ((numBit - 1) & 0x07);
 800205e:	7cfb      	ldrb	r3, [r7, #19]
 8002060:	3b01      	subs	r3, #1
 8002062:	10db      	asrs	r3, r3, #3
 8002064:	461a      	mov	r2, r3
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	4413      	add	r3, r2
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b25a      	sxtb	r2, r3
 800206e:	7cfb      	ldrb	r3, [r7, #19]
 8002070:	3b01      	subs	r3, #1
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	2101      	movs	r1, #1
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	b25b      	sxtb	r3, r3
 800207e:	4313      	orrs	r3, r2
 8002080:	b25a      	sxtb	r2, r3
 8002082:	7cfb      	ldrb	r3, [r7, #19]
 8002084:	3b01      	subs	r3, #1
 8002086:	10db      	asrs	r3, r3, #3
 8002088:	4619      	mov	r1, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	440b      	add	r3, r1
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	701a      	strb	r2, [r3, #0]
				OW_ToBits(0x01, ow->ROM_NO);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	3304      	adds	r3, #4
 8002096:	4619      	mov	r1, r3
 8002098:	2001      	movs	r0, #1
 800209a:	f7ff fe30 	bl	8001cfe <OW_ToBits>
 800209e:	e021      	b.n	80020e4 <OW_Search+0x16c>
			}
			else
			{
				curDevice[(numBit - 1) >> 3] &= ~(1 << ((numBit - 1) & 0x07));
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	10db      	asrs	r3, r3, #3
 80020a6:	461a      	mov	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	4413      	add	r3, r2
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b25a      	sxtb	r2, r3
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	2101      	movs	r1, #1
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	b25b      	sxtb	r3, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	b25b      	sxtb	r3, r3
 80020c4:	4013      	ands	r3, r2
 80020c6:	b25a      	sxtb	r2, r3
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	10db      	asrs	r3, r3, #3
 80020ce:	4619      	mov	r1, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	440b      	add	r3, r1
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	701a      	strb	r2, [r3, #0]
				OW_ToBits(0x00, ow->ROM_NO);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3304      	adds	r3, #4
 80020dc:	4619      	mov	r1, r3
 80020de:	2000      	movs	r0, #0
 80020e0:	f7ff fe0d 	bl	8001cfe <OW_ToBits>
			}

			OW_SendBits(ow, 1);
 80020e4:	2101      	movs	r1, #1
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7ff fefc 	bl	8001ee4 <OW_SendBits>
		for (numBit = 1; numBit <= 64; numBit++)
 80020ec:	7cfb      	ldrb	r3, [r7, #19]
 80020ee:	3301      	adds	r3, #1
 80020f0:	74fb      	strb	r3, [r7, #19]
 80020f2:	7cfb      	ldrb	r3, [r7, #19]
 80020f4:	2b40      	cmp	r3, #64	; 0x40
 80020f6:	f67f af60 	bls.w	8001fba <OW_Search+0x42>
		}

		found++;
 80020fa:	7ffb      	ldrb	r3, [r7, #31]
 80020fc:	3301      	adds	r3, #1
 80020fe:	77fb      	strb	r3, [r7, #31]
		lastDevice = curDevice;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	61bb      	str	r3, [r7, #24]
		curDevice += 8;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	3308      	adds	r3, #8
 8002108:	617b      	str	r3, [r7, #20]
		if (currentCollision == 0)
 800210a:	7c7b      	ldrb	r3, [r7, #17]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <OW_Search+0x19c>
		{
			return found;
 8002110:	7ffb      	ldrb	r3, [r7, #31]
 8002112:	e007      	b.n	8002124 <OW_Search+0x1ac>
		}

		lastCollision = currentCollision;
 8002114:	7c7b      	ldrb	r3, [r7, #17]
 8002116:	74bb      	strb	r3, [r7, #18]
	while (found < num)
 8002118:	7ffa      	ldrb	r2, [r7, #31]
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	429a      	cmp	r2, r3
 800211e:	f4ff af3b 	bcc.w	8001f98 <OW_Search+0x20>
	}

        return found;
 8002122:	7ffb      	ldrb	r3, [r7, #31]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3720      	adds	r7, #32
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	080115c4 	.word	0x080115c4

08002130 <OW_Crc8>:
};

// Compute a Dallas Semiconductor 8 bit CRC. These show up in the ROM
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OW_Crc8(const uint8_t *addr, uint8_t len)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]

	while (len--)
 8002140:	e015      	b.n	800216e <OW_Crc8+0x3e>
	{
		crc = *addr++ ^ crc;  // just re-using crc as intermediate
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	607a      	str	r2, [r7, #4]
 8002148:	781a      	ldrb	r2, [r3, #0]
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	4053      	eors	r3, r2
 800214e:	73fb      	strb	r3, [r7, #15]
		crc = dscrc2x16_table[crc & 0x0f] ^ dscrc2x16_table[16 + ((crc >> 4) & 0x0f)];
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	4a0c      	ldr	r2, [pc, #48]	; (8002188 <OW_Crc8+0x58>)
 8002158:	5cd2      	ldrb	r2, [r2, r3]
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	3310      	adds	r3, #16
 8002166:	4908      	ldr	r1, [pc, #32]	; (8002188 <OW_Crc8+0x58>)
 8002168:	5ccb      	ldrb	r3, [r1, r3]
 800216a:	4053      	eors	r3, r2
 800216c:	73fb      	strb	r3, [r7, #15]
	while (len--)
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	1e5a      	subs	r2, r3, #1
 8002172:	70fa      	strb	r2, [r7, #3]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1e4      	bne.n	8002142 <OW_Crc8+0x12>
	}

	return crc;
 8002178:	7bfb      	ldrb	r3, [r7, #15]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	080116f8 	.word	0x080116f8

0800218c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800219c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	4a06      	ldr	r2, [pc, #24]	; (80021bc <vApplicationGetIdleTaskMemory+0x30>)
 80021a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2280      	movs	r2, #128	; 0x80
 80021a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000220 	.word	0x20000220
 80021bc:	20000274 	.word	0x20000274

080021c0 <errLED_Task>:
xTaskHandle Output_update_Task_Handler;

osSemaphoreId BinSemHandle;

void errLED_Task(void *argument)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <errLED_Task+0x6c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	4618      	mov	r0, r3
 80021d2:	f009 fd59 	bl	800bc88 <osSemaphoreWait>
		for(int j = (errNum+1)*2; j > 0; j--)
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <errLED_Task+0x70>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	e016      	b.n	8002210 <errLED_Task+0x50>
		{
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80021e2:	2120      	movs	r1, #32
 80021e4:	4813      	ldr	r0, [pc, #76]	; (8002234 <errLED_Task+0x74>)
 80021e6:	f003 f8ac 	bl	8005342 <HAL_GPIO_TogglePin>
			char *string = "blik\n";
 80021ea:	4b13      	ldr	r3, [pc, #76]	; (8002238 <errLED_Task+0x78>)
 80021ec:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart2, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80021ee:	68b8      	ldr	r0, [r7, #8]
 80021f0:	f7fe f800 	bl	80001f4 <strlen>
 80021f4:	4603      	mov	r3, r0
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	f04f 33ff 	mov.w	r3, #4294967295
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	480f      	ldr	r0, [pc, #60]	; (800223c <errLED_Task+0x7c>)
 8002200:	f005 fb9e 	bl	8007940 <HAL_UART_Transmit>
			vTaskDelay(200);
 8002204:	20c8      	movs	r0, #200	; 0xc8
 8002206:	f00a fe51 	bl	800ceac <vTaskDelay>
		for(int j = (errNum+1)*2; j > 0; j--)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3b01      	subs	r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	dce5      	bgt.n	80021e2 <errLED_Task+0x22>
		}
		osSemaphoreRelease(BinSemHandle);
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <errLED_Task+0x6c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f009 fd82 	bl	800bd24 <osSemaphoreRelease>
		vTaskDelay(2000);
 8002220:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002224:	f00a fe42 	bl	800ceac <vTaskDelay>
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8002228:	e7ce      	b.n	80021c8 <errLED_Task+0x8>
 800222a:	bf00      	nop
 800222c:	20006a2c 	.word	0x20006a2c
 8002230:	20000480 	.word	0x20000480
 8002234:	40020000 	.word	0x40020000
 8002238:	080115d4 	.word	0x080115d4
 800223c:	200069dc 	.word	0x200069dc

08002240 <LCD_Task>:
	}
}

void LCD_Task(void *argument)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	errNum = 1;
 8002248:	4b5a      	ldr	r3, [pc, #360]	; (80023b4 <LCD_Task+0x174>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]
	while(!SSD1306_Init())
 800224e:	e003      	b.n	8002258 <LCD_Task+0x18>
	{
		vTaskDelay(2000);
 8002250:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002254:	f00a fe2a 	bl	800ceac <vTaskDelay>
	while(!SSD1306_Init())
 8002258:	f000 fe02 	bl	8002e60 <SSD1306_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f6      	beq.n	8002250 <LCD_Task+0x10>
	}
	errNum = 0;
 8002262:	4b54      	ldr	r3, [pc, #336]	; (80023b4 <LCD_Task+0x174>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]

	SSD1306_Clear();
 8002268:	f001 f81f 	bl	80032aa <SSD1306_Clear>
	SSD1306_GotoXY(10,10);
 800226c:	210a      	movs	r1, #10
 800226e:	200a      	movs	r0, #10
 8002270:	f000 ff60 	bl	8003134 <SSD1306_GotoXY>
	SSD1306_Puts("GREENHOUSE",&Font_11x18,1);
 8002274:	2201      	movs	r2, #1
 8002276:	4950      	ldr	r1, [pc, #320]	; (80023b8 <LCD_Task+0x178>)
 8002278:	4850      	ldr	r0, [pc, #320]	; (80023bc <LCD_Task+0x17c>)
 800227a:	f000 fff1 	bl	8003260 <SSD1306_Puts>
	SSD1306_GotoXY(10,28);
 800227e:	211c      	movs	r1, #28
 8002280:	200a      	movs	r0, #10
 8002282:	f000 ff57 	bl	8003134 <SSD1306_GotoXY>
	SSD1306_Puts("5000",&Font_11x18,1);
 8002286:	2201      	movs	r2, #1
 8002288:	494b      	ldr	r1, [pc, #300]	; (80023b8 <LCD_Task+0x178>)
 800228a:	484d      	ldr	r0, [pc, #308]	; (80023c0 <LCD_Task+0x180>)
 800228c:	f000 ffe8 	bl	8003260 <SSD1306_Puts>
	SSD1306_GotoXY(0,53);
 8002290:	2135      	movs	r1, #53	; 0x35
 8002292:	2000      	movs	r0, #0
 8002294:	f000 ff4e 	bl	8003134 <SSD1306_GotoXY>
	SSD1306_Puts("V0.23",&Font_7x10,1);
 8002298:	2201      	movs	r2, #1
 800229a:	494a      	ldr	r1, [pc, #296]	; (80023c4 <LCD_Task+0x184>)
 800229c:	484a      	ldr	r0, [pc, #296]	; (80023c8 <LCD_Task+0x188>)
 800229e:	f000 ffdf 	bl	8003260 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80022a2:	f000 fea1 	bl	8002fe8 <SSD1306_UpdateScreen>
	osDelay(2000);
 80022a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022aa:	f009 fc99 	bl	800bbe0 <osDelay>
	SSD1306_Clear();
 80022ae:	f000 fffc 	bl	80032aa <SSD1306_Clear>

	while(1)
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 80022b2:	4b46      	ldr	r3, [pc, #280]	; (80023cc <LCD_Task+0x18c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f04f 31ff 	mov.w	r1, #4294967295
 80022ba:	4618      	mov	r0, r3
 80022bc:	f009 fce4 	bl	800bc88 <osSemaphoreWait>

		SSD1306_Clear();
 80022c0:	f000 fff3 	bl	80032aa <SSD1306_Clear>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 80022c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022c8:	4841      	ldr	r0, [pc, #260]	; (80023d0 <LCD_Task+0x190>)
 80022ca:	f003 f809 	bl	80052e0 <HAL_GPIO_ReadPin>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d03e      	beq.n	8002352 <LCD_Task+0x112>
		{
			for(int i = 0; i < 3;i++)
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e037      	b.n	800234a <LCD_Task+0x10a>
			{
				SSD1306_GotoXY(5,5+i*20);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	461a      	mov	r2, r3
 80022e0:	0092      	lsls	r2, r2, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3305      	adds	r3, #5
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	4619      	mov	r1, r3
 80022ee:	2005      	movs	r0, #5
 80022f0:	f000 ff20 	bl	8003134 <SSD1306_GotoXY>
				if(TEMP[i] == -1)
 80022f4:	4a37      	ldr	r2, [pc, #220]	; (80023d4 <LCD_Task+0x194>)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002304:	eef4 7a47 	vcmp.f32	s15, s14
 8002308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230c:	d105      	bne.n	800231a <LCD_Task+0xda>
				{
					SSD1306_Puts("CYHBA",&Font_11x18,1);
 800230e:	2201      	movs	r2, #1
 8002310:	4929      	ldr	r1, [pc, #164]	; (80023b8 <LCD_Task+0x178>)
 8002312:	4831      	ldr	r0, [pc, #196]	; (80023d8 <LCD_Task+0x198>)
 8002314:	f000 ffa4 	bl	8003260 <SSD1306_Puts>
 8002318:	e012      	b.n	8002340 <LCD_Task+0x100>
				}
				else
				{
					sprintf (buf, "%.2f", TEMP[i]);
 800231a:	4a2e      	ldr	r2, [pc, #184]	; (80023d4 <LCD_Task+0x194>)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe f927 	bl	8000578 <__aeabi_f2d>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	492b      	ldr	r1, [pc, #172]	; (80023dc <LCD_Task+0x19c>)
 8002330:	482b      	ldr	r0, [pc, #172]	; (80023e0 <LCD_Task+0x1a0>)
 8002332:	f00c fcf5 	bl	800ed20 <siprintf>
					SSD1306_Puts(buf,&Font_11x18,1);
 8002336:	2201      	movs	r2, #1
 8002338:	491f      	ldr	r1, [pc, #124]	; (80023b8 <LCD_Task+0x178>)
 800233a:	4829      	ldr	r0, [pc, #164]	; (80023e0 <LCD_Task+0x1a0>)
 800233c:	f000 ff90 	bl	8003260 <SSD1306_Puts>
				}
				SSD1306_UpdateScreen();
 8002340:	f000 fe52 	bl	8002fe8 <SSD1306_UpdateScreen>
			for(int i = 0; i < 3;i++)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3301      	adds	r3, #1
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b02      	cmp	r3, #2
 800234e:	ddc4      	ble.n	80022da <LCD_Task+0x9a>
 8002350:	e025      	b.n	800239e <LCD_Task+0x15e>
			}
		}
		else
		{

			for(int i = 0; i < 2;i++)
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	e01f      	b.n	8002398 <LCD_Task+0x158>
			{
				SSD1306_GotoXY(5,5+i*20);
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	b29b      	uxth	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	0092      	lsls	r2, r2, #2
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	b29b      	uxth	r3, r3
 8002366:	3305      	adds	r3, #5
 8002368:	b29b      	uxth	r3, r3
 800236a:	4619      	mov	r1, r3
 800236c:	2005      	movs	r0, #5
 800236e:	f000 fee1 	bl	8003134 <SSD1306_GotoXY>
				sprintf (buf, "%d", valueADC[i]);
 8002372:	4a1c      	ldr	r2, [pc, #112]	; (80023e4 <LCD_Task+0x1a4>)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800237a:	461a      	mov	r2, r3
 800237c:	491a      	ldr	r1, [pc, #104]	; (80023e8 <LCD_Task+0x1a8>)
 800237e:	4818      	ldr	r0, [pc, #96]	; (80023e0 <LCD_Task+0x1a0>)
 8002380:	f00c fcce 	bl	800ed20 <siprintf>
				SSD1306_Puts(buf,&Font_11x18,1);
 8002384:	2201      	movs	r2, #1
 8002386:	490c      	ldr	r1, [pc, #48]	; (80023b8 <LCD_Task+0x178>)
 8002388:	4815      	ldr	r0, [pc, #84]	; (80023e0 <LCD_Task+0x1a0>)
 800238a:	f000 ff69 	bl	8003260 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 800238e:	f000 fe2b 	bl	8002fe8 <SSD1306_UpdateScreen>
			for(int i = 0; i < 2;i++)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	3301      	adds	r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b01      	cmp	r3, #1
 800239c:	dddc      	ble.n	8002358 <LCD_Task+0x118>
			}
		}
		vTaskDelay(2000);
 800239e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023a2:	f00a fd83 	bl	800ceac <vTaskDelay>
		osSemaphoreRelease(BinSemHandle);
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <LCD_Task+0x18c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f009 fcba 	bl	800bd24 <osSemaphoreRelease>
		osSemaphoreWait(BinSemHandle, osWaitForever);
 80023b0:	e77f      	b.n	80022b2 <LCD_Task+0x72>
 80023b2:	bf00      	nop
 80023b4:	20000480 	.word	0x20000480
 80023b8:	20000008 	.word	0x20000008
 80023bc:	080115dc 	.word	0x080115dc
 80023c0:	080115e8 	.word	0x080115e8
 80023c4:	20000000 	.word	0x20000000
 80023c8:	080115f0 	.word	0x080115f0
 80023cc:	20006a2c 	.word	0x20006a2c
 80023d0:	40020000 	.word	0x40020000
 80023d4:	20000474 	.word	0x20000474
 80023d8:	080115f8 	.word	0x080115f8
 80023dc:	08011600 	.word	0x08011600
 80023e0:	2000697c 	.word	0x2000697c
 80023e4:	2000672c 	.word	0x2000672c
 80023e8:	08011608 	.word	0x08011608

080023ec <Sensors_Load_Task>:
	}
}

void Sensors_Load_Task(void *argument)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	OW_Begin(&ow, &huart1);
 80023f4:	4935      	ldr	r1, [pc, #212]	; (80024cc <Sensors_Load_Task+0xe0>)
 80023f6:	4836      	ldr	r0, [pc, #216]	; (80024d0 <Sensors_Load_Task+0xe4>)
 80023f8:	f7ff fccd 	bl	8001d96 <OW_Begin>

	errNum = 2;
 80023fc:	4b35      	ldr	r3, [pc, #212]	; (80024d4 <Sensors_Load_Task+0xe8>)
 80023fe:	2202      	movs	r2, #2
 8002400:	601a      	str	r2, [r3, #0]
	while(OW_Reset(&ow) != OW_OK)
 8002402:	e003      	b.n	800240c <Sensors_Load_Task+0x20>
	{
		vTaskDelay(2000);
 8002404:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002408:	f00a fd50 	bl	800ceac <vTaskDelay>
	while(OW_Reset(&ow) != OW_OK)
 800240c:	4830      	ldr	r0, [pc, #192]	; (80024d0 <Sensors_Load_Task+0xe4>)
 800240e:	f7ff fcd9 	bl	8001dc4 <OW_Reset>
 8002412:	4603      	mov	r3, r0
 8002414:	2b01      	cmp	r3, #1
 8002416:	d1f5      	bne.n	8002404 <Sensors_Load_Task+0x18>
	}
	errNum = 0;
 8002418:	4b2e      	ldr	r3, [pc, #184]	; (80024d4 <Sensors_Load_Task+0xe8>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]

	DT_SetOneWire(&dt, &ow);
 800241e:	492c      	ldr	r1, [pc, #176]	; (80024d0 <Sensors_Load_Task+0xe4>)
 8002420:	482d      	ldr	r0, [pc, #180]	; (80024d8 <Sensors_Load_Task+0xec>)
 8002422:	f7fe fdbb 	bl	8000f9c <DT_SetOneWire>
	CurrentDeviceAddress insideThermometer;
	DT_Begin(&dt);
 8002426:	482c      	ldr	r0, [pc, #176]	; (80024d8 <Sensors_Load_Task+0xec>)
 8002428:	f7fe fdde 	bl	8000fe8 <DT_Begin>

	uint8_t numDev = DT_GetDeviceCount(&dt);
 800242c:	482a      	ldr	r0, [pc, #168]	; (80024d8 <Sensors_Load_Task+0xec>)
 800242e:	f7fe fe5f 	bl	80010f0 <DT_GetDeviceCount>
 8002432:	4603      	mov	r3, r0
 8002434:	75fb      	strb	r3, [r7, #23]

	for (int i = 0; i < numDev; ++i)
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	e011      	b.n	8002460 <Sensors_Load_Task+0x74>
	{
		DT_GetAddress(&dt, insideThermometer, i);
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	4619      	mov	r1, r3
 8002446:	4824      	ldr	r0, [pc, #144]	; (80024d8 <Sensors_Load_Task+0xec>)
 8002448:	f7fe fe9a 	bl	8001180 <DT_GetAddress>
		DT_SetResolution(&dt, insideThermometer, 12, true);
 800244c:	f107 010c 	add.w	r1, r7, #12
 8002450:	2301      	movs	r3, #1
 8002452:	220c      	movs	r2, #12
 8002454:	4820      	ldr	r0, [pc, #128]	; (80024d8 <Sensors_Load_Task+0xec>)
 8002456:	f7fe ffdb 	bl	8001410 <DT_SetResolution>
	for (int i = 0; i < numDev; ++i)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3301      	adds	r3, #1
 800245e:	61fb      	str	r3, [r7, #28]
 8002460:	7dfb      	ldrb	r3, [r7, #23]
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	429a      	cmp	r2, r3
 8002466:	dbe9      	blt.n	800243c <Sensors_Load_Task+0x50>
	}

	while(1)
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8002468:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <Sensors_Load_Task+0xf0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	4618      	mov	r0, r3
 8002472:	f009 fc09 	bl	800bc88 <osSemaphoreWait>

		DT_RequestTemperatures(&dt);
 8002476:	4818      	ldr	r0, [pc, #96]	; (80024d8 <Sensors_Load_Task+0xec>)
 8002478:	f7ff f8aa 	bl	80015d0 <DT_RequestTemperatures>

		for (int i = 0; i < numDev; ++i)
 800247c:	2300      	movs	r3, #0
 800247e:	61bb      	str	r3, [r7, #24]
 8002480:	e010      	b.n	80024a4 <Sensors_Load_Task+0xb8>
		{
			TEMP[i] = DT_GetTempCByIndex(&dt, i);
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	4619      	mov	r1, r3
 8002488:	4813      	ldr	r0, [pc, #76]	; (80024d8 <Sensors_Load_Task+0xec>)
 800248a:	f7ff f949 	bl	8001720 <DT_GetTempCByIndex>
 800248e:	eef0 7a40 	vmov.f32	s15, s0
 8002492:	4a13      	ldr	r2, [pc, #76]	; (80024e0 <Sensors_Load_Task+0xf4>)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < numDev; ++i)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	3301      	adds	r3, #1
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	dbea      	blt.n	8002482 <Sensors_Load_Task+0x96>
		}

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)valueADC, 2);
 80024ac:	2202      	movs	r2, #2
 80024ae:	490d      	ldr	r1, [pc, #52]	; (80024e4 <Sensors_Load_Task+0xf8>)
 80024b0:	480d      	ldr	r0, [pc, #52]	; (80024e8 <Sensors_Load_Task+0xfc>)
 80024b2:	f001 fcef 	bl	8003e94 <HAL_ADC_Start_DMA>

		osSemaphoreRelease(BinSemHandle);
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <Sensors_Load_Task+0xf0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f009 fc32 	bl	800bd24 <osSemaphoreRelease>
		vTaskDelay(2000);
 80024c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024c4:	f00a fcf2 	bl	800ceac <vTaskDelay>
		osSemaphoreWait(BinSemHandle, osWaitForever);
 80024c8:	e7ce      	b.n	8002468 <Sensors_Load_Task+0x7c>
 80024ca:	bf00      	nop
 80024cc:	20006840 	.word	0x20006840
 80024d0:	200066bc 	.word	0x200066bc
 80024d4:	20000480 	.word	0x20000480
 80024d8:	20006a20 	.word	0x20006a20
 80024dc:	20006a2c 	.word	0x20006a2c
 80024e0:	20000474 	.word	0x20000474
 80024e4:	2000672c 	.word	0x2000672c
 80024e8:	20006794 	.word	0x20006794

080024ec <SDcard_Task>:
	}
}


void SDcard_Task(void *argument)
{
 80024ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024f0:	b08e      	sub	sp, #56	; 0x38
 80024f2:	af08      	add	r7, sp, #32
 80024f4:	6078      	str	r0, [r7, #4]
	Mount_SD("/");
 80024f6:	4833      	ldr	r0, [pc, #204]	; (80025c4 <SDcard_Task+0xd8>)
 80024f8:	f7ff f9da 	bl	80018b0 <Mount_SD>
	Format_SD();
 80024fc:	f7ff fa1e 	bl	800193c <Format_SD>
	Create_File("DATA.TXT");
 8002500:	4831      	ldr	r0, [pc, #196]	; (80025c8 <SDcard_Task+0xdc>)
 8002502:	f7ff fa81 	bl	8001a08 <Create_File>
	Unmount_SD("/");
 8002506:	482f      	ldr	r0, [pc, #188]	; (80025c4 <SDcard_Task+0xd8>)
 8002508:	f7ff f9f6 	bl	80018f8 <Unmount_SD>
	int indx=1;
 800250c:	2301      	movs	r3, #1
 800250e:	617b      	str	r3, [r7, #20]

	while(1)
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 8002510:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <SDcard_Task+0xe0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f04f 31ff 	mov.w	r1, #4294967295
 8002518:	4618      	mov	r0, r3
 800251a:	f009 fbb5 	bl	800bc88 <osSemaphoreWait>

		char *buffer = pvPortMalloc(50*sizeof(char));
 800251e:	2032      	movs	r0, #50	; 0x32
 8002520:	f00b fd6a 	bl	800dff8 <pvPortMalloc>
 8002524:	6138      	str	r0, [r7, #16]
		Mount_SD("/");
 8002526:	4827      	ldr	r0, [pc, #156]	; (80025c4 <SDcard_Task+0xd8>)
 8002528:	f7ff f9c2 	bl	80018b0 <Mount_SD>
		sprintf (buffer, "%d. Temp1 = %.2f C\tTemp2 = %.2f C\tTemp3 = %.2f C\tADC1 = %d\tADC2 = %d\n",indx, TEMP[0], TEMP[1],TEMP[2],valueADC[0],valueADC[1]);
 800252c:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <SDcard_Task+0xe4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe f821 	bl	8000578 <__aeabi_f2d>
 8002536:	4604      	mov	r4, r0
 8002538:	460d      	mov	r5, r1
 800253a:	4b25      	ldr	r3, [pc, #148]	; (80025d0 <SDcard_Task+0xe4>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe f81a 	bl	8000578 <__aeabi_f2d>
 8002544:	4680      	mov	r8, r0
 8002546:	4689      	mov	r9, r1
 8002548:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <SDcard_Task+0xe4>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	4618      	mov	r0, r3
 800254e:	f7fe f813 	bl	8000578 <__aeabi_f2d>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	491f      	ldr	r1, [pc, #124]	; (80025d4 <SDcard_Task+0xe8>)
 8002558:	8809      	ldrh	r1, [r1, #0]
 800255a:	4608      	mov	r0, r1
 800255c:	491d      	ldr	r1, [pc, #116]	; (80025d4 <SDcard_Task+0xe8>)
 800255e:	8849      	ldrh	r1, [r1, #2]
 8002560:	9107      	str	r1, [sp, #28]
 8002562:	9006      	str	r0, [sp, #24]
 8002564:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002568:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800256c:	e9cd 4500 	strd	r4, r5, [sp]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	4919      	ldr	r1, [pc, #100]	; (80025d8 <SDcard_Task+0xec>)
 8002574:	6938      	ldr	r0, [r7, #16]
 8002576:	f00c fbd3 	bl	800ed20 <siprintf>
		Update_File("DATA.TXT", buffer);
 800257a:	6939      	ldr	r1, [r7, #16]
 800257c:	4812      	ldr	r0, [pc, #72]	; (80025c8 <SDcard_Task+0xdc>)
 800257e:	f7ff fad9 	bl	8001b34 <Update_File>
		vPortFree(buffer);
 8002582:	6938      	ldr	r0, [r7, #16]
 8002584:	f00b fe04 	bl	800e190 <vPortFree>
		Unmount_SD("/");
 8002588:	480e      	ldr	r0, [pc, #56]	; (80025c4 <SDcard_Task+0xd8>)
 800258a:	f7ff f9b5 	bl	80018f8 <Unmount_SD>

		char *string = "magor\n";
 800258e:	4b13      	ldr	r3, [pc, #76]	; (80025dc <SDcard_Task+0xf0>)
 8002590:	60fb      	str	r3, [r7, #12]
					HAL_UART_Transmit(&huart2, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f7fd fe2e 	bl	80001f4 <strlen>
 8002598:	4603      	mov	r3, r0
 800259a:	b29a      	uxth	r2, r3
 800259c:	f04f 33ff 	mov.w	r3, #4294967295
 80025a0:	68f9      	ldr	r1, [r7, #12]
 80025a2:	480f      	ldr	r0, [pc, #60]	; (80025e0 <SDcard_Task+0xf4>)
 80025a4:	f005 f9cc 	bl	8007940 <HAL_UART_Transmit>

		indx++;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	3301      	adds	r3, #1
 80025ac:	617b      	str	r3, [r7, #20]

		osSemaphoreRelease(BinSemHandle);
 80025ae:	4b07      	ldr	r3, [pc, #28]	; (80025cc <SDcard_Task+0xe0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f009 fbb6 	bl	800bd24 <osSemaphoreRelease>
		vTaskDelay(5000);
 80025b8:	f241 3088 	movw	r0, #5000	; 0x1388
 80025bc:	f00a fc76 	bl	800ceac <vTaskDelay>
	{
 80025c0:	e7a6      	b.n	8002510 <SDcard_Task+0x24>
 80025c2:	bf00      	nop
 80025c4:	0801160c 	.word	0x0801160c
 80025c8:	08011610 	.word	0x08011610
 80025cc:	20006a2c 	.word	0x20006a2c
 80025d0:	20000474 	.word	0x20000474
 80025d4:	2000672c 	.word	0x2000672c
 80025d8:	0801161c 	.word	0x0801161c
 80025dc:	08011664 	.word	0x08011664
 80025e0:	200069dc 	.word	0x200069dc

080025e4 <Bluetooth_Task>:
	}

}

void Bluetooth_Task(void *argument)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	while(1)
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <Bluetooth_Task+0x28>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f04f 31ff 	mov.w	r1, #4294967295
 80025f4:	4618      	mov	r0, r3
 80025f6:	f009 fb47 	bl	800bc88 <osSemaphoreWait>



		osSemaphoreRelease(BinSemHandle);
 80025fa:	4b04      	ldr	r3, [pc, #16]	; (800260c <Bluetooth_Task+0x28>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f009 fb90 	bl	800bd24 <osSemaphoreRelease>
		vTaskDelay(200000);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <Bluetooth_Task+0x2c>)
 8002606:	f00a fc51 	bl	800ceac <vTaskDelay>
		osSemaphoreWait(BinSemHandle, osWaitForever);
 800260a:	e7ef      	b.n	80025ec <Bluetooth_Task+0x8>
 800260c:	20006a2c 	.word	0x20006a2c
 8002610:	00030d40 	.word	0x00030d40

08002614 <Output_update_Task>:
	}
}


void Output_update_Task(void *argument)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		osSemaphoreWait(BinSemHandle, osWaitForever);
 800261c:	4b14      	ldr	r3, [pc, #80]	; (8002670 <Output_update_Task+0x5c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f04f 31ff 	mov.w	r1, #4294967295
 8002624:	4618      	mov	r0, r3
 8002626:	f009 fb2f 	bl	800bc88 <osSemaphoreWait>

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 800262a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800262e:	4811      	ldr	r0, [pc, #68]	; (8002674 <Output_update_Task+0x60>)
 8002630:	f002 fe56 	bl	80052e0 <HAL_GPIO_ReadPin>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d007      	beq.n	800264a <Output_update_Task+0x36>
		{
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
 800263a:	2140      	movs	r1, #64	; 0x40
 800263c:	480d      	ldr	r0, [pc, #52]	; (8002674 <Output_update_Task+0x60>)
 800263e:	f002 fe80 	bl	8005342 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
 8002642:	2180      	movs	r1, #128	; 0x80
 8002644:	480b      	ldr	r0, [pc, #44]	; (8002674 <Output_update_Task+0x60>)
 8002646:	f002 fe7c 	bl	8005342 <HAL_GPIO_TogglePin>
		}

		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_4);
 800264a:	2110      	movs	r1, #16
 800264c:	480a      	ldr	r0, [pc, #40]	; (8002678 <Output_update_Task+0x64>)
 800264e:	f002 fe78 	bl	8005342 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_5);
 8002652:	2120      	movs	r1, #32
 8002654:	4808      	ldr	r0, [pc, #32]	; (8002678 <Output_update_Task+0x64>)
 8002656:	f002 fe74 	bl	8005342 <HAL_GPIO_TogglePin>

		osSemaphoreRelease(BinSemHandle);
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <Output_update_Task+0x5c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f009 fb60 	bl	800bd24 <osSemaphoreRelease>
		vTaskDelay(5000);
 8002664:	f241 3088 	movw	r0, #5000	; 0x1388
 8002668:	f00a fc20 	bl	800ceac <vTaskDelay>
		osSemaphoreWait(BinSemHandle, osWaitForever);
 800266c:	e7d6      	b.n	800261c <Output_update_Task+0x8>
 800266e:	bf00      	nop
 8002670:	20006a2c 	.word	0x20006a2c
 8002674:	40020000 	.word	0x40020000
 8002678:	40020800 	.word	0x40020800

0800267c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800267c:	b5b0      	push	{r4, r5, r7, lr}
 800267e:	b08c      	sub	sp, #48	; 0x30
 8002680:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002682:	f001 fb5d 	bl	8003d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002686:	f000 f8a7 	bl	80027d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800268a:	f000 fb31 	bl	8002cf0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800268e:	f000 f96b 	bl	8002968 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002692:	f000 f9cd 	bl	8002a30 <MX_TIM1_Init>
  MX_SPI1_Init();
 8002696:	f000 f995 	bl	80029c4 <MX_SPI1_Init>
  MX_FATFS_Init();
 800269a:	f006 fb61 	bl	8008d60 <MX_FATFS_Init>
  MX_TIM9_Init();
 800269e:	f000 fa69 	bl	8002b74 <MX_TIM9_Init>
  MX_DMA_Init();
 80026a2:	f000 faf5 	bl	8002c90 <MX_DMA_Init>
  MX_ADC1_Init();
 80026a6:	f000 f8ff 	bl	80028a8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80026aa:	f000 fac7 	bl	8002c3c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80026ae:	f000 fa9b 	bl	8002be8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  xTaskCreate(LCD_Task, "LCD", 512, NULL, 1, &LCD_Task_Handler);
 80026b2:	4b33      	ldr	r3, [pc, #204]	; (8002780 <main+0x104>)
 80026b4:	9301      	str	r3, [sp, #4]
 80026b6:	2301      	movs	r3, #1
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	2300      	movs	r3, #0
 80026bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026c0:	4930      	ldr	r1, [pc, #192]	; (8002784 <main+0x108>)
 80026c2:	4831      	ldr	r0, [pc, #196]	; (8002788 <main+0x10c>)
 80026c4:	f00a fabb 	bl	800cc3e <xTaskCreate>
  xTaskCreate(Sensors_Load_Task, "SNZRS", 512, NULL, 2, &Sensors_Load_Task_Handler);
 80026c8:	4b30      	ldr	r3, [pc, #192]	; (800278c <main+0x110>)
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	2302      	movs	r3, #2
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2300      	movs	r3, #0
 80026d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d6:	492e      	ldr	r1, [pc, #184]	; (8002790 <main+0x114>)
 80026d8:	482e      	ldr	r0, [pc, #184]	; (8002794 <main+0x118>)
 80026da:	f00a fab0 	bl	800cc3e <xTaskCreate>
  xTaskCreate(SDcard_Task, "SD", 512, NULL, 3, &SDcard_Task_Handler);
 80026de:	4b2e      	ldr	r3, [pc, #184]	; (8002798 <main+0x11c>)
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	2303      	movs	r3, #3
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	2300      	movs	r3, #0
 80026e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ec:	492b      	ldr	r1, [pc, #172]	; (800279c <main+0x120>)
 80026ee:	482c      	ldr	r0, [pc, #176]	; (80027a0 <main+0x124>)
 80026f0:	f00a faa5 	bl	800cc3e <xTaskCreate>
  xTaskCreate(errLED_Task, "eLED", 128, NULL, 1, &errLED_Task_Handler);
 80026f4:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <main+0x128>)
 80026f6:	9301      	str	r3, [sp, #4]
 80026f8:	2301      	movs	r3, #1
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	2300      	movs	r3, #0
 80026fe:	2280      	movs	r2, #128	; 0x80
 8002700:	4929      	ldr	r1, [pc, #164]	; (80027a8 <main+0x12c>)
 8002702:	482a      	ldr	r0, [pc, #168]	; (80027ac <main+0x130>)
 8002704:	f00a fa9b 	bl	800cc3e <xTaskCreate>
  xTaskCreate(Bluetooth_Task, "BT", 512, NULL, 1, &Bluetooth_Task_Handler);
 8002708:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <main+0x134>)
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	2301      	movs	r3, #1
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	2300      	movs	r3, #0
 8002712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002716:	4927      	ldr	r1, [pc, #156]	; (80027b4 <main+0x138>)
 8002718:	4827      	ldr	r0, [pc, #156]	; (80027b8 <main+0x13c>)
 800271a:	f00a fa90 	bl	800cc3e <xTaskCreate>
  xTaskCreate(Output_update_Task, "OUT_UP", 512, NULL, 1, &Output_update_Task_Handler);
 800271e:	4b27      	ldr	r3, [pc, #156]	; (80027bc <main+0x140>)
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	2301      	movs	r3, #1
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	2300      	movs	r3, #0
 8002728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800272c:	4924      	ldr	r1, [pc, #144]	; (80027c0 <main+0x144>)
 800272e:	4825      	ldr	r0, [pc, #148]	; (80027c4 <main+0x148>)
 8002730:	f00a fa85 	bl	800cc3e <xTaskCreate>


  osSemaphoreDef(BinSem);
 8002734:	2300      	movs	r3, #0
 8002736:	623b      	str	r3, [r7, #32]
 8002738:	2300      	movs	r3, #0
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 800273c:	f107 0320 	add.w	r3, r7, #32
 8002740:	2101      	movs	r1, #1
 8002742:	4618      	mov	r0, r3
 8002744:	f009 fa60 	bl	800bc08 <osSemaphoreCreate>
 8002748:	4603      	mov	r3, r0
 800274a:	4a1f      	ldr	r2, [pc, #124]	; (80027c8 <main+0x14c>)
 800274c:	6013      	str	r3, [r2, #0]


  HAL_TIM_Base_Start(&htim9);
 800274e:	481f      	ldr	r0, [pc, #124]	; (80027cc <main+0x150>)
 8002750:	f004 f90a 	bl	8006968 <HAL_TIM_Base_Start>
  //HAL_TIM_Base_Start_IT(&htim1);

  vTaskStartScheduler();
 8002754:	f00a fbde 	bl	800cf14 <vTaskStartScheduler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <main+0x154>)
 800275a:	1d3c      	adds	r4, r7, #4
 800275c:	461d      	mov	r5, r3
 800275e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002762:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002766:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800276a:	1d3b      	adds	r3, r7, #4
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f009 f9ea 	bl	800bb48 <osThreadCreate>
 8002774:	4603      	mov	r3, r0
 8002776:	4a17      	ldr	r2, [pc, #92]	; (80027d4 <main+0x158>)
 8002778:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800277a:	f009 f9de 	bl	800bb3a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800277e:	e7fe      	b.n	800277e <main+0x102>
 8002780:	20006730 	.word	0x20006730
 8002784:	0801166c 	.word	0x0801166c
 8002788:	08002241 	.word	0x08002241
 800278c:	20006a30 	.word	0x20006a30
 8002790:	08011670 	.word	0x08011670
 8002794:	080023ed 	.word	0x080023ed
 8002798:	200067dc 	.word	0x200067dc
 800279c:	08011678 	.word	0x08011678
 80027a0:	080024ed 	.word	0x080024ed
 80027a4:	20006978 	.word	0x20006978
 80027a8:	0801167c 	.word	0x0801167c
 80027ac:	080021c1 	.word	0x080021c1
 80027b0:	20006728 	.word	0x20006728
 80027b4:	08011684 	.word	0x08011684
 80027b8:	080025e5 	.word	0x080025e5
 80027bc:	2000692c 	.word	0x2000692c
 80027c0:	08011688 	.word	0x08011688
 80027c4:	08002615 	.word	0x08002615
 80027c8:	20006a2c 	.word	0x20006a2c
 80027cc:	20006930 	.word	0x20006930
 80027d0:	08011690 	.word	0x08011690
 80027d4:	200066cc 	.word	0x200066cc

080027d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b094      	sub	sp, #80	; 0x50
 80027dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027de:	f107 0320 	add.w	r3, r7, #32
 80027e2:	2230      	movs	r2, #48	; 0x30
 80027e4:	2100      	movs	r1, #0
 80027e6:	4618      	mov	r0, r3
 80027e8:	f00b fe28 	bl	800e43c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027ec:	f107 030c 	add.w	r3, r7, #12
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027fc:	2300      	movs	r3, #0
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <SystemClock_Config+0xc8>)
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	4a26      	ldr	r2, [pc, #152]	; (80028a0 <SystemClock_Config+0xc8>)
 8002806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280a:	6413      	str	r3, [r2, #64]	; 0x40
 800280c:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <SystemClock_Config+0xc8>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002818:	2300      	movs	r3, #0
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <SystemClock_Config+0xcc>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a20      	ldr	r2, [pc, #128]	; (80028a4 <SystemClock_Config+0xcc>)
 8002822:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <SystemClock_Config+0xcc>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002834:	2302      	movs	r3, #2
 8002836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002838:	2301      	movs	r3, #1
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800283c:	2310      	movs	r3, #16
 800283e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002840:	2302      	movs	r3, #2
 8002842:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002844:	2300      	movs	r3, #0
 8002846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002848:	2308      	movs	r3, #8
 800284a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 800284c:	233c      	movs	r3, #60	; 0x3c
 800284e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002850:	2302      	movs	r3, #2
 8002852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002854:	2304      	movs	r3, #4
 8002856:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002858:	f107 0320 	add.w	r3, r7, #32
 800285c:	4618      	mov	r0, r3
 800285e:	f003 fb05 	bl	8005e6c <HAL_RCC_OscConfig>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002868:	f000 faf4 	bl	8002e54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800286c:	230f      	movs	r3, #15
 800286e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002870:	2302      	movs	r3, #2
 8002872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800287c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	2101      	movs	r1, #1
 8002888:	4618      	mov	r0, r3
 800288a:	f003 fd67 	bl	800635c <HAL_RCC_ClockConfig>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002894:	f000 fade 	bl	8002e54 <Error_Handler>
  }
}
 8002898:	bf00      	nop
 800289a:	3750      	adds	r7, #80	; 0x50
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40007000 	.word	0x40007000

080028a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028ae:	463b      	mov	r3, r7
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80028ba:	4b28      	ldr	r3, [pc, #160]	; (800295c <MX_ADC1_Init+0xb4>)
 80028bc:	4a28      	ldr	r2, [pc, #160]	; (8002960 <MX_ADC1_Init+0xb8>)
 80028be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80028c0:	4b26      	ldr	r3, [pc, #152]	; (800295c <MX_ADC1_Init+0xb4>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028c6:	4b25      	ldr	r3, [pc, #148]	; (800295c <MX_ADC1_Init+0xb4>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80028cc:	4b23      	ldr	r3, [pc, #140]	; (800295c <MX_ADC1_Init+0xb4>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80028d2:	4b22      	ldr	r3, [pc, #136]	; (800295c <MX_ADC1_Init+0xb4>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028d8:	4b20      	ldr	r3, [pc, #128]	; (800295c <MX_ADC1_Init+0xb4>)
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028e0:	4b1e      	ldr	r3, [pc, #120]	; (800295c <MX_ADC1_Init+0xb4>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028e6:	4b1d      	ldr	r3, [pc, #116]	; (800295c <MX_ADC1_Init+0xb4>)
 80028e8:	4a1e      	ldr	r2, [pc, #120]	; (8002964 <MX_ADC1_Init+0xbc>)
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <MX_ADC1_Init+0xb4>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <MX_ADC1_Init+0xb4>)
 80028f4:	2202      	movs	r2, #2
 80028f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80028f8:	4b18      	ldr	r3, [pc, #96]	; (800295c <MX_ADC1_Init+0xb4>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002900:	4b16      	ldr	r3, [pc, #88]	; (800295c <MX_ADC1_Init+0xb4>)
 8002902:	2201      	movs	r2, #1
 8002904:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002906:	4815      	ldr	r0, [pc, #84]	; (800295c <MX_ADC1_Init+0xb4>)
 8002908:	f001 fa80 	bl	8003e0c <HAL_ADC_Init>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002912:	f000 fa9f 	bl	8002e54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002916:	2300      	movs	r3, #0
 8002918:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800291a:	2301      	movs	r3, #1
 800291c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002922:	463b      	mov	r3, r7
 8002924:	4619      	mov	r1, r3
 8002926:	480d      	ldr	r0, [pc, #52]	; (800295c <MX_ADC1_Init+0xb4>)
 8002928:	f001 fbc2 	bl	80040b0 <HAL_ADC_ConfigChannel>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002932:	f000 fa8f 	bl	8002e54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002936:	230b      	movs	r3, #11
 8002938:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800293a:	2302      	movs	r3, #2
 800293c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800293e:	463b      	mov	r3, r7
 8002940:	4619      	mov	r1, r3
 8002942:	4806      	ldr	r0, [pc, #24]	; (800295c <MX_ADC1_Init+0xb4>)
 8002944:	f001 fbb4 	bl	80040b0 <HAL_ADC_ConfigChannel>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800294e:	f000 fa81 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20006794 	.word	0x20006794
 8002960:	40012000 	.word	0x40012000
 8002964:	0f000001 	.word	0x0f000001

08002968 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <MX_I2C1_Init+0x50>)
 800296e:	4a13      	ldr	r2, [pc, #76]	; (80029bc <MX_I2C1_Init+0x54>)
 8002970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <MX_I2C1_Init+0x50>)
 8002974:	4a12      	ldr	r2, [pc, #72]	; (80029c0 <MX_I2C1_Init+0x58>)
 8002976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <MX_I2C1_Init+0x50>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <MX_I2C1_Init+0x50>)
 8002980:	2200      	movs	r2, #0
 8002982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <MX_I2C1_Init+0x50>)
 8002986:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800298a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800298c:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <MX_I2C1_Init+0x50>)
 800298e:	2200      	movs	r2, #0
 8002990:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <MX_I2C1_Init+0x50>)
 8002994:	2200      	movs	r2, #0
 8002996:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002998:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <MX_I2C1_Init+0x50>)
 800299a:	2200      	movs	r2, #0
 800299c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <MX_I2C1_Init+0x50>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029a4:	4804      	ldr	r0, [pc, #16]	; (80029b8 <MX_I2C1_Init+0x50>)
 80029a6:	f002 fce7 	bl	8005378 <HAL_I2C_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029b0:	f000 fa50 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	200066d4 	.word	0x200066d4
 80029bc:	40005400 	.word	0x40005400
 80029c0:	00061a80 	.word	0x00061a80

080029c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029c8:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <MX_SPI1_Init+0x64>)
 80029ca:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <MX_SPI1_Init+0x68>)
 80029cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029ce:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <MX_SPI1_Init+0x64>)
 80029d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029d6:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <MX_SPI1_Init+0x64>)
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029dc:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <MX_SPI1_Init+0x64>)
 80029de:	2200      	movs	r2, #0
 80029e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <MX_SPI1_Init+0x64>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029e8:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <MX_SPI1_Init+0x64>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <MX_SPI1_Init+0x64>)
 80029f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <MX_SPI1_Init+0x64>)
 80029f8:	2220      	movs	r2, #32
 80029fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029fc:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <MX_SPI1_Init+0x64>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <MX_SPI1_Init+0x64>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a08:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <MX_SPI1_Init+0x64>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <MX_SPI1_Init+0x64>)
 8002a10:	220a      	movs	r2, #10
 8002a12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a14:	4804      	ldr	r0, [pc, #16]	; (8002a28 <MX_SPI1_Init+0x64>)
 8002a16:	f003 fecf 	bl	80067b8 <HAL_SPI_Init>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a20:	f000 fa18 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20006984 	.word	0x20006984
 8002a2c:	40013000 	.word	0x40013000

08002a30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b096      	sub	sp, #88	; 0x58
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	60da      	str	r2, [r3, #12]
 8002a5c:	611a      	str	r2, [r3, #16]
 8002a5e:	615a      	str	r2, [r3, #20]
 8002a60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a62:	1d3b      	adds	r3, r7, #4
 8002a64:	2220      	movs	r2, #32
 8002a66:	2100      	movs	r1, #0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f00b fce7 	bl	800e43c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a6e:	4b3f      	ldr	r3, [pc, #252]	; (8002b6c <MX_TIM1_Init+0x13c>)
 8002a70:	4a3f      	ldr	r2, [pc, #252]	; (8002b70 <MX_TIM1_Init+0x140>)
 8002a72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60000-1;
 8002a74:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <MX_TIM1_Init+0x13c>)
 8002a76:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002a7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a7c:	4b3b      	ldr	r3, [pc, #236]	; (8002b6c <MX_TIM1_Init+0x13c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8002a82:	4b3a      	ldr	r3, [pc, #232]	; (8002b6c <MX_TIM1_Init+0x13c>)
 8002a84:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002a88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a8a:	4b38      	ldr	r3, [pc, #224]	; (8002b6c <MX_TIM1_Init+0x13c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a90:	4b36      	ldr	r3, [pc, #216]	; (8002b6c <MX_TIM1_Init+0x13c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a96:	4b35      	ldr	r3, [pc, #212]	; (8002b6c <MX_TIM1_Init+0x13c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a9c:	4833      	ldr	r0, [pc, #204]	; (8002b6c <MX_TIM1_Init+0x13c>)
 8002a9e:	f003 ff14 	bl	80068ca <HAL_TIM_Base_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002aa8:	f000 f9d4 	bl	8002e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ab2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	482c      	ldr	r0, [pc, #176]	; (8002b6c <MX_TIM1_Init+0x13c>)
 8002aba:	f004 fa35 	bl	8006f28 <HAL_TIM_ConfigClockSource>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002ac4:	f000 f9c6 	bl	8002e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ac8:	4828      	ldr	r0, [pc, #160]	; (8002b6c <MX_TIM1_Init+0x13c>)
 8002aca:	f004 f809 	bl	8006ae0 <HAL_TIM_PWM_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002ad4:	f000 f9be 	bl	8002e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002ad8:	2320      	movs	r3, #32
 8002ada:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002adc:	2300      	movs	r3, #0
 8002ade:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ae0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4821      	ldr	r0, [pc, #132]	; (8002b6c <MX_TIM1_Init+0x13c>)
 8002ae8:	f004 fdb4 	bl	8007654 <HAL_TIMEx_MasterConfigSynchronization>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002af2:	f000 f9af 	bl	8002e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002af6:	2360      	movs	r3, #96	; 0x60
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002afe:	2300      	movs	r3, #0
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b02:	2300      	movs	r3, #0
 8002b04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b16:	2200      	movs	r2, #0
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4814      	ldr	r0, [pc, #80]	; (8002b6c <MX_TIM1_Init+0x13c>)
 8002b1c:	f004 f942 	bl	8006da4 <HAL_TIM_PWM_ConfigChannel>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002b26:	f000 f995 	bl	8002e54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b48:	1d3b      	adds	r3, r7, #4
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4807      	ldr	r0, [pc, #28]	; (8002b6c <MX_TIM1_Init+0x13c>)
 8002b4e:	f004 fdef 	bl	8007730 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002b58:	f000 f97c 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b5c:	4803      	ldr	r0, [pc, #12]	; (8002b6c <MX_TIM1_Init+0x13c>)
 8002b5e:	f000 fdcf 	bl	8003700 <HAL_TIM_MspPostInit>

}
 8002b62:	bf00      	nop
 8002b64:	3758      	adds	r7, #88	; 0x58
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	200068e4 	.word	0x200068e4
 8002b70:	40010000 	.word	0x40010000

08002b74 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b7a:	463b      	mov	r3, r7
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002b86:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <MX_TIM9_Init+0x6c>)
 8002b88:	4a16      	ldr	r2, [pc, #88]	; (8002be4 <MX_TIM9_Init+0x70>)
 8002b8a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 60-1;
 8002b8c:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <MX_TIM9_Init+0x6c>)
 8002b8e:	223b      	movs	r2, #59	; 0x3b
 8002b90:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b92:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <MX_TIM9_Init+0x6c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xffff-1;
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <MX_TIM9_Init+0x6c>)
 8002b9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002b9e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <MX_TIM9_Init+0x6c>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <MX_TIM9_Init+0x6c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002bac:	480c      	ldr	r0, [pc, #48]	; (8002be0 <MX_TIM9_Init+0x6c>)
 8002bae:	f003 fe8c 	bl	80068ca <HAL_TIM_Base_Init>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002bb8:	f000 f94c 	bl	8002e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002bc2:	463b      	mov	r3, r7
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4806      	ldr	r0, [pc, #24]	; (8002be0 <MX_TIM9_Init+0x6c>)
 8002bc8:	f004 f9ae 	bl	8006f28 <HAL_TIM_ConfigClockSource>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8002bd2:	f000 f93f 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20006930 	.word	0x20006930
 8002be4:	40014000 	.word	0x40014000

08002be8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bec:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002bee:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <MX_USART1_UART_Init+0x50>)
 8002bf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002bf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c0c:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002c0e:	220c      	movs	r2, #12
 8002c10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8002c1e:	4805      	ldr	r0, [pc, #20]	; (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002c20:	f004 fe39 	bl	8007896 <HAL_HalfDuplex_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c2a:	f000 f913 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20006840 	.word	0x20006840
 8002c38:	40011000 	.word	0x40011000

08002c3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <MX_USART2_UART_Init+0x4c>)
 8002c42:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <MX_USART2_UART_Init+0x50>)
 8002c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <MX_USART2_UART_Init+0x4c>)
 8002c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <MX_USART2_UART_Init+0x4c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <MX_USART2_UART_Init+0x4c>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <MX_USART2_UART_Init+0x4c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <MX_USART2_UART_Init+0x4c>)
 8002c62:	220c      	movs	r2, #12
 8002c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <MX_USART2_UART_Init+0x4c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <MX_USART2_UART_Init+0x4c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c72:	4805      	ldr	r0, [pc, #20]	; (8002c88 <MX_USART2_UART_Init+0x4c>)
 8002c74:	f004 fdc2 	bl	80077fc <HAL_UART_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c7e:	f000 f8e9 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	200069dc 	.word	0x200069dc
 8002c8c:	40004400 	.word	0x40004400

08002c90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	4b14      	ldr	r3, [pc, #80]	; (8002cec <MX_DMA_Init+0x5c>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	4a13      	ldr	r2, [pc, #76]	; (8002cec <MX_DMA_Init+0x5c>)
 8002ca0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca6:	4b11      	ldr	r3, [pc, #68]	; (8002cec <MX_DMA_Init+0x5c>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2105      	movs	r1, #5
 8002cb6:	2038      	movs	r0, #56	; 0x38
 8002cb8:	f001 fd62 	bl	8004780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002cbc:	2038      	movs	r0, #56	; 0x38
 8002cbe:	f001 fd7b 	bl	80047b8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2105      	movs	r1, #5
 8002cc6:	203a      	movs	r0, #58	; 0x3a
 8002cc8:	f001 fd5a 	bl	8004780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002ccc:	203a      	movs	r0, #58	; 0x3a
 8002cce:	f001 fd73 	bl	80047b8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2105      	movs	r1, #5
 8002cd6:	2046      	movs	r0, #70	; 0x46
 8002cd8:	f001 fd52 	bl	8004780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002cdc:	2046      	movs	r0, #70	; 0x46
 8002cde:	f001 fd6b 	bl	80047b8 <HAL_NVIC_EnableIRQ>

}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800

08002cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	; 0x28
 8002cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf6:	f107 0314 	add.w	r3, r7, #20
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <MX_GPIO_Init+0x120>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4a40      	ldr	r2, [pc, #256]	; (8002e10 <MX_GPIO_Init+0x120>)
 8002d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4b3e      	ldr	r3, [pc, #248]	; (8002e10 <MX_GPIO_Init+0x120>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <MX_GPIO_Init+0x120>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	4a39      	ldr	r2, [pc, #228]	; (8002e10 <MX_GPIO_Init+0x120>)
 8002d2c:	f043 0304 	orr.w	r3, r3, #4
 8002d30:	6313      	str	r3, [r2, #48]	; 0x30
 8002d32:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <MX_GPIO_Init+0x120>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	4b33      	ldr	r3, [pc, #204]	; (8002e10 <MX_GPIO_Init+0x120>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a32      	ldr	r2, [pc, #200]	; (8002e10 <MX_GPIO_Init+0x120>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <MX_GPIO_Init+0x120>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	4b2c      	ldr	r3, [pc, #176]	; (8002e10 <MX_GPIO_Init+0x120>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	4a2b      	ldr	r2, [pc, #172]	; (8002e10 <MX_GPIO_Init+0x120>)
 8002d64:	f043 0302 	orr.w	r3, r3, #2
 8002d68:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6a:	4b29      	ldr	r3, [pc, #164]	; (8002e10 <MX_GPIO_Init+0x120>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_USERLED_Pin|RELE_1_Pin|RELE_2_Pin, GPIO_PIN_RESET);
 8002d76:	2200      	movs	r2, #0
 8002d78:	21e0      	movs	r1, #224	; 0xe0
 8002d7a:	4826      	ldr	r0, [pc, #152]	; (8002e14 <MX_GPIO_Init+0x124>)
 8002d7c:	f002 fac8 	bl	8005310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELE_3_Pin|RELE_4_Pin, GPIO_PIN_RESET);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2130      	movs	r1, #48	; 0x30
 8002d84:	4824      	ldr	r0, [pc, #144]	; (8002e18 <MX_GPIO_Init+0x128>)
 8002d86:	f002 fac3 	bl	8005310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_RESET);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d90:	4822      	ldr	r0, [pc, #136]	; (8002e1c <MX_GPIO_Init+0x12c>)
 8002d92:	f002 fabd 	bl	8005310 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_USERLED_Pin RELE_1_Pin RELE_2_Pin */
  GPIO_InitStruct.Pin = LD2_USERLED_Pin|RELE_1_Pin|RELE_2_Pin;
 8002d96:	23e0      	movs	r3, #224	; 0xe0
 8002d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	2300      	movs	r3, #0
 8002da4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da6:	f107 0314 	add.w	r3, r7, #20
 8002daa:	4619      	mov	r1, r3
 8002dac:	4819      	ldr	r0, [pc, #100]	; (8002e14 <MX_GPIO_Init+0x124>)
 8002dae:	f002 f913 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELE_3_Pin RELE_4_Pin */
  GPIO_InitStruct.Pin = RELE_3_Pin|RELE_4_Pin;
 8002db2:	2330      	movs	r3, #48	; 0x30
 8002db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db6:	2301      	movs	r3, #1
 8002db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc2:	f107 0314 	add.w	r3, r7, #20
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4813      	ldr	r0, [pc, #76]	; (8002e18 <MX_GPIO_Init+0x128>)
 8002dca:	f002 f905 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDCARD_CS_Pin */
  GPIO_InitStruct.Pin = SDCARD_CS_Pin;
 8002dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SDCARD_CS_GPIO_Port, &GPIO_InitStruct);
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	4619      	mov	r1, r3
 8002de6:	480d      	ldr	r0, [pc, #52]	; (8002e1c <MX_GPIO_Init+0x12c>)
 8002de8:	f002 f8f6 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002df6:	2301      	movs	r3, #1
 8002df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfa:	f107 0314 	add.w	r3, r7, #20
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4804      	ldr	r0, [pc, #16]	; (8002e14 <MX_GPIO_Init+0x124>)
 8002e02:	f002 f8e9 	bl	8004fd8 <HAL_GPIO_Init>

}
 8002e06:	bf00      	nop
 8002e08:	3728      	adds	r7, #40	; 0x28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40020000 	.word	0x40020000
 8002e18:	40020800 	.word	0x40020800
 8002e1c:	40020400 	.word	0x40020400

08002e20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f008 fed9 	bl	800bbe0 <osDelay>
 8002e2e:	e7fb      	b.n	8002e28 <StartDefaultTask+0x8>

08002e30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e42:	f000 ff9f 	bl	8003d84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40000c00 	.word	0x40000c00

08002e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e58:	b672      	cpsid	i
}
 8002e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e5c:	e7fe      	b.n	8002e5c <Error_Handler+0x8>
	...

08002e60 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002e66:	f000 fa29 	bl	80032bc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002e6a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002e6e:	2201      	movs	r2, #1
 8002e70:	2178      	movs	r1, #120	; 0x78
 8002e72:	485b      	ldr	r0, [pc, #364]	; (8002fe0 <SSD1306_Init+0x180>)
 8002e74:	f002 fcc2 	bl	80057fc <HAL_I2C_IsDeviceReady>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e0a9      	b.n	8002fd6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002e82:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002e86:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002e88:	e002      	b.n	8002e90 <SSD1306_Init+0x30>
		p--;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f9      	bne.n	8002e8a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002e96:	22ae      	movs	r2, #174	; 0xae
 8002e98:	2100      	movs	r1, #0
 8002e9a:	2078      	movs	r0, #120	; 0x78
 8002e9c:	f000 fa6c 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	2078      	movs	r0, #120	; 0x78
 8002ea6:	f000 fa67 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002eaa:	2210      	movs	r2, #16
 8002eac:	2100      	movs	r1, #0
 8002eae:	2078      	movs	r0, #120	; 0x78
 8002eb0:	f000 fa62 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002eb4:	22b0      	movs	r2, #176	; 0xb0
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	2078      	movs	r0, #120	; 0x78
 8002eba:	f000 fa5d 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002ebe:	22c8      	movs	r2, #200	; 0xc8
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	2078      	movs	r0, #120	; 0x78
 8002ec4:	f000 fa58 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2100      	movs	r1, #0
 8002ecc:	2078      	movs	r0, #120	; 0x78
 8002ece:	f000 fa53 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002ed2:	2210      	movs	r2, #16
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	2078      	movs	r0, #120	; 0x78
 8002ed8:	f000 fa4e 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002edc:	2240      	movs	r2, #64	; 0x40
 8002ede:	2100      	movs	r1, #0
 8002ee0:	2078      	movs	r0, #120	; 0x78
 8002ee2:	f000 fa49 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002ee6:	2281      	movs	r2, #129	; 0x81
 8002ee8:	2100      	movs	r1, #0
 8002eea:	2078      	movs	r0, #120	; 0x78
 8002eec:	f000 fa44 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002ef0:	22ff      	movs	r2, #255	; 0xff
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	2078      	movs	r0, #120	; 0x78
 8002ef6:	f000 fa3f 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002efa:	22a1      	movs	r2, #161	; 0xa1
 8002efc:	2100      	movs	r1, #0
 8002efe:	2078      	movs	r0, #120	; 0x78
 8002f00:	f000 fa3a 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002f04:	22a6      	movs	r2, #166	; 0xa6
 8002f06:	2100      	movs	r1, #0
 8002f08:	2078      	movs	r0, #120	; 0x78
 8002f0a:	f000 fa35 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002f0e:	22a8      	movs	r2, #168	; 0xa8
 8002f10:	2100      	movs	r1, #0
 8002f12:	2078      	movs	r0, #120	; 0x78
 8002f14:	f000 fa30 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002f18:	223f      	movs	r2, #63	; 0x3f
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	2078      	movs	r0, #120	; 0x78
 8002f1e:	f000 fa2b 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002f22:	22a4      	movs	r2, #164	; 0xa4
 8002f24:	2100      	movs	r1, #0
 8002f26:	2078      	movs	r0, #120	; 0x78
 8002f28:	f000 fa26 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002f2c:	22d3      	movs	r2, #211	; 0xd3
 8002f2e:	2100      	movs	r1, #0
 8002f30:	2078      	movs	r0, #120	; 0x78
 8002f32:	f000 fa21 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002f36:	2200      	movs	r2, #0
 8002f38:	2100      	movs	r1, #0
 8002f3a:	2078      	movs	r0, #120	; 0x78
 8002f3c:	f000 fa1c 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002f40:	22d5      	movs	r2, #213	; 0xd5
 8002f42:	2100      	movs	r1, #0
 8002f44:	2078      	movs	r0, #120	; 0x78
 8002f46:	f000 fa17 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002f4a:	22f0      	movs	r2, #240	; 0xf0
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	2078      	movs	r0, #120	; 0x78
 8002f50:	f000 fa12 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002f54:	22d9      	movs	r2, #217	; 0xd9
 8002f56:	2100      	movs	r1, #0
 8002f58:	2078      	movs	r0, #120	; 0x78
 8002f5a:	f000 fa0d 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002f5e:	2222      	movs	r2, #34	; 0x22
 8002f60:	2100      	movs	r1, #0
 8002f62:	2078      	movs	r0, #120	; 0x78
 8002f64:	f000 fa08 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002f68:	22da      	movs	r2, #218	; 0xda
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	2078      	movs	r0, #120	; 0x78
 8002f6e:	f000 fa03 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002f72:	2212      	movs	r2, #18
 8002f74:	2100      	movs	r1, #0
 8002f76:	2078      	movs	r0, #120	; 0x78
 8002f78:	f000 f9fe 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002f7c:	22db      	movs	r2, #219	; 0xdb
 8002f7e:	2100      	movs	r1, #0
 8002f80:	2078      	movs	r0, #120	; 0x78
 8002f82:	f000 f9f9 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002f86:	2220      	movs	r2, #32
 8002f88:	2100      	movs	r1, #0
 8002f8a:	2078      	movs	r0, #120	; 0x78
 8002f8c:	f000 f9f4 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002f90:	228d      	movs	r2, #141	; 0x8d
 8002f92:	2100      	movs	r1, #0
 8002f94:	2078      	movs	r0, #120	; 0x78
 8002f96:	f000 f9ef 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002f9a:	2214      	movs	r2, #20
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	2078      	movs	r0, #120	; 0x78
 8002fa0:	f000 f9ea 	bl	8003378 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002fa4:	22af      	movs	r2, #175	; 0xaf
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	2078      	movs	r0, #120	; 0x78
 8002faa:	f000 f9e5 	bl	8003378 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002fae:	222e      	movs	r2, #46	; 0x2e
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	2078      	movs	r0, #120	; 0x78
 8002fb4:	f000 f9e0 	bl	8003378 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f000 f843 	bl	8003044 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002fbe:	f000 f813 	bl	8002fe8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <SSD1306_Init+0x184>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <SSD1306_Init+0x184>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002fce:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <SSD1306_Init+0x184>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002fd4:	2301      	movs	r3, #1
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	200066d4 	.word	0x200066d4
 8002fe4:	20000884 	.word	0x20000884

08002fe8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002fee:	2300      	movs	r3, #0
 8002ff0:	71fb      	strb	r3, [r7, #7]
 8002ff2:	e01d      	b.n	8003030 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	3b50      	subs	r3, #80	; 0x50
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	2078      	movs	r0, #120	; 0x78
 8003000:	f000 f9ba 	bl	8003378 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003004:	2200      	movs	r2, #0
 8003006:	2100      	movs	r1, #0
 8003008:	2078      	movs	r0, #120	; 0x78
 800300a:	f000 f9b5 	bl	8003378 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800300e:	2210      	movs	r2, #16
 8003010:	2100      	movs	r1, #0
 8003012:	2078      	movs	r0, #120	; 0x78
 8003014:	f000 f9b0 	bl	8003378 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	01db      	lsls	r3, r3, #7
 800301c:	4a08      	ldr	r2, [pc, #32]	; (8003040 <SSD1306_UpdateScreen+0x58>)
 800301e:	441a      	add	r2, r3
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	2140      	movs	r1, #64	; 0x40
 8003024:	2078      	movs	r0, #120	; 0x78
 8003026:	f000 f95f 	bl	80032e8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	3301      	adds	r3, #1
 800302e:	71fb      	strb	r3, [r7, #7]
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	2b07      	cmp	r3, #7
 8003034:	d9de      	bls.n	8002ff4 <SSD1306_UpdateScreen+0xc>
	}
}
 8003036:	bf00      	nop
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000484 	.word	0x20000484

08003044 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <SSD1306_Fill+0x14>
 8003054:	2300      	movs	r3, #0
 8003056:	e000      	b.n	800305a <SSD1306_Fill+0x16>
 8003058:	23ff      	movs	r3, #255	; 0xff
 800305a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800305e:	4619      	mov	r1, r3
 8003060:	4803      	ldr	r0, [pc, #12]	; (8003070 <SSD1306_Fill+0x2c>)
 8003062:	f00b f9eb 	bl	800e43c <memset>
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000484 	.word	0x20000484

08003074 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	80fb      	strh	r3, [r7, #6]
 800307e:	460b      	mov	r3, r1
 8003080:	80bb      	strh	r3, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	70fb      	strb	r3, [r7, #3]
	if (
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	2b7f      	cmp	r3, #127	; 0x7f
 800308a:	d848      	bhi.n	800311e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800308c:	88bb      	ldrh	r3, [r7, #4]
 800308e:	2b3f      	cmp	r3, #63	; 0x3f
 8003090:	d845      	bhi.n	800311e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003092:	4b26      	ldr	r3, [pc, #152]	; (800312c <SSD1306_DrawPixel+0xb8>)
 8003094:	791b      	ldrb	r3, [r3, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d006      	beq.n	80030a8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf0c      	ite	eq
 80030a0:	2301      	moveq	r3, #1
 80030a2:	2300      	movne	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d11a      	bne.n	80030e4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80030ae:	88fa      	ldrh	r2, [r7, #6]
 80030b0:	88bb      	ldrh	r3, [r7, #4]
 80030b2:	08db      	lsrs	r3, r3, #3
 80030b4:	b298      	uxth	r0, r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	01db      	lsls	r3, r3, #7
 80030ba:	4413      	add	r3, r2
 80030bc:	4a1c      	ldr	r2, [pc, #112]	; (8003130 <SSD1306_DrawPixel+0xbc>)
 80030be:	5cd3      	ldrb	r3, [r2, r3]
 80030c0:	b25a      	sxtb	r2, r3
 80030c2:	88bb      	ldrh	r3, [r7, #4]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	2101      	movs	r1, #1
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	b25b      	sxtb	r3, r3
 80030d0:	4313      	orrs	r3, r2
 80030d2:	b259      	sxtb	r1, r3
 80030d4:	88fa      	ldrh	r2, [r7, #6]
 80030d6:	4603      	mov	r3, r0
 80030d8:	01db      	lsls	r3, r3, #7
 80030da:	4413      	add	r3, r2
 80030dc:	b2c9      	uxtb	r1, r1
 80030de:	4a14      	ldr	r2, [pc, #80]	; (8003130 <SSD1306_DrawPixel+0xbc>)
 80030e0:	54d1      	strb	r1, [r2, r3]
 80030e2:	e01d      	b.n	8003120 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80030e4:	88fa      	ldrh	r2, [r7, #6]
 80030e6:	88bb      	ldrh	r3, [r7, #4]
 80030e8:	08db      	lsrs	r3, r3, #3
 80030ea:	b298      	uxth	r0, r3
 80030ec:	4603      	mov	r3, r0
 80030ee:	01db      	lsls	r3, r3, #7
 80030f0:	4413      	add	r3, r2
 80030f2:	4a0f      	ldr	r2, [pc, #60]	; (8003130 <SSD1306_DrawPixel+0xbc>)
 80030f4:	5cd3      	ldrb	r3, [r2, r3]
 80030f6:	b25a      	sxtb	r2, r3
 80030f8:	88bb      	ldrh	r3, [r7, #4]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	2101      	movs	r1, #1
 8003100:	fa01 f303 	lsl.w	r3, r1, r3
 8003104:	b25b      	sxtb	r3, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	b25b      	sxtb	r3, r3
 800310a:	4013      	ands	r3, r2
 800310c:	b259      	sxtb	r1, r3
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	4603      	mov	r3, r0
 8003112:	01db      	lsls	r3, r3, #7
 8003114:	4413      	add	r3, r2
 8003116:	b2c9      	uxtb	r1, r1
 8003118:	4a05      	ldr	r2, [pc, #20]	; (8003130 <SSD1306_DrawPixel+0xbc>)
 800311a:	54d1      	strb	r1, [r2, r3]
 800311c:	e000      	b.n	8003120 <SSD1306_DrawPixel+0xac>
		return;
 800311e:	bf00      	nop
	}
}
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000884 	.word	0x20000884
 8003130:	20000484 	.word	0x20000484

08003134 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	460a      	mov	r2, r1
 800313e:	80fb      	strh	r3, [r7, #6]
 8003140:	4613      	mov	r3, r2
 8003142:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003144:	4a05      	ldr	r2, [pc, #20]	; (800315c <SSD1306_GotoXY+0x28>)
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800314a:	4a04      	ldr	r2, [pc, #16]	; (800315c <SSD1306_GotoXY+0x28>)
 800314c:	88bb      	ldrh	r3, [r7, #4]
 800314e:	8053      	strh	r3, [r2, #2]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	20000884 	.word	0x20000884

08003160 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	6039      	str	r1, [r7, #0]
 800316a:	71fb      	strb	r3, [r7, #7]
 800316c:	4613      	mov	r3, r2
 800316e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003170:	4b3a      	ldr	r3, [pc, #232]	; (800325c <SSD1306_Putc+0xfc>)
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	4413      	add	r3, r2
	if (
 800317c:	2b7f      	cmp	r3, #127	; 0x7f
 800317e:	dc07      	bgt.n	8003190 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003180:	4b36      	ldr	r3, [pc, #216]	; (800325c <SSD1306_Putc+0xfc>)
 8003182:	885b      	ldrh	r3, [r3, #2]
 8003184:	461a      	mov	r2, r3
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	785b      	ldrb	r3, [r3, #1]
 800318a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800318c:	2b3f      	cmp	r3, #63	; 0x3f
 800318e:	dd01      	ble.n	8003194 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003190:	2300      	movs	r3, #0
 8003192:	e05e      	b.n	8003252 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	e04b      	b.n	8003232 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	3b20      	subs	r3, #32
 80031a2:	6839      	ldr	r1, [r7, #0]
 80031a4:	7849      	ldrb	r1, [r1, #1]
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4619      	mov	r1, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	440b      	add	r3, r1
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4413      	add	r3, r2
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80031b8:	2300      	movs	r3, #0
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	e030      	b.n	8003220 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d010      	beq.n	80031f0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80031ce:	4b23      	ldr	r3, [pc, #140]	; (800325c <SSD1306_Putc+0xfc>)
 80031d0:	881a      	ldrh	r2, [r3, #0]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	b298      	uxth	r0, r3
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <SSD1306_Putc+0xfc>)
 80031dc:	885a      	ldrh	r2, [r3, #2]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	79ba      	ldrb	r2, [r7, #6]
 80031e8:	4619      	mov	r1, r3
 80031ea:	f7ff ff43 	bl	8003074 <SSD1306_DrawPixel>
 80031ee:	e014      	b.n	800321a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80031f0:	4b1a      	ldr	r3, [pc, #104]	; (800325c <SSD1306_Putc+0xfc>)
 80031f2:	881a      	ldrh	r2, [r3, #0]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	b298      	uxth	r0, r3
 80031fc:	4b17      	ldr	r3, [pc, #92]	; (800325c <SSD1306_Putc+0xfc>)
 80031fe:	885a      	ldrh	r2, [r3, #2]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	b29b      	uxth	r3, r3
 8003204:	4413      	add	r3, r2
 8003206:	b299      	uxth	r1, r3
 8003208:	79bb      	ldrb	r3, [r7, #6]
 800320a:	2b00      	cmp	r3, #0
 800320c:	bf0c      	ite	eq
 800320e:	2301      	moveq	r3, #1
 8003210:	2300      	movne	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	f7ff ff2d 	bl	8003074 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	3301      	adds	r3, #1
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4293      	cmp	r3, r2
 800322a:	d3c8      	bcc.n	80031be <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	3301      	adds	r3, #1
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	785b      	ldrb	r3, [r3, #1]
 8003236:	461a      	mov	r2, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	4293      	cmp	r3, r2
 800323c:	d3ad      	bcc.n	800319a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <SSD1306_Putc+0xfc>)
 8003240:	881a      	ldrh	r2, [r3, #0]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	4413      	add	r3, r2
 800324a:	b29a      	uxth	r2, r3
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <SSD1306_Putc+0xfc>)
 800324e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8003250:	79fb      	ldrb	r3, [r7, #7]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000884 	.word	0x20000884

08003260 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	4613      	mov	r3, r2
 800326c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800326e:	e012      	b.n	8003296 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	79fa      	ldrb	r2, [r7, #7]
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff71 	bl	8003160 <SSD1306_Putc>
 800327e:	4603      	mov	r3, r0
 8003280:	461a      	mov	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d002      	beq.n	8003290 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	e008      	b.n	80032a2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	3301      	adds	r3, #1
 8003294:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1e8      	bne.n	8003270 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	781b      	ldrb	r3, [r3, #0]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80032ae:	2000      	movs	r0, #0
 80032b0:	f7ff fec8 	bl	8003044 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80032b4:	f7ff fe98 	bl	8002fe8 <SSD1306_UpdateScreen>
}
 80032b8:	bf00      	nop
 80032ba:	bd80      	pop	{r7, pc}

080032bc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <ssd1306_I2C_Init+0x28>)
 80032c4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80032c6:	e002      	b.n	80032ce <ssd1306_I2C_Init+0x12>
		p--;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f9      	bne.n	80032c8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	0003d090 	.word	0x0003d090

080032e8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80032e8:	b590      	push	{r4, r7, lr}
 80032ea:	b0c7      	sub	sp, #284	; 0x11c
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	4604      	mov	r4, r0
 80032f0:	4608      	mov	r0, r1
 80032f2:	4639      	mov	r1, r7
 80032f4:	600a      	str	r2, [r1, #0]
 80032f6:	4619      	mov	r1, r3
 80032f8:	1dfb      	adds	r3, r7, #7
 80032fa:	4622      	mov	r2, r4
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	1dbb      	adds	r3, r7, #6
 8003300:	4602      	mov	r2, r0
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	1d3b      	adds	r3, r7, #4
 8003306:	460a      	mov	r2, r1
 8003308:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800330a:	f107 030c 	add.w	r3, r7, #12
 800330e:	1dba      	adds	r2, r7, #6
 8003310:	7812      	ldrb	r2, [r2, #0]
 8003312:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003314:	2300      	movs	r3, #0
 8003316:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800331a:	e010      	b.n	800333e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 800331c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003320:	463a      	mov	r2, r7
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	441a      	add	r2, r3
 8003326:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800332a:	3301      	adds	r3, #1
 800332c:	7811      	ldrb	r1, [r2, #0]
 800332e:	f107 020c 	add.w	r2, r7, #12
 8003332:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003334:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003338:	3301      	adds	r3, #1
 800333a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800333e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003342:	b29b      	uxth	r3, r3
 8003344:	1d3a      	adds	r2, r7, #4
 8003346:	8812      	ldrh	r2, [r2, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d8e7      	bhi.n	800331c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800334c:	1dfb      	adds	r3, r7, #7
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	b299      	uxth	r1, r3
 8003352:	1d3b      	adds	r3, r7, #4
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	3301      	adds	r3, #1
 8003358:	b29b      	uxth	r3, r3
 800335a:	f107 020c 	add.w	r2, r7, #12
 800335e:	200a      	movs	r0, #10
 8003360:	9000      	str	r0, [sp, #0]
 8003362:	4804      	ldr	r0, [pc, #16]	; (8003374 <ssd1306_I2C_WriteMulti+0x8c>)
 8003364:	f002 f94c 	bl	8005600 <HAL_I2C_Master_Transmit>
}
 8003368:	bf00      	nop
 800336a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800336e:	46bd      	mov	sp, r7
 8003370:	bd90      	pop	{r4, r7, pc}
 8003372:	bf00      	nop
 8003374:	200066d4 	.word	0x200066d4

08003378 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af02      	add	r7, sp, #8
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
 8003382:	460b      	mov	r3, r1
 8003384:	71bb      	strb	r3, [r7, #6]
 8003386:	4613      	mov	r3, r2
 8003388:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800338a:	79bb      	ldrb	r3, [r7, #6]
 800338c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800338e:	797b      	ldrb	r3, [r7, #5]
 8003390:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	b299      	uxth	r1, r3
 8003396:	f107 020c 	add.w	r2, r7, #12
 800339a:	230a      	movs	r3, #10
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	2302      	movs	r3, #2
 80033a0:	4803      	ldr	r0, [pc, #12]	; (80033b0 <ssd1306_I2C_Write+0x38>)
 80033a2:	f002 f92d 	bl	8005600 <HAL_I2C_Master_Transmit>
}
 80033a6:	bf00      	nop
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	200066d4 	.word	0x200066d4

080033b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_MspInit+0x54>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	4a11      	ldr	r2, [pc, #68]	; (8003408 <HAL_MspInit+0x54>)
 80033c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033c8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ca:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <HAL_MspInit+0x54>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	603b      	str	r3, [r7, #0]
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_MspInit+0x54>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <HAL_MspInit+0x54>)
 80033e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e4:	6413      	str	r3, [r2, #64]	; 0x40
 80033e6:	4b08      	ldr	r3, [pc, #32]	; (8003408 <HAL_MspInit+0x54>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033f2:	2200      	movs	r2, #0
 80033f4:	210f      	movs	r1, #15
 80033f6:	f06f 0001 	mvn.w	r0, #1
 80033fa:	f001 f9c1 	bl	8004780 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800

0800340c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08a      	sub	sp, #40	; 0x28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003414:	f107 0314 	add.w	r3, r7, #20
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a3c      	ldr	r2, [pc, #240]	; (800351c <HAL_ADC_MspInit+0x110>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d171      	bne.n	8003512 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	4b3b      	ldr	r3, [pc, #236]	; (8003520 <HAL_ADC_MspInit+0x114>)
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	4a3a      	ldr	r2, [pc, #232]	; (8003520 <HAL_ADC_MspInit+0x114>)
 8003438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343c:	6453      	str	r3, [r2, #68]	; 0x44
 800343e:	4b38      	ldr	r3, [pc, #224]	; (8003520 <HAL_ADC_MspInit+0x114>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	4b34      	ldr	r3, [pc, #208]	; (8003520 <HAL_ADC_MspInit+0x114>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	4a33      	ldr	r2, [pc, #204]	; (8003520 <HAL_ADC_MspInit+0x114>)
 8003454:	f043 0304 	orr.w	r3, r3, #4
 8003458:	6313      	str	r3, [r2, #48]	; 0x30
 800345a:	4b31      	ldr	r3, [pc, #196]	; (8003520 <HAL_ADC_MspInit+0x114>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <HAL_ADC_MspInit+0x114>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	4a2c      	ldr	r2, [pc, #176]	; (8003520 <HAL_ADC_MspInit+0x114>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6313      	str	r3, [r2, #48]	; 0x30
 8003476:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <HAL_ADC_MspInit+0x114>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = SOIL_MOISTURE_Pin;
 8003482:	2302      	movs	r3, #2
 8003484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003486:	2303      	movs	r3, #3
 8003488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SOIL_MOISTURE_GPIO_Port, &GPIO_InitStruct);
 800348e:	f107 0314 	add.w	r3, r7, #20
 8003492:	4619      	mov	r1, r3
 8003494:	4823      	ldr	r0, [pc, #140]	; (8003524 <HAL_ADC_MspInit+0x118>)
 8003496:	f001 fd9f 	bl	8004fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WATER_SENSOR_Pin;
 800349a:	2301      	movs	r3, #1
 800349c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800349e:	2303      	movs	r3, #3
 80034a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WATER_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80034a6:	f107 0314 	add.w	r3, r7, #20
 80034aa:	4619      	mov	r1, r3
 80034ac:	481e      	ldr	r0, [pc, #120]	; (8003528 <HAL_ADC_MspInit+0x11c>)
 80034ae:	f001 fd93 	bl	8004fd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80034b2:	4b1e      	ldr	r3, [pc, #120]	; (800352c <HAL_ADC_MspInit+0x120>)
 80034b4:	4a1e      	ldr	r2, [pc, #120]	; (8003530 <HAL_ADC_MspInit+0x124>)
 80034b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80034b8:	4b1c      	ldr	r3, [pc, #112]	; (800352c <HAL_ADC_MspInit+0x120>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034be:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_ADC_MspInit+0x120>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c4:	4b19      	ldr	r3, [pc, #100]	; (800352c <HAL_ADC_MspInit+0x120>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80034ca:	4b18      	ldr	r3, [pc, #96]	; (800352c <HAL_ADC_MspInit+0x120>)
 80034cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034d2:	4b16      	ldr	r3, [pc, #88]	; (800352c <HAL_ADC_MspInit+0x120>)
 80034d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034da:	4b14      	ldr	r3, [pc, #80]	; (800352c <HAL_ADC_MspInit+0x120>)
 80034dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80034e2:	4b12      	ldr	r3, [pc, #72]	; (800352c <HAL_ADC_MspInit+0x120>)
 80034e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <HAL_ADC_MspInit+0x120>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034f0:	4b0e      	ldr	r3, [pc, #56]	; (800352c <HAL_ADC_MspInit+0x120>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80034f6:	480d      	ldr	r0, [pc, #52]	; (800352c <HAL_ADC_MspInit+0x120>)
 80034f8:	f001 f96c 	bl	80047d4 <HAL_DMA_Init>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003502:	f7ff fca7 	bl	8002e54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a08      	ldr	r2, [pc, #32]	; (800352c <HAL_ADC_MspInit+0x120>)
 800350a:	639a      	str	r2, [r3, #56]	; 0x38
 800350c:	4a07      	ldr	r2, [pc, #28]	; (800352c <HAL_ADC_MspInit+0x120>)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003512:	bf00      	nop
 8003514:	3728      	adds	r7, #40	; 0x28
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40012000 	.word	0x40012000
 8003520:	40023800 	.word	0x40023800
 8003524:	40020800 	.word	0x40020800
 8003528:	40020000 	.word	0x40020000
 800352c:	20006884 	.word	0x20006884
 8003530:	40026410 	.word	0x40026410

08003534 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	; 0x28
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a19      	ldr	r2, [pc, #100]	; (80035b8 <HAL_I2C_MspInit+0x84>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d12c      	bne.n	80035b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	4b18      	ldr	r3, [pc, #96]	; (80035bc <HAL_I2C_MspInit+0x88>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	4a17      	ldr	r2, [pc, #92]	; (80035bc <HAL_I2C_MspInit+0x88>)
 8003560:	f043 0302 	orr.w	r3, r3, #2
 8003564:	6313      	str	r3, [r2, #48]	; 0x30
 8003566:	4b15      	ldr	r3, [pc, #84]	; (80035bc <HAL_I2C_MspInit+0x88>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003572:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003578:	2312      	movs	r3, #18
 800357a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003580:	2303      	movs	r3, #3
 8003582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003584:	2304      	movs	r3, #4
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003588:	f107 0314 	add.w	r3, r7, #20
 800358c:	4619      	mov	r1, r3
 800358e:	480c      	ldr	r0, [pc, #48]	; (80035c0 <HAL_I2C_MspInit+0x8c>)
 8003590:	f001 fd22 	bl	8004fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	4b08      	ldr	r3, [pc, #32]	; (80035bc <HAL_I2C_MspInit+0x88>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	4a07      	ldr	r2, [pc, #28]	; (80035bc <HAL_I2C_MspInit+0x88>)
 800359e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035a2:	6413      	str	r3, [r2, #64]	; 0x40
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_I2C_MspInit+0x88>)
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80035b0:	bf00      	nop
 80035b2:	3728      	adds	r7, #40	; 0x28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40005400 	.word	0x40005400
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40020400 	.word	0x40020400

080035c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	; 0x28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	609a      	str	r2, [r3, #8]
 80035d8:	60da      	str	r2, [r3, #12]
 80035da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a19      	ldr	r2, [pc, #100]	; (8003648 <HAL_SPI_MspInit+0x84>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d12b      	bne.n	800363e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	4b18      	ldr	r3, [pc, #96]	; (800364c <HAL_SPI_MspInit+0x88>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	4a17      	ldr	r2, [pc, #92]	; (800364c <HAL_SPI_MspInit+0x88>)
 80035f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035f4:	6453      	str	r3, [r2, #68]	; 0x44
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <HAL_SPI_MspInit+0x88>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	4b11      	ldr	r3, [pc, #68]	; (800364c <HAL_SPI_MspInit+0x88>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	4a10      	ldr	r2, [pc, #64]	; (800364c <HAL_SPI_MspInit+0x88>)
 800360c:	f043 0302 	orr.w	r3, r3, #2
 8003610:	6313      	str	r3, [r2, #48]	; 0x30
 8003612:	4b0e      	ldr	r3, [pc, #56]	; (800364c <HAL_SPI_MspInit+0x88>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800361e:	2338      	movs	r3, #56	; 0x38
 8003620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003622:	2302      	movs	r3, #2
 8003624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800362a:	2303      	movs	r3, #3
 800362c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800362e:	2305      	movs	r3, #5
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003632:	f107 0314 	add.w	r3, r7, #20
 8003636:	4619      	mov	r1, r3
 8003638:	4805      	ldr	r0, [pc, #20]	; (8003650 <HAL_SPI_MspInit+0x8c>)
 800363a:	f001 fccd 	bl	8004fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800363e:	bf00      	nop
 8003640:	3728      	adds	r7, #40	; 0x28
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40013000 	.word	0x40013000
 800364c:	40023800 	.word	0x40023800
 8003650:	40020400 	.word	0x40020400

08003654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a24      	ldr	r2, [pc, #144]	; (80036f4 <HAL_TIM_Base_MspInit+0xa0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d126      	bne.n	80036b4 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	4a22      	ldr	r2, [pc, #136]	; (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6453      	str	r3, [r2, #68]	; 0x44
 8003676:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003682:	2200      	movs	r2, #0
 8003684:	2105      	movs	r1, #5
 8003686:	2018      	movs	r0, #24
 8003688:	f001 f87a 	bl	8004780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800368c:	2018      	movs	r0, #24
 800368e:	f001 f893 	bl	80047b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8003692:	2200      	movs	r2, #0
 8003694:	2105      	movs	r1, #5
 8003696:	2019      	movs	r0, #25
 8003698:	f001 f872 	bl	8004780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800369c:	2019      	movs	r0, #25
 800369e:	f001 f88b 	bl	80047b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80036a2:	2200      	movs	r2, #0
 80036a4:	2105      	movs	r1, #5
 80036a6:	201a      	movs	r0, #26
 80036a8:	f001 f86a 	bl	8004780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80036ac:	201a      	movs	r0, #26
 80036ae:	f001 f883 	bl	80047b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80036b2:	e01a      	b.n	80036ea <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM9)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a10      	ldr	r2, [pc, #64]	; (80036fc <HAL_TIM_Base_MspInit+0xa8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d115      	bne.n	80036ea <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	4a0c      	ldr	r2, [pc, #48]	; (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036cc:	6453      	str	r3, [r2, #68]	; 0x44
 80036ce:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <HAL_TIM_Base_MspInit+0xa4>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80036da:	2200      	movs	r2, #0
 80036dc:	2105      	movs	r1, #5
 80036de:	2018      	movs	r0, #24
 80036e0:	f001 f84e 	bl	8004780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80036e4:	2018      	movs	r0, #24
 80036e6:	f001 f867 	bl	80047b8 <HAL_NVIC_EnableIRQ>
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40010000 	.word	0x40010000
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40014000 	.word	0x40014000

08003700 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	f107 030c 	add.w	r3, r7, #12
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a12      	ldr	r2, [pc, #72]	; (8003768 <HAL_TIM_MspPostInit+0x68>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d11e      	bne.n	8003760 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	4b11      	ldr	r3, [pc, #68]	; (800376c <HAL_TIM_MspPostInit+0x6c>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4a10      	ldr	r2, [pc, #64]	; (800376c <HAL_TIM_MspPostInit+0x6c>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	6313      	str	r3, [r2, #48]	; 0x30
 8003732:	4b0e      	ldr	r3, [pc, #56]	; (800376c <HAL_TIM_MspPostInit+0x6c>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	60bb      	str	r3, [r7, #8]
 800373c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_SERVO_TIM1_Pin;
 800373e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003742:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003744:	2302      	movs	r3, #2
 8003746:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374c:	2300      	movs	r3, #0
 800374e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003750:	2301      	movs	r3, #1
 8003752:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_SERVO_TIM1_GPIO_Port, &GPIO_InitStruct);
 8003754:	f107 030c 	add.w	r3, r7, #12
 8003758:	4619      	mov	r1, r3
 800375a:	4805      	ldr	r0, [pc, #20]	; (8003770 <HAL_TIM_MspPostInit+0x70>)
 800375c:	f001 fc3c 	bl	8004fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003760:	bf00      	nop
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40010000 	.word	0x40010000
 800376c:	40023800 	.word	0x40023800
 8003770:	40020000 	.word	0x40020000

08003774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08c      	sub	sp, #48	; 0x30
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800377c:	f107 031c 	add.w	r3, r7, #28
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	60da      	str	r2, [r3, #12]
 800378a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a65      	ldr	r2, [pc, #404]	; (8003928 <HAL_UART_MspInit+0x1b4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	f040 8092 	bne.w	80038bc <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003798:	2300      	movs	r3, #0
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	4b63      	ldr	r3, [pc, #396]	; (800392c <HAL_UART_MspInit+0x1b8>)
 800379e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a0:	4a62      	ldr	r2, [pc, #392]	; (800392c <HAL_UART_MspInit+0x1b8>)
 80037a2:	f043 0310 	orr.w	r3, r3, #16
 80037a6:	6453      	str	r3, [r2, #68]	; 0x44
 80037a8:	4b60      	ldr	r3, [pc, #384]	; (800392c <HAL_UART_MspInit+0x1b8>)
 80037aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	4b5c      	ldr	r3, [pc, #368]	; (800392c <HAL_UART_MspInit+0x1b8>)
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	4a5b      	ldr	r2, [pc, #364]	; (800392c <HAL_UART_MspInit+0x1b8>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6313      	str	r3, [r2, #48]	; 0x30
 80037c4:	4b59      	ldr	r3, [pc, #356]	; (800392c <HAL_UART_MspInit+0x1b8>)
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ONEWIRE_TEMP_Pin;
 80037d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037d6:	2312      	movs	r3, #18
 80037d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037de:	2303      	movs	r3, #3
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037e2:	2307      	movs	r3, #7
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ONEWIRE_TEMP_GPIO_Port, &GPIO_InitStruct);
 80037e6:	f107 031c 	add.w	r3, r7, #28
 80037ea:	4619      	mov	r1, r3
 80037ec:	4850      	ldr	r0, [pc, #320]	; (8003930 <HAL_UART_MspInit+0x1bc>)
 80037ee:	f001 fbf3 	bl	8004fd8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80037f2:	4b50      	ldr	r3, [pc, #320]	; (8003934 <HAL_UART_MspInit+0x1c0>)
 80037f4:	4a50      	ldr	r2, [pc, #320]	; (8003938 <HAL_UART_MspInit+0x1c4>)
 80037f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80037f8:	4b4e      	ldr	r3, [pc, #312]	; (8003934 <HAL_UART_MspInit+0x1c0>)
 80037fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003800:	4b4c      	ldr	r3, [pc, #304]	; (8003934 <HAL_UART_MspInit+0x1c0>)
 8003802:	2200      	movs	r2, #0
 8003804:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003806:	4b4b      	ldr	r3, [pc, #300]	; (8003934 <HAL_UART_MspInit+0x1c0>)
 8003808:	2200      	movs	r2, #0
 800380a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800380c:	4b49      	ldr	r3, [pc, #292]	; (8003934 <HAL_UART_MspInit+0x1c0>)
 800380e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003812:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003814:	4b47      	ldr	r3, [pc, #284]	; (8003934 <HAL_UART_MspInit+0x1c0>)
 8003816:	2200      	movs	r2, #0
 8003818:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800381a:	4b46      	ldr	r3, [pc, #280]	; (8003934 <HAL_UART_MspInit+0x1c0>)
 800381c:	2200      	movs	r2, #0
 800381e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003820:	4b44      	ldr	r3, [pc, #272]	; (8003934 <HAL_UART_MspInit+0x1c0>)
 8003822:	2200      	movs	r2, #0
 8003824:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003826:	4b43      	ldr	r3, [pc, #268]	; (8003934 <HAL_UART_MspInit+0x1c0>)
 8003828:	2200      	movs	r2, #0
 800382a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800382c:	4b41      	ldr	r3, [pc, #260]	; (8003934 <HAL_UART_MspInit+0x1c0>)
 800382e:	2200      	movs	r2, #0
 8003830:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003832:	4840      	ldr	r0, [pc, #256]	; (8003934 <HAL_UART_MspInit+0x1c0>)
 8003834:	f000 ffce 	bl	80047d4 <HAL_DMA_Init>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800383e:	f7ff fb09 	bl	8002e54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a3b      	ldr	r2, [pc, #236]	; (8003934 <HAL_UART_MspInit+0x1c0>)
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
 8003848:	4a3a      	ldr	r2, [pc, #232]	; (8003934 <HAL_UART_MspInit+0x1c0>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800384e:	4b3b      	ldr	r3, [pc, #236]	; (800393c <HAL_UART_MspInit+0x1c8>)
 8003850:	4a3b      	ldr	r2, [pc, #236]	; (8003940 <HAL_UART_MspInit+0x1cc>)
 8003852:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003854:	4b39      	ldr	r3, [pc, #228]	; (800393c <HAL_UART_MspInit+0x1c8>)
 8003856:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800385a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800385c:	4b37      	ldr	r3, [pc, #220]	; (800393c <HAL_UART_MspInit+0x1c8>)
 800385e:	2240      	movs	r2, #64	; 0x40
 8003860:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003862:	4b36      	ldr	r3, [pc, #216]	; (800393c <HAL_UART_MspInit+0x1c8>)
 8003864:	2200      	movs	r2, #0
 8003866:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003868:	4b34      	ldr	r3, [pc, #208]	; (800393c <HAL_UART_MspInit+0x1c8>)
 800386a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800386e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003870:	4b32      	ldr	r3, [pc, #200]	; (800393c <HAL_UART_MspInit+0x1c8>)
 8003872:	2200      	movs	r2, #0
 8003874:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003876:	4b31      	ldr	r3, [pc, #196]	; (800393c <HAL_UART_MspInit+0x1c8>)
 8003878:	2200      	movs	r2, #0
 800387a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800387c:	4b2f      	ldr	r3, [pc, #188]	; (800393c <HAL_UART_MspInit+0x1c8>)
 800387e:	2200      	movs	r2, #0
 8003880:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003882:	4b2e      	ldr	r3, [pc, #184]	; (800393c <HAL_UART_MspInit+0x1c8>)
 8003884:	2200      	movs	r2, #0
 8003886:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003888:	4b2c      	ldr	r3, [pc, #176]	; (800393c <HAL_UART_MspInit+0x1c8>)
 800388a:	2200      	movs	r2, #0
 800388c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800388e:	482b      	ldr	r0, [pc, #172]	; (800393c <HAL_UART_MspInit+0x1c8>)
 8003890:	f000 ffa0 	bl	80047d4 <HAL_DMA_Init>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800389a:	f7ff fadb 	bl	8002e54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a26      	ldr	r2, [pc, #152]	; (800393c <HAL_UART_MspInit+0x1c8>)
 80038a2:	635a      	str	r2, [r3, #52]	; 0x34
 80038a4:	4a25      	ldr	r2, [pc, #148]	; (800393c <HAL_UART_MspInit+0x1c8>)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80038aa:	2200      	movs	r2, #0
 80038ac:	2105      	movs	r1, #5
 80038ae:	2025      	movs	r0, #37	; 0x25
 80038b0:	f000 ff66 	bl	8004780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038b4:	2025      	movs	r0, #37	; 0x25
 80038b6:	f000 ff7f 	bl	80047b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038ba:	e030      	b.n	800391e <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a20      	ldr	r2, [pc, #128]	; (8003944 <HAL_UART_MspInit+0x1d0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d12b      	bne.n	800391e <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	4b18      	ldr	r3, [pc, #96]	; (800392c <HAL_UART_MspInit+0x1b8>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	4a17      	ldr	r2, [pc, #92]	; (800392c <HAL_UART_MspInit+0x1b8>)
 80038d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d4:	6413      	str	r3, [r2, #64]	; 0x40
 80038d6:	4b15      	ldr	r3, [pc, #84]	; (800392c <HAL_UART_MspInit+0x1b8>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	4b11      	ldr	r3, [pc, #68]	; (800392c <HAL_UART_MspInit+0x1b8>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	4a10      	ldr	r2, [pc, #64]	; (800392c <HAL_UART_MspInit+0x1b8>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	6313      	str	r3, [r2, #48]	; 0x30
 80038f2:	4b0e      	ldr	r3, [pc, #56]	; (800392c <HAL_UART_MspInit+0x1b8>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80038fe:	230c      	movs	r3, #12
 8003900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003902:	2302      	movs	r3, #2
 8003904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003906:	2300      	movs	r3, #0
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800390a:	2303      	movs	r3, #3
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800390e:	2307      	movs	r3, #7
 8003910:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003912:	f107 031c 	add.w	r3, r7, #28
 8003916:	4619      	mov	r1, r3
 8003918:	4805      	ldr	r0, [pc, #20]	; (8003930 <HAL_UART_MspInit+0x1bc>)
 800391a:	f001 fb5d 	bl	8004fd8 <HAL_GPIO_Init>
}
 800391e:	bf00      	nop
 8003920:	3730      	adds	r7, #48	; 0x30
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40011000 	.word	0x40011000
 800392c:	40023800 	.word	0x40023800
 8003930:	40020000 	.word	0x40020000
 8003934:	200067e0 	.word	0x200067e0
 8003938:	40026440 	.word	0x40026440
 800393c:	20006734 	.word	0x20006734
 8003940:	400264b8 	.word	0x400264b8
 8003944:	40004400 	.word	0x40004400

08003948 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08c      	sub	sp, #48	; 0x30
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8003958:	2200      	movs	r2, #0
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	2032      	movs	r0, #50	; 0x32
 800395e:	f000 ff0f 	bl	8004780 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003962:	2032      	movs	r0, #50	; 0x32
 8003964:	f000 ff28 	bl	80047b8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	4b1f      	ldr	r3, [pc, #124]	; (80039ec <HAL_InitTick+0xa4>)
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	4a1e      	ldr	r2, [pc, #120]	; (80039ec <HAL_InitTick+0xa4>)
 8003972:	f043 0308 	orr.w	r3, r3, #8
 8003976:	6413      	str	r3, [r2, #64]	; 0x40
 8003978:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <HAL_InitTick+0xa4>)
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003984:	f107 0210 	add.w	r2, r7, #16
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f002 fee0 	bl	8006754 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003994:	f002 feb6 	bl	8006704 <HAL_RCC_GetPCLK1Freq>
 8003998:	4603      	mov	r3, r0
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800399e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a0:	4a13      	ldr	r2, [pc, #76]	; (80039f0 <HAL_InitTick+0xa8>)
 80039a2:	fba2 2303 	umull	r2, r3, r2, r3
 80039a6:	0c9b      	lsrs	r3, r3, #18
 80039a8:	3b01      	subs	r3, #1
 80039aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <HAL_InitTick+0xac>)
 80039ae:	4a12      	ldr	r2, [pc, #72]	; (80039f8 <HAL_InitTick+0xb0>)
 80039b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <HAL_InitTick+0xac>)
 80039b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039b8:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80039ba:	4a0e      	ldr	r2, [pc, #56]	; (80039f4 <HAL_InitTick+0xac>)
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <HAL_InitTick+0xac>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_InitTick+0xac>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80039cc:	4809      	ldr	r0, [pc, #36]	; (80039f4 <HAL_InitTick+0xac>)
 80039ce:	f002 ff7c 	bl	80068ca <HAL_TIM_Base_Init>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d104      	bne.n	80039e2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80039d8:	4806      	ldr	r0, [pc, #24]	; (80039f4 <HAL_InitTick+0xac>)
 80039da:	f003 f81f 	bl	8006a1c <HAL_TIM_Base_Start_IT>
 80039de:	4603      	mov	r3, r0
 80039e0:	e000      	b.n	80039e4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3730      	adds	r7, #48	; 0x30
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40023800 	.word	0x40023800
 80039f0:	431bde83 	.word	0x431bde83
 80039f4:	20006a34 	.word	0x20006a34
 80039f8:	40000c00 	.word	0x40000c00

080039fc <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003a00:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <SDTimer_Handler+0x40>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d006      	beq.n	8003a18 <SDTimer_Handler+0x1c>
    Timer1--;
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <SDTimer_Handler+0x40>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <SDTimer_Handler+0x40>)
 8003a16:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8003a18:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <SDTimer_Handler+0x44>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d006      	beq.n	8003a30 <SDTimer_Handler+0x34>
    Timer2--;
 8003a22:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <SDTimer_Handler+0x44>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <SDTimer_Handler+0x44>)
 8003a2e:	701a      	strb	r2, [r3, #0]
}
 8003a30:	bf00      	nop
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	20006a7d 	.word	0x20006a7d
 8003a40:	20006a7c 	.word	0x20006a7c

08003a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a48:	e7fe      	b.n	8003a48 <NMI_Handler+0x4>

08003a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a4e:	e7fe      	b.n	8003a4e <HardFault_Handler+0x4>

08003a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a54:	e7fe      	b.n	8003a54 <MemManage_Handler+0x4>

08003a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a56:	b480      	push	{r7}
 8003a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a5a:	e7fe      	b.n	8003a5a <BusFault_Handler+0x4>

08003a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a60:	e7fe      	b.n	8003a60 <UsageFault_Handler+0x4>

08003a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a66:	bf00      	nop
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a74:	4803      	ldr	r0, [pc, #12]	; (8003a84 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003a76:	f003 f88c 	bl	8006b92 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8003a7a:	4803      	ldr	r0, [pc, #12]	; (8003a88 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003a7c:	f003 f889 	bl	8006b92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003a80:	bf00      	nop
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	200068e4 	.word	0x200068e4
 8003a88:	20006930 	.word	0x20006930

08003a8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a90:	4802      	ldr	r0, [pc, #8]	; (8003a9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003a92:	f003 f87e 	bl	8006b92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	200068e4 	.word	0x200068e4

08003aa0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003aa4:	4802      	ldr	r0, [pc, #8]	; (8003ab0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003aa6:	f003 f874 	bl	8006b92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	200068e4 	.word	0x200068e4

08003ab4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ab8:	4802      	ldr	r0, [pc, #8]	; (8003ac4 <USART1_IRQHandler+0x10>)
 8003aba:	f004 f881 	bl	8007bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20006840 	.word	0x20006840

08003ac8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	FatFsCnt++;
 8003acc:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <TIM5_IRQHandler+0x30>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <TIM5_IRQHandler+0x30>)
 8003ad8:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <TIM5_IRQHandler+0x30>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b09      	cmp	r3, #9
 8003ae2:	d904      	bls.n	8003aee <TIM5_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 8003ae4:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <TIM5_IRQHandler+0x30>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8003aea:	f7ff ff87 	bl	80039fc <SDTimer_Handler>
	}
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003aee:	4803      	ldr	r0, [pc, #12]	; (8003afc <TIM5_IRQHandler+0x34>)
 8003af0:	f003 f84f 	bl	8006b92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003af4:	bf00      	nop
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	2000088a 	.word	0x2000088a
 8003afc:	20006a34 	.word	0x20006a34

08003b00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b04:	4802      	ldr	r0, [pc, #8]	; (8003b10 <DMA2_Stream0_IRQHandler+0x10>)
 8003b06:	f000 fffd 	bl	8004b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20006884 	.word	0x20006884

08003b14 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003b18:	4802      	ldr	r0, [pc, #8]	; (8003b24 <DMA2_Stream2_IRQHandler+0x10>)
 8003b1a:	f000 fff3 	bl	8004b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	200067e0 	.word	0x200067e0

08003b28 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003b2c:	4802      	ldr	r0, [pc, #8]	; (8003b38 <DMA2_Stream7_IRQHandler+0x10>)
 8003b2e:	f000 ffe9 	bl	8004b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20006734 	.word	0x20006734

08003b3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
	return 1;
 8003b40:	2301      	movs	r3, #1
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <_kill>:

int _kill(int pid, int sig)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b56:	f00a fc39 	bl	800e3cc <__errno>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2216      	movs	r2, #22
 8003b5e:	601a      	str	r2, [r3, #0]
	return -1;
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <_exit>:

void _exit (int status)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b74:	f04f 31ff 	mov.w	r1, #4294967295
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff ffe7 	bl	8003b4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b7e:	e7fe      	b.n	8003b7e <_exit+0x12>

08003b80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	e00a      	b.n	8003ba8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b92:	f3af 8000 	nop.w
 8003b96:	4601      	mov	r1, r0
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	60ba      	str	r2, [r7, #8]
 8003b9e:	b2ca      	uxtb	r2, r1
 8003ba0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	dbf0      	blt.n	8003b92 <_read+0x12>
	}

return len;
 8003bb0:	687b      	ldr	r3, [r7, #4]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b086      	sub	sp, #24
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	e009      	b.n	8003be0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	60ba      	str	r2, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	dbf1      	blt.n	8003bcc <_write+0x12>
	}
	return len;
 8003be8:	687b      	ldr	r3, [r7, #4]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <_close>:

int _close(int file)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
	return -1;
 8003bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c1a:	605a      	str	r2, [r3, #4]
	return 0;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <_isatty>:

int _isatty(int file)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
	return 1;
 8003c32:	2301      	movs	r3, #1
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
	return 0;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
	...

08003c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c64:	4a14      	ldr	r2, [pc, #80]	; (8003cb8 <_sbrk+0x5c>)
 8003c66:	4b15      	ldr	r3, [pc, #84]	; (8003cbc <_sbrk+0x60>)
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c70:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <_sbrk+0x64>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <_sbrk+0x64>)
 8003c7a:	4a12      	ldr	r2, [pc, #72]	; (8003cc4 <_sbrk+0x68>)
 8003c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c7e:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <_sbrk+0x64>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4413      	add	r3, r2
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d207      	bcs.n	8003c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c8c:	f00a fb9e 	bl	800e3cc <__errno>
 8003c90:	4603      	mov	r3, r0
 8003c92:	220c      	movs	r2, #12
 8003c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c96:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9a:	e009      	b.n	8003cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c9c:	4b08      	ldr	r3, [pc, #32]	; (8003cc0 <_sbrk+0x64>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ca2:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <_sbrk+0x64>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4413      	add	r3, r2
 8003caa:	4a05      	ldr	r2, [pc, #20]	; (8003cc0 <_sbrk+0x64>)
 8003cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cae:	68fb      	ldr	r3, [r7, #12]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20020000 	.word	0x20020000
 8003cbc:	00000800 	.word	0x00000800
 8003cc0:	2000088c 	.word	0x2000088c
 8003cc4:	20008b48 	.word	0x20008b48

08003cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <SystemInit+0x20>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	4a05      	ldr	r2, [pc, #20]	; (8003ce8 <SystemInit+0x20>)
 8003cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cf0:	480d      	ldr	r0, [pc, #52]	; (8003d28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cf2:	490e      	ldr	r1, [pc, #56]	; (8003d2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003cf4:	4a0e      	ldr	r2, [pc, #56]	; (8003d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cf8:	e002      	b.n	8003d00 <LoopCopyDataInit>

08003cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cfe:	3304      	adds	r3, #4

08003d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d04:	d3f9      	bcc.n	8003cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d06:	4a0b      	ldr	r2, [pc, #44]	; (8003d34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d08:	4c0b      	ldr	r4, [pc, #44]	; (8003d38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d0c:	e001      	b.n	8003d12 <LoopFillZerobss>

08003d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d10:	3204      	adds	r2, #4

08003d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d14:	d3fb      	bcc.n	8003d0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d16:	f7ff ffd7 	bl	8003cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d1a:	f00a fb5d 	bl	800e3d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d1e:	f7fe fcad 	bl	800267c <main>
  bx  lr    
 8003d22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d2c:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8003d30:	08013074 	.word	0x08013074
  ldr r2, =_sbss
 8003d34:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8003d38:	20008b44 	.word	0x20008b44

08003d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d3c:	e7fe      	b.n	8003d3c <ADC_IRQHandler>
	...

08003d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d44:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <HAL_Init+0x40>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a0d      	ldr	r2, [pc, #52]	; (8003d80 <HAL_Init+0x40>)
 8003d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_Init+0x40>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <HAL_Init+0x40>)
 8003d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d5c:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <HAL_Init+0x40>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a07      	ldr	r2, [pc, #28]	; (8003d80 <HAL_Init+0x40>)
 8003d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d68:	2003      	movs	r0, #3
 8003d6a:	f000 fcfe 	bl	800476a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d6e:	200f      	movs	r0, #15
 8003d70:	f7ff fdea 	bl	8003948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d74:	f7ff fb1e 	bl	80033b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023c00 	.word	0x40023c00

08003d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <HAL_IncTick+0x20>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <HAL_IncTick+0x24>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4413      	add	r3, r2
 8003d94:	4a04      	ldr	r2, [pc, #16]	; (8003da8 <HAL_IncTick+0x24>)
 8003d96:	6013      	str	r3, [r2, #0]
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000018 	.word	0x20000018
 8003da8:	20006a80 	.word	0x20006a80

08003dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return uwTick;
 8003db0:	4b03      	ldr	r3, [pc, #12]	; (8003dc0 <HAL_GetTick+0x14>)
 8003db2:	681b      	ldr	r3, [r3, #0]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20006a80 	.word	0x20006a80

08003dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dcc:	f7ff ffee 	bl	8003dac <HAL_GetTick>
 8003dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ddc:	d005      	beq.n	8003dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dde:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <HAL_Delay+0x44>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4413      	add	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003dea:	bf00      	nop
 8003dec:	f7ff ffde 	bl	8003dac <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d8f7      	bhi.n	8003dec <HAL_Delay+0x28>
  {
  }
}
 8003dfc:	bf00      	nop
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000018 	.word	0x20000018

08003e0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e033      	b.n	8003e8a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff faee 	bl	800340c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d118      	bne.n	8003e7c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e52:	f023 0302 	bic.w	r3, r3, #2
 8003e56:	f043 0202 	orr.w	r2, r3, #2
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fa58 	bl	8004314 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f023 0303 	bic.w	r3, r3, #3
 8003e72:	f043 0201 	orr.w	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40
 8003e7a:	e001      	b.n	8003e80 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <HAL_ADC_Start_DMA+0x1e>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e0ce      	b.n	8004050 <HAL_ADC_Start_DMA+0x1bc>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d018      	beq.n	8003efa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ed8:	4b5f      	ldr	r3, [pc, #380]	; (8004058 <HAL_ADC_Start_DMA+0x1c4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a5f      	ldr	r2, [pc, #380]	; (800405c <HAL_ADC_Start_DMA+0x1c8>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	0c9a      	lsrs	r2, r3, #18
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	4413      	add	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003eec:	e002      	b.n	8003ef4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f9      	bne.n	8003eee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f08:	d107      	bne.n	8003f1a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f18:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	f040 8086 	bne.w	8004036 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d007      	beq.n	8003f5c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f68:	d106      	bne.n	8003f78 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	f023 0206 	bic.w	r2, r3, #6
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	645a      	str	r2, [r3, #68]	; 0x44
 8003f76:	e002      	b.n	8003f7e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f86:	4b36      	ldr	r3, [pc, #216]	; (8004060 <HAL_ADC_Start_DMA+0x1cc>)
 8003f88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	4a35      	ldr	r2, [pc, #212]	; (8004064 <HAL_ADC_Start_DMA+0x1d0>)
 8003f90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	4a34      	ldr	r2, [pc, #208]	; (8004068 <HAL_ADC_Start_DMA+0x1d4>)
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	4a33      	ldr	r2, [pc, #204]	; (800406c <HAL_ADC_Start_DMA+0x1d8>)
 8003fa0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003faa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003fba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	334c      	adds	r3, #76	; 0x4c
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f000 fca8 	bl	8004930 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10f      	bne.n	800400c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d129      	bne.n	800404e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004008:	609a      	str	r2, [r3, #8]
 800400a:	e020      	b.n	800404e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a17      	ldr	r2, [pc, #92]	; (8004070 <HAL_ADC_Start_DMA+0x1dc>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d11b      	bne.n	800404e <HAL_ADC_Start_DMA+0x1ba>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d114      	bne.n	800404e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	e00b      	b.n	800404e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f043 0210 	orr.w	r2, r3, #16
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	f043 0201 	orr.w	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000010 	.word	0x20000010
 800405c:	431bde83 	.word	0x431bde83
 8004060:	40012300 	.word	0x40012300
 8004064:	0800450d 	.word	0x0800450d
 8004068:	080045c7 	.word	0x080045c7
 800406c:	080045e3 	.word	0x080045e3
 8004070:	40012000 	.word	0x40012000

08004074 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x1c>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e113      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x244>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b09      	cmp	r3, #9
 80040da:	d925      	bls.n	8004128 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68d9      	ldr	r1, [r3, #12]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	461a      	mov	r2, r3
 80040ea:	4613      	mov	r3, r2
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	4413      	add	r3, r2
 80040f0:	3b1e      	subs	r3, #30
 80040f2:	2207      	movs	r2, #7
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43da      	mvns	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	400a      	ands	r2, r1
 8004100:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68d9      	ldr	r1, [r3, #12]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	b29b      	uxth	r3, r3
 8004112:	4618      	mov	r0, r3
 8004114:	4603      	mov	r3, r0
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	4403      	add	r3, r0
 800411a:	3b1e      	subs	r3, #30
 800411c:	409a      	lsls	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	60da      	str	r2, [r3, #12]
 8004126:	e022      	b.n	800416e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6919      	ldr	r1, [r3, #16]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	461a      	mov	r2, r3
 8004136:	4613      	mov	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4413      	add	r3, r2
 800413c:	2207      	movs	r2, #7
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43da      	mvns	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	400a      	ands	r2, r1
 800414a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6919      	ldr	r1, [r3, #16]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	b29b      	uxth	r3, r3
 800415c:	4618      	mov	r0, r3
 800415e:	4603      	mov	r3, r0
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	4403      	add	r3, r0
 8004164:	409a      	lsls	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b06      	cmp	r3, #6
 8004174:	d824      	bhi.n	80041c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	3b05      	subs	r3, #5
 8004188:	221f      	movs	r2, #31
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43da      	mvns	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	400a      	ands	r2, r1
 8004196:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	4618      	mov	r0, r3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	3b05      	subs	r3, #5
 80041b2:	fa00 f203 	lsl.w	r2, r0, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	635a      	str	r2, [r3, #52]	; 0x34
 80041be:	e04c      	b.n	800425a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b0c      	cmp	r3, #12
 80041c6:	d824      	bhi.n	8004212 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	3b23      	subs	r3, #35	; 0x23
 80041da:	221f      	movs	r2, #31
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43da      	mvns	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	400a      	ands	r2, r1
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	4618      	mov	r0, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	3b23      	subs	r3, #35	; 0x23
 8004204:	fa00 f203 	lsl.w	r2, r0, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	631a      	str	r2, [r3, #48]	; 0x30
 8004210:	e023      	b.n	800425a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	3b41      	subs	r3, #65	; 0x41
 8004224:	221f      	movs	r2, #31
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43da      	mvns	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	400a      	ands	r2, r1
 8004232:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	4618      	mov	r0, r3
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	3b41      	subs	r3, #65	; 0x41
 800424e:	fa00 f203 	lsl.w	r2, r0, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800425a:	4b29      	ldr	r3, [pc, #164]	; (8004300 <HAL_ADC_ConfigChannel+0x250>)
 800425c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a28      	ldr	r2, [pc, #160]	; (8004304 <HAL_ADC_ConfigChannel+0x254>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d10f      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x1d8>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b12      	cmp	r3, #18
 800426e:	d10b      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <HAL_ADC_ConfigChannel+0x254>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d12b      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x23a>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1c      	ldr	r2, [pc, #112]	; (8004308 <HAL_ADC_ConfigChannel+0x258>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <HAL_ADC_ConfigChannel+0x1f4>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b11      	cmp	r3, #17
 80042a2:	d122      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a11      	ldr	r2, [pc, #68]	; (8004308 <HAL_ADC_ConfigChannel+0x258>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d111      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <HAL_ADC_ConfigChannel+0x25c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a11      	ldr	r2, [pc, #68]	; (8004310 <HAL_ADC_ConfigChannel+0x260>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	0c9a      	lsrs	r2, r3, #18
 80042d2:	4613      	mov	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042dc:	e002      	b.n	80042e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f9      	bne.n	80042de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	40012300 	.word	0x40012300
 8004304:	40012000 	.word	0x40012000
 8004308:	10000012 	.word	0x10000012
 800430c:	20000010 	.word	0x20000010
 8004310:	431bde83 	.word	0x431bde83

08004314 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800431c:	4b79      	ldr	r3, [pc, #484]	; (8004504 <ADC_Init+0x1f0>)
 800431e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	431a      	orrs	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004348:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6859      	ldr	r1, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	021a      	lsls	r2, r3, #8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800436c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6859      	ldr	r1, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800438e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6899      	ldr	r1, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	4a58      	ldr	r2, [pc, #352]	; (8004508 <ADC_Init+0x1f4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d022      	beq.n	80043f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6899      	ldr	r1, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6899      	ldr	r1, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	609a      	str	r2, [r3, #8]
 80043f0:	e00f      	b.n	8004412 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004410:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0202 	bic.w	r2, r2, #2
 8004420:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6899      	ldr	r1, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	7e1b      	ldrb	r3, [r3, #24]
 800442c:	005a      	lsls	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01b      	beq.n	8004478 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800444e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800445e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6859      	ldr	r1, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	3b01      	subs	r3, #1
 800446c:	035a      	lsls	r2, r3, #13
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	e007      	b.n	8004488 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004486:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004496:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	051a      	lsls	r2, r3, #20
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6899      	ldr	r1, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044ca:	025a      	lsls	r2, r3, #9
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6899      	ldr	r1, [r3, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	029a      	lsls	r2, r3, #10
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	609a      	str	r2, [r3, #8]
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	40012300 	.word	0x40012300
 8004508:	0f000001 	.word	0x0f000001

0800450c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004522:	2b00      	cmp	r3, #0
 8004524:	d13c      	bne.n	80045a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d12b      	bne.n	8004598 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004544:	2b00      	cmp	r3, #0
 8004546:	d127      	bne.n	8004598 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004552:	2b00      	cmp	r3, #0
 8004554:	d006      	beq.n	8004564 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004560:	2b00      	cmp	r3, #0
 8004562:	d119      	bne.n	8004598 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0220 	bic.w	r2, r2, #32
 8004572:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d105      	bne.n	8004598 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	f043 0201 	orr.w	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7ff fd6b 	bl	8004074 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800459e:	e00e      	b.n	80045be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f7ff fd75 	bl	800409c <HAL_ADC_ErrorCallback>
}
 80045b2:	e004      	b.n	80045be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	4798      	blx	r3
}
 80045be:	bf00      	nop
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f7ff fd57 	bl	8004088 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045da:	bf00      	nop
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2240      	movs	r2, #64	; 0x40
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	f043 0204 	orr.w	r2, r3, #4
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f7ff fd4a 	bl	800409c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <__NVIC_SetPriorityGrouping+0x44>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800462c:	4013      	ands	r3, r2
 800462e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800463c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004642:	4a04      	ldr	r2, [pc, #16]	; (8004654 <__NVIC_SetPriorityGrouping+0x44>)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	60d3      	str	r3, [r2, #12]
}
 8004648:	bf00      	nop
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	e000ed00 	.word	0xe000ed00

08004658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <__NVIC_GetPriorityGrouping+0x18>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	0a1b      	lsrs	r3, r3, #8
 8004662:	f003 0307 	and.w	r3, r3, #7
}
 8004666:	4618      	mov	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	e000ed00 	.word	0xe000ed00

08004674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	4603      	mov	r3, r0
 800467c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	2b00      	cmp	r3, #0
 8004684:	db0b      	blt.n	800469e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	f003 021f 	and.w	r2, r3, #31
 800468c:	4907      	ldr	r1, [pc, #28]	; (80046ac <__NVIC_EnableIRQ+0x38>)
 800468e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	2001      	movs	r0, #1
 8004696:	fa00 f202 	lsl.w	r2, r0, r2
 800469a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	e000e100 	.word	0xe000e100

080046b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	6039      	str	r1, [r7, #0]
 80046ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	db0a      	blt.n	80046da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	490c      	ldr	r1, [pc, #48]	; (80046fc <__NVIC_SetPriority+0x4c>)
 80046ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ce:	0112      	lsls	r2, r2, #4
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	440b      	add	r3, r1
 80046d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046d8:	e00a      	b.n	80046f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	4908      	ldr	r1, [pc, #32]	; (8004700 <__NVIC_SetPriority+0x50>)
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	3b04      	subs	r3, #4
 80046e8:	0112      	lsls	r2, r2, #4
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	440b      	add	r3, r1
 80046ee:	761a      	strb	r2, [r3, #24]
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	e000e100 	.word	0xe000e100
 8004700:	e000ed00 	.word	0xe000ed00

08004704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004704:	b480      	push	{r7}
 8004706:	b089      	sub	sp, #36	; 0x24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f1c3 0307 	rsb	r3, r3, #7
 800471e:	2b04      	cmp	r3, #4
 8004720:	bf28      	it	cs
 8004722:	2304      	movcs	r3, #4
 8004724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	3304      	adds	r3, #4
 800472a:	2b06      	cmp	r3, #6
 800472c:	d902      	bls.n	8004734 <NVIC_EncodePriority+0x30>
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	3b03      	subs	r3, #3
 8004732:	e000      	b.n	8004736 <NVIC_EncodePriority+0x32>
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004738:	f04f 32ff 	mov.w	r2, #4294967295
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43da      	mvns	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	401a      	ands	r2, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800474c:	f04f 31ff 	mov.w	r1, #4294967295
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	fa01 f303 	lsl.w	r3, r1, r3
 8004756:	43d9      	mvns	r1, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800475c:	4313      	orrs	r3, r2
         );
}
 800475e:	4618      	mov	r0, r3
 8004760:	3724      	adds	r7, #36	; 0x24
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b082      	sub	sp, #8
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff ff4c 	bl	8004610 <__NVIC_SetPriorityGrouping>
}
 8004778:	bf00      	nop
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004792:	f7ff ff61 	bl	8004658 <__NVIC_GetPriorityGrouping>
 8004796:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	6978      	ldr	r0, [r7, #20]
 800479e:	f7ff ffb1 	bl	8004704 <NVIC_EncodePriority>
 80047a2:	4602      	mov	r2, r0
 80047a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047a8:	4611      	mov	r1, r2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff ff80 	bl	80046b0 <__NVIC_SetPriority>
}
 80047b0:	bf00      	nop
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff ff54 	bl	8004674 <__NVIC_EnableIRQ>
}
 80047cc:	bf00      	nop
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047e0:	f7ff fae4 	bl	8003dac <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e099      	b.n	8004924 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004810:	e00f      	b.n	8004832 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004812:	f7ff facb 	bl	8003dac <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b05      	cmp	r3, #5
 800481e:	d908      	bls.n	8004832 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2203      	movs	r2, #3
 800482a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e078      	b.n	8004924 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e8      	bne.n	8004812 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4b38      	ldr	r3, [pc, #224]	; (800492c <HAL_DMA_Init+0x158>)
 800484c:	4013      	ands	r3, r2
 800484e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800485e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800486a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004876:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	4313      	orrs	r3, r2
 8004882:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	2b04      	cmp	r3, #4
 800488a:	d107      	bne.n	800489c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	4313      	orrs	r3, r2
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f023 0307 	bic.w	r3, r3, #7
 80048b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d117      	bne.n	80048f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00e      	beq.n	80048f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fb01 	bl	8004ee0 <DMA_CheckFifoParam>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d008      	beq.n	80048f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2240      	movs	r2, #64	; 0x40
 80048e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048f2:	2301      	movs	r3, #1
 80048f4:	e016      	b.n	8004924 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fab8 	bl	8004e74 <DMA_CalcBaseAndBitshift>
 8004904:	4603      	mov	r3, r0
 8004906:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490c:	223f      	movs	r2, #63	; 0x3f
 800490e:	409a      	lsls	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	f010803f 	.word	0xf010803f

08004930 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004946:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_DMA_Start_IT+0x26>
 8004952:	2302      	movs	r3, #2
 8004954:	e040      	b.n	80049d8 <HAL_DMA_Start_IT+0xa8>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b01      	cmp	r3, #1
 8004968:	d12f      	bne.n	80049ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2202      	movs	r2, #2
 800496e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 fa4a 	bl	8004e18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004988:	223f      	movs	r2, #63	; 0x3f
 800498a:	409a      	lsls	r2, r3
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0216 	orr.w	r2, r2, #22
 800499e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0208 	orr.w	r2, r2, #8
 80049b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	e005      	b.n	80049d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049d2:	2302      	movs	r3, #2
 80049d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049ee:	f7ff f9dd 	bl	8003dac <HAL_GetTick>
 80049f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d008      	beq.n	8004a12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2280      	movs	r2, #128	; 0x80
 8004a04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e052      	b.n	8004ab8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0216 	bic.w	r2, r2, #22
 8004a20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695a      	ldr	r2, [r3, #20]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d103      	bne.n	8004a42 <HAL_DMA_Abort+0x62>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0208 	bic.w	r2, r2, #8
 8004a50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a62:	e013      	b.n	8004a8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a64:	f7ff f9a2 	bl	8003dac <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b05      	cmp	r3, #5
 8004a70:	d90c      	bls.n	8004a8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2220      	movs	r2, #32
 8004a76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2203      	movs	r2, #3
 8004a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e015      	b.n	8004ab8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e4      	bne.n	8004a64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9e:	223f      	movs	r2, #63	; 0x3f
 8004aa0:	409a      	lsls	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d004      	beq.n	8004ade <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2280      	movs	r2, #128	; 0x80
 8004ad8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e00c      	b.n	8004af8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2205      	movs	r2, #5
 8004ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0201 	bic.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b10:	4b92      	ldr	r3, [pc, #584]	; (8004d5c <HAL_DMA_IRQHandler+0x258>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a92      	ldr	r2, [pc, #584]	; (8004d60 <HAL_DMA_IRQHandler+0x25c>)
 8004b16:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1a:	0a9b      	lsrs	r3, r3, #10
 8004b1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2e:	2208      	movs	r2, #8
 8004b30:	409a      	lsls	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d01a      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d013      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0204 	bic.w	r2, r2, #4
 8004b56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5c:	2208      	movs	r2, #8
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b68:	f043 0201 	orr.w	r2, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	2201      	movs	r2, #1
 8004b76:	409a      	lsls	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d012      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00b      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b92:	2201      	movs	r2, #1
 8004b94:	409a      	lsls	r2, r3
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9e:	f043 0202 	orr.w	r2, r3, #2
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004baa:	2204      	movs	r2, #4
 8004bac:	409a      	lsls	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d012      	beq.n	8004bdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00b      	beq.n	8004bdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc8:	2204      	movs	r2, #4
 8004bca:	409a      	lsls	r2, r3
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd4:	f043 0204 	orr.w	r2, r3, #4
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be0:	2210      	movs	r2, #16
 8004be2:	409a      	lsls	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d043      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d03c      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfe:	2210      	movs	r2, #16
 8004c00:	409a      	lsls	r2, r3
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d018      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d108      	bne.n	8004c34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d024      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	4798      	blx	r3
 8004c32:	e01f      	b.n	8004c74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d01b      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	4798      	blx	r3
 8004c44:	e016      	b.n	8004c74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d107      	bne.n	8004c64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0208 	bic.w	r2, r2, #8
 8004c62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c78:	2220      	movs	r2, #32
 8004c7a:	409a      	lsls	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 808e 	beq.w	8004da2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 8086 	beq.w	8004da2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b05      	cmp	r3, #5
 8004cac:	d136      	bne.n	8004d1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0216 	bic.w	r2, r2, #22
 8004cbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695a      	ldr	r2, [r3, #20]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ccc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d103      	bne.n	8004cde <HAL_DMA_IRQHandler+0x1da>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d007      	beq.n	8004cee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0208 	bic.w	r2, r2, #8
 8004cec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf2:	223f      	movs	r2, #63	; 0x3f
 8004cf4:	409a      	lsls	r2, r3
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d07d      	beq.n	8004e0e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	4798      	blx	r3
        }
        return;
 8004d1a:	e078      	b.n	8004e0e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d01c      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d108      	bne.n	8004d4a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d030      	beq.n	8004da2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
 8004d48:	e02b      	b.n	8004da2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d027      	beq.n	8004da2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	4798      	blx	r3
 8004d5a:	e022      	b.n	8004da2 <HAL_DMA_IRQHandler+0x29e>
 8004d5c:	20000010 	.word	0x20000010
 8004d60:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10f      	bne.n	8004d92 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0210 	bic.w	r2, r2, #16
 8004d80:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d032      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d022      	beq.n	8004dfc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2205      	movs	r2, #5
 8004dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0201 	bic.w	r2, r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d307      	bcc.n	8004dea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1f2      	bne.n	8004dce <HAL_DMA_IRQHandler+0x2ca>
 8004de8:	e000      	b.n	8004dec <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004dea:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	4798      	blx	r3
 8004e0c:	e000      	b.n	8004e10 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004e0e:	bf00      	nop
    }
  }
}
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop

08004e18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2b40      	cmp	r3, #64	; 0x40
 8004e44:	d108      	bne.n	8004e58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e56:	e007      	b.n	8004e68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	60da      	str	r2, [r3, #12]
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	3b10      	subs	r3, #16
 8004e84:	4a14      	ldr	r2, [pc, #80]	; (8004ed8 <DMA_CalcBaseAndBitshift+0x64>)
 8004e86:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8a:	091b      	lsrs	r3, r3, #4
 8004e8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e8e:	4a13      	ldr	r2, [pc, #76]	; (8004edc <DMA_CalcBaseAndBitshift+0x68>)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4413      	add	r3, r2
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d909      	bls.n	8004eb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	1d1a      	adds	r2, r3, #4
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	659a      	str	r2, [r3, #88]	; 0x58
 8004eb4:	e007      	b.n	8004ec6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ebe:	f023 0303 	bic.w	r3, r3, #3
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	aaaaaaab 	.word	0xaaaaaaab
 8004edc:	08012bf8 	.word	0x08012bf8

08004ee0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d11f      	bne.n	8004f3a <DMA_CheckFifoParam+0x5a>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d856      	bhi.n	8004fae <DMA_CheckFifoParam+0xce>
 8004f00:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <DMA_CheckFifoParam+0x28>)
 8004f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08004f19 	.word	0x08004f19
 8004f0c:	08004f2b 	.word	0x08004f2b
 8004f10:	08004f19 	.word	0x08004f19
 8004f14:	08004faf 	.word	0x08004faf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d046      	beq.n	8004fb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f28:	e043      	b.n	8004fb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f32:	d140      	bne.n	8004fb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f38:	e03d      	b.n	8004fb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f42:	d121      	bne.n	8004f88 <DMA_CheckFifoParam+0xa8>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d837      	bhi.n	8004fba <DMA_CheckFifoParam+0xda>
 8004f4a:	a201      	add	r2, pc, #4	; (adr r2, 8004f50 <DMA_CheckFifoParam+0x70>)
 8004f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f50:	08004f61 	.word	0x08004f61
 8004f54:	08004f67 	.word	0x08004f67
 8004f58:	08004f61 	.word	0x08004f61
 8004f5c:	08004f79 	.word	0x08004f79
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	73fb      	strb	r3, [r7, #15]
      break;
 8004f64:	e030      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d025      	beq.n	8004fbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f76:	e022      	b.n	8004fbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f80:	d11f      	bne.n	8004fc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f86:	e01c      	b.n	8004fc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d903      	bls.n	8004f96 <DMA_CheckFifoParam+0xb6>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d003      	beq.n	8004f9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f94:	e018      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	73fb      	strb	r3, [r7, #15]
      break;
 8004f9a:	e015      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00e      	beq.n	8004fc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
      break;
 8004fac:	e00b      	b.n	8004fc6 <DMA_CheckFifoParam+0xe6>
      break;
 8004fae:	bf00      	nop
 8004fb0:	e00a      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fb2:	bf00      	nop
 8004fb4:	e008      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fb6:	bf00      	nop
 8004fb8:	e006      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fba:	bf00      	nop
 8004fbc:	e004      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fbe:	bf00      	nop
 8004fc0:	e002      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004fc2:	bf00      	nop
 8004fc4:	e000      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fc6:	bf00      	nop
    }
  } 
  
  return status; 
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop

08004fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b089      	sub	sp, #36	; 0x24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61fb      	str	r3, [r7, #28]
 8004ff2:	e159      	b.n	80052a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4013      	ands	r3, r2
 8005006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	429a      	cmp	r2, r3
 800500e:	f040 8148 	bne.w	80052a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	2b01      	cmp	r3, #1
 800501c:	d005      	beq.n	800502a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005026:	2b02      	cmp	r3, #2
 8005028:	d130      	bne.n	800508c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	2203      	movs	r2, #3
 8005036:	fa02 f303 	lsl.w	r3, r2, r3
 800503a:	43db      	mvns	r3, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4013      	ands	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4313      	orrs	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005060:	2201      	movs	r2, #1
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	43db      	mvns	r3, r3
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	4013      	ands	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	091b      	lsrs	r3, r3, #4
 8005076:	f003 0201 	and.w	r2, r3, #1
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4313      	orrs	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	2b03      	cmp	r3, #3
 8005096:	d017      	beq.n	80050c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	2203      	movs	r2, #3
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4013      	ands	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4313      	orrs	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d123      	bne.n	800511c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	08da      	lsrs	r2, r3, #3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3208      	adds	r2, #8
 80050dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	220f      	movs	r2, #15
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	43db      	mvns	r3, r3
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4013      	ands	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	4313      	orrs	r3, r2
 800510c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	08da      	lsrs	r2, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3208      	adds	r2, #8
 8005116:	69b9      	ldr	r1, [r7, #24]
 8005118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	2203      	movs	r2, #3
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	43db      	mvns	r3, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f003 0203 	and.w	r2, r3, #3
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4313      	orrs	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 80a2 	beq.w	80052a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	4b57      	ldr	r3, [pc, #348]	; (80052c0 <HAL_GPIO_Init+0x2e8>)
 8005164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005166:	4a56      	ldr	r2, [pc, #344]	; (80052c0 <HAL_GPIO_Init+0x2e8>)
 8005168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800516c:	6453      	str	r3, [r2, #68]	; 0x44
 800516e:	4b54      	ldr	r3, [pc, #336]	; (80052c0 <HAL_GPIO_Init+0x2e8>)
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800517a:	4a52      	ldr	r2, [pc, #328]	; (80052c4 <HAL_GPIO_Init+0x2ec>)
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	089b      	lsrs	r3, r3, #2
 8005180:	3302      	adds	r3, #2
 8005182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	220f      	movs	r2, #15
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	43db      	mvns	r3, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4013      	ands	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a49      	ldr	r2, [pc, #292]	; (80052c8 <HAL_GPIO_Init+0x2f0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d019      	beq.n	80051da <HAL_GPIO_Init+0x202>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a48      	ldr	r2, [pc, #288]	; (80052cc <HAL_GPIO_Init+0x2f4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d013      	beq.n	80051d6 <HAL_GPIO_Init+0x1fe>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a47      	ldr	r2, [pc, #284]	; (80052d0 <HAL_GPIO_Init+0x2f8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00d      	beq.n	80051d2 <HAL_GPIO_Init+0x1fa>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a46      	ldr	r2, [pc, #280]	; (80052d4 <HAL_GPIO_Init+0x2fc>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d007      	beq.n	80051ce <HAL_GPIO_Init+0x1f6>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a45      	ldr	r2, [pc, #276]	; (80052d8 <HAL_GPIO_Init+0x300>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d101      	bne.n	80051ca <HAL_GPIO_Init+0x1f2>
 80051c6:	2304      	movs	r3, #4
 80051c8:	e008      	b.n	80051dc <HAL_GPIO_Init+0x204>
 80051ca:	2307      	movs	r3, #7
 80051cc:	e006      	b.n	80051dc <HAL_GPIO_Init+0x204>
 80051ce:	2303      	movs	r3, #3
 80051d0:	e004      	b.n	80051dc <HAL_GPIO_Init+0x204>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e002      	b.n	80051dc <HAL_GPIO_Init+0x204>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <HAL_GPIO_Init+0x204>
 80051da:	2300      	movs	r3, #0
 80051dc:	69fa      	ldr	r2, [r7, #28]
 80051de:	f002 0203 	and.w	r2, r2, #3
 80051e2:	0092      	lsls	r2, r2, #2
 80051e4:	4093      	lsls	r3, r2
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051ec:	4935      	ldr	r1, [pc, #212]	; (80052c4 <HAL_GPIO_Init+0x2ec>)
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	089b      	lsrs	r3, r3, #2
 80051f2:	3302      	adds	r3, #2
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051fa:	4b38      	ldr	r3, [pc, #224]	; (80052dc <HAL_GPIO_Init+0x304>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	43db      	mvns	r3, r3
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	4013      	ands	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800521e:	4a2f      	ldr	r2, [pc, #188]	; (80052dc <HAL_GPIO_Init+0x304>)
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005224:	4b2d      	ldr	r3, [pc, #180]	; (80052dc <HAL_GPIO_Init+0x304>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	43db      	mvns	r3, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4013      	ands	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005248:	4a24      	ldr	r2, [pc, #144]	; (80052dc <HAL_GPIO_Init+0x304>)
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800524e:	4b23      	ldr	r3, [pc, #140]	; (80052dc <HAL_GPIO_Init+0x304>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	43db      	mvns	r3, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4013      	ands	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005272:	4a1a      	ldr	r2, [pc, #104]	; (80052dc <HAL_GPIO_Init+0x304>)
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005278:	4b18      	ldr	r3, [pc, #96]	; (80052dc <HAL_GPIO_Init+0x304>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	43db      	mvns	r3, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4013      	ands	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800529c:	4a0f      	ldr	r2, [pc, #60]	; (80052dc <HAL_GPIO_Init+0x304>)
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	3301      	adds	r3, #1
 80052a6:	61fb      	str	r3, [r7, #28]
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	2b0f      	cmp	r3, #15
 80052ac:	f67f aea2 	bls.w	8004ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
 80052b4:	3724      	adds	r7, #36	; 0x24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40023800 	.word	0x40023800
 80052c4:	40013800 	.word	0x40013800
 80052c8:	40020000 	.word	0x40020000
 80052cc:	40020400 	.word	0x40020400
 80052d0:	40020800 	.word	0x40020800
 80052d4:	40020c00 	.word	0x40020c00
 80052d8:	40021000 	.word	0x40021000
 80052dc:	40013c00 	.word	0x40013c00

080052e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691a      	ldr	r2, [r3, #16]
 80052f0:	887b      	ldrh	r3, [r7, #2]
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052f8:	2301      	movs	r3, #1
 80052fa:	73fb      	strb	r3, [r7, #15]
 80052fc:	e001      	b.n	8005302 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052fe:	2300      	movs	r3, #0
 8005300:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005302:	7bfb      	ldrb	r3, [r7, #15]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	807b      	strh	r3, [r7, #2]
 800531c:	4613      	mov	r3, r2
 800531e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005320:	787b      	ldrb	r3, [r7, #1]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005326:	887a      	ldrh	r2, [r7, #2]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800532c:	e003      	b.n	8005336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800532e:	887b      	ldrh	r3, [r7, #2]
 8005330:	041a      	lsls	r2, r3, #16
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	619a      	str	r2, [r3, #24]
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005342:	b480      	push	{r7}
 8005344:	b085      	sub	sp, #20
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	460b      	mov	r3, r1
 800534c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005354:	887a      	ldrh	r2, [r7, #2]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4013      	ands	r3, r2
 800535a:	041a      	lsls	r2, r3, #16
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	43d9      	mvns	r1, r3
 8005360:	887b      	ldrh	r3, [r7, #2]
 8005362:	400b      	ands	r3, r1
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	619a      	str	r2, [r3, #24]
}
 800536a:	bf00      	nop
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e12b      	b.n	80055e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fe f8c8 	bl	8003534 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2224      	movs	r2, #36	; 0x24
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0201 	bic.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053dc:	f001 f992 	bl	8006704 <HAL_RCC_GetPCLK1Freq>
 80053e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	4a81      	ldr	r2, [pc, #516]	; (80055ec <HAL_I2C_Init+0x274>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d807      	bhi.n	80053fc <HAL_I2C_Init+0x84>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4a80      	ldr	r2, [pc, #512]	; (80055f0 <HAL_I2C_Init+0x278>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	bf94      	ite	ls
 80053f4:	2301      	movls	r3, #1
 80053f6:	2300      	movhi	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	e006      	b.n	800540a <HAL_I2C_Init+0x92>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4a7d      	ldr	r2, [pc, #500]	; (80055f4 <HAL_I2C_Init+0x27c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	bf94      	ite	ls
 8005404:	2301      	movls	r3, #1
 8005406:	2300      	movhi	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e0e7      	b.n	80055e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4a78      	ldr	r2, [pc, #480]	; (80055f8 <HAL_I2C_Init+0x280>)
 8005416:	fba2 2303 	umull	r2, r3, r2, r3
 800541a:	0c9b      	lsrs	r3, r3, #18
 800541c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	4a6a      	ldr	r2, [pc, #424]	; (80055ec <HAL_I2C_Init+0x274>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d802      	bhi.n	800544c <HAL_I2C_Init+0xd4>
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	3301      	adds	r3, #1
 800544a:	e009      	b.n	8005460 <HAL_I2C_Init+0xe8>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005452:	fb02 f303 	mul.w	r3, r2, r3
 8005456:	4a69      	ldr	r2, [pc, #420]	; (80055fc <HAL_I2C_Init+0x284>)
 8005458:	fba2 2303 	umull	r2, r3, r2, r3
 800545c:	099b      	lsrs	r3, r3, #6
 800545e:	3301      	adds	r3, #1
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6812      	ldr	r2, [r2, #0]
 8005464:	430b      	orrs	r3, r1
 8005466:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005472:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	495c      	ldr	r1, [pc, #368]	; (80055ec <HAL_I2C_Init+0x274>)
 800547c:	428b      	cmp	r3, r1
 800547e:	d819      	bhi.n	80054b4 <HAL_I2C_Init+0x13c>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	1e59      	subs	r1, r3, #1
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	fbb1 f3f3 	udiv	r3, r1, r3
 800548e:	1c59      	adds	r1, r3, #1
 8005490:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005494:	400b      	ands	r3, r1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <HAL_I2C_Init+0x138>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	1e59      	subs	r1, r3, #1
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80054a8:	3301      	adds	r3, #1
 80054aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ae:	e051      	b.n	8005554 <HAL_I2C_Init+0x1dc>
 80054b0:	2304      	movs	r3, #4
 80054b2:	e04f      	b.n	8005554 <HAL_I2C_Init+0x1dc>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d111      	bne.n	80054e0 <HAL_I2C_Init+0x168>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	1e58      	subs	r0, r3, #1
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6859      	ldr	r1, [r3, #4]
 80054c4:	460b      	mov	r3, r1
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	440b      	add	r3, r1
 80054ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80054ce:	3301      	adds	r3, #1
 80054d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	bf0c      	ite	eq
 80054d8:	2301      	moveq	r3, #1
 80054da:	2300      	movne	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	e012      	b.n	8005506 <HAL_I2C_Init+0x18e>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	1e58      	subs	r0, r3, #1
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6859      	ldr	r1, [r3, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	440b      	add	r3, r1
 80054ee:	0099      	lsls	r1, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80054f6:	3301      	adds	r3, #1
 80054f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bf0c      	ite	eq
 8005500:	2301      	moveq	r3, #1
 8005502:	2300      	movne	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <HAL_I2C_Init+0x196>
 800550a:	2301      	movs	r3, #1
 800550c:	e022      	b.n	8005554 <HAL_I2C_Init+0x1dc>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10e      	bne.n	8005534 <HAL_I2C_Init+0x1bc>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1e58      	subs	r0, r3, #1
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6859      	ldr	r1, [r3, #4]
 800551e:	460b      	mov	r3, r1
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	440b      	add	r3, r1
 8005524:	fbb0 f3f3 	udiv	r3, r0, r3
 8005528:	3301      	adds	r3, #1
 800552a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800552e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005532:	e00f      	b.n	8005554 <HAL_I2C_Init+0x1dc>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	1e58      	subs	r0, r3, #1
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6859      	ldr	r1, [r3, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	440b      	add	r3, r1
 8005542:	0099      	lsls	r1, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	fbb0 f3f3 	udiv	r3, r0, r3
 800554a:	3301      	adds	r3, #1
 800554c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005550:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	6809      	ldr	r1, [r1, #0]
 8005558:	4313      	orrs	r3, r2
 800555a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69da      	ldr	r2, [r3, #28]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005582:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6911      	ldr	r1, [r2, #16]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	68d2      	ldr	r2, [r2, #12]
 800558e:	4311      	orrs	r1, r2
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6812      	ldr	r2, [r2, #0]
 8005594:	430b      	orrs	r3, r1
 8005596:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695a      	ldr	r2, [r3, #20]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0201 	orr.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	000186a0 	.word	0x000186a0
 80055f0:	001e847f 	.word	0x001e847f
 80055f4:	003d08ff 	.word	0x003d08ff
 80055f8:	431bde83 	.word	0x431bde83
 80055fc:	10624dd3 	.word	0x10624dd3

08005600 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af02      	add	r7, sp, #8
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	607a      	str	r2, [r7, #4]
 800560a:	461a      	mov	r2, r3
 800560c:	460b      	mov	r3, r1
 800560e:	817b      	strh	r3, [r7, #10]
 8005610:	4613      	mov	r3, r2
 8005612:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005614:	f7fe fbca 	bl	8003dac <HAL_GetTick>
 8005618:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b20      	cmp	r3, #32
 8005624:	f040 80e0 	bne.w	80057e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	2319      	movs	r3, #25
 800562e:	2201      	movs	r2, #1
 8005630:	4970      	ldr	r1, [pc, #448]	; (80057f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 fa92 	bl	8005b5c <I2C_WaitOnFlagUntilTimeout>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800563e:	2302      	movs	r3, #2
 8005640:	e0d3      	b.n	80057ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_I2C_Master_Transmit+0x50>
 800564c:	2302      	movs	r3, #2
 800564e:	e0cc      	b.n	80057ea <HAL_I2C_Master_Transmit+0x1ea>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b01      	cmp	r3, #1
 8005664:	d007      	beq.n	8005676 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0201 	orr.w	r2, r2, #1
 8005674:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005684:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2221      	movs	r2, #33	; 0x21
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2210      	movs	r2, #16
 8005692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	893a      	ldrh	r2, [r7, #8]
 80056a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4a50      	ldr	r2, [pc, #320]	; (80057f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80056b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80056b8:	8979      	ldrh	r1, [r7, #10]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	6a3a      	ldr	r2, [r7, #32]
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 f9ca 	bl	8005a58 <I2C_MasterRequestWrite>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e08d      	b.n	80057ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ce:	2300      	movs	r3, #0
 80056d0:	613b      	str	r3, [r7, #16]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80056e4:	e066      	b.n	80057b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	6a39      	ldr	r1, [r7, #32]
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 fb0c 	bl	8005d08 <I2C_WaitOnTXEFlagUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00d      	beq.n	8005712 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d107      	bne.n	800570e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800570c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e06b      	b.n	80057ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	781a      	ldrb	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b04      	cmp	r3, #4
 800574e:	d11b      	bne.n	8005788 <HAL_I2C_Master_Transmit+0x188>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005754:	2b00      	cmp	r3, #0
 8005756:	d017      	beq.n	8005788 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	781a      	ldrb	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005772:	b29b      	uxth	r3, r3
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	6a39      	ldr	r1, [r7, #32]
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 fafc 	bl	8005d8a <I2C_WaitOnBTFFlagUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00d      	beq.n	80057b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	2b04      	cmp	r3, #4
 800579e:	d107      	bne.n	80057b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e01a      	b.n	80057ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d194      	bne.n	80056e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	e000      	b.n	80057ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80057e8:	2302      	movs	r3, #2
  }
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	00100002 	.word	0x00100002
 80057f8:	ffff0000 	.word	0xffff0000

080057fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08a      	sub	sp, #40	; 0x28
 8005800:	af02      	add	r7, sp, #8
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	607a      	str	r2, [r7, #4]
 8005806:	603b      	str	r3, [r7, #0]
 8005808:	460b      	mov	r3, r1
 800580a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800580c:	f7fe face 	bl	8003dac <HAL_GetTick>
 8005810:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005812:	2301      	movs	r3, #1
 8005814:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b20      	cmp	r3, #32
 8005820:	f040 8111 	bne.w	8005a46 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	2319      	movs	r3, #25
 800582a:	2201      	movs	r2, #1
 800582c:	4988      	ldr	r1, [pc, #544]	; (8005a50 <HAL_I2C_IsDeviceReady+0x254>)
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 f994 	bl	8005b5c <I2C_WaitOnFlagUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800583a:	2302      	movs	r3, #2
 800583c:	e104      	b.n	8005a48 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_I2C_IsDeviceReady+0x50>
 8005848:	2302      	movs	r3, #2
 800584a:	e0fd      	b.n	8005a48 <HAL_I2C_IsDeviceReady+0x24c>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b01      	cmp	r3, #1
 8005860:	d007      	beq.n	8005872 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0201 	orr.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005880:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2224      	movs	r2, #36	; 0x24
 8005886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4a70      	ldr	r2, [pc, #448]	; (8005a54 <HAL_I2C_IsDeviceReady+0x258>)
 8005894:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 f952 	bl	8005b5c <I2C_WaitOnFlagUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00d      	beq.n	80058da <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058cc:	d103      	bne.n	80058d6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e0b6      	b.n	8005a48 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058da:	897b      	ldrh	r3, [r7, #10]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	461a      	mov	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058e8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80058ea:	f7fe fa5f 	bl	8003dac <HAL_GetTick>
 80058ee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	bf0c      	ite	eq
 80058fe:	2301      	moveq	r3, #1
 8005900:	2300      	movne	r3, #0
 8005902:	b2db      	uxtb	r3, r3
 8005904:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005914:	bf0c      	ite	eq
 8005916:	2301      	moveq	r3, #1
 8005918:	2300      	movne	r3, #0
 800591a:	b2db      	uxtb	r3, r3
 800591c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800591e:	e025      	b.n	800596c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005920:	f7fe fa44 	bl	8003dac <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d302      	bcc.n	8005936 <HAL_I2C_IsDeviceReady+0x13a>
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d103      	bne.n	800593e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	22a0      	movs	r2, #160	; 0xa0
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b02      	cmp	r3, #2
 800594a:	bf0c      	ite	eq
 800594c:	2301      	moveq	r3, #1
 800594e:	2300      	movne	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800595e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005962:	bf0c      	ite	eq
 8005964:	2301      	moveq	r3, #1
 8005966:	2300      	movne	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2ba0      	cmp	r3, #160	; 0xa0
 8005976:	d005      	beq.n	8005984 <HAL_I2C_IsDeviceReady+0x188>
 8005978:	7dfb      	ldrb	r3, [r7, #23]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d102      	bne.n	8005984 <HAL_I2C_IsDeviceReady+0x188>
 800597e:	7dbb      	ldrb	r3, [r7, #22]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0cd      	beq.n	8005920 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b02      	cmp	r3, #2
 8005998:	d129      	bne.n	80059ee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059aa:	2300      	movs	r3, #0
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	2319      	movs	r3, #25
 80059c6:	2201      	movs	r2, #1
 80059c8:	4921      	ldr	r1, [pc, #132]	; (8005a50 <HAL_I2C_IsDeviceReady+0x254>)
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 f8c6 	bl	8005b5c <I2C_WaitOnFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e036      	b.n	8005a48 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e02c      	b.n	8005a48 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a06:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	2319      	movs	r3, #25
 8005a0e:	2201      	movs	r2, #1
 8005a10:	490f      	ldr	r1, [pc, #60]	; (8005a50 <HAL_I2C_IsDeviceReady+0x254>)
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 f8a2 	bl	8005b5c <I2C_WaitOnFlagUntilTimeout>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e012      	b.n	8005a48 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	3301      	adds	r3, #1
 8005a26:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	f4ff af32 	bcc.w	8005896 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005a46:	2302      	movs	r3, #2
  }
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	00100002 	.word	0x00100002
 8005a54:	ffff0000 	.word	0xffff0000

08005a58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	607a      	str	r2, [r7, #4]
 8005a62:	603b      	str	r3, [r7, #0]
 8005a64:	460b      	mov	r3, r1
 8005a66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d006      	beq.n	8005a82 <I2C_MasterRequestWrite+0x2a>
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d003      	beq.n	8005a82 <I2C_MasterRequestWrite+0x2a>
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a80:	d108      	bne.n	8005a94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	e00b      	b.n	8005aac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a98:	2b12      	cmp	r3, #18
 8005a9a:	d107      	bne.n	8005aac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aaa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 f84f 	bl	8005b5c <I2C_WaitOnFlagUntilTimeout>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00d      	beq.n	8005ae0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad2:	d103      	bne.n	8005adc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ada:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e035      	b.n	8005b4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ae8:	d108      	bne.n	8005afc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005aea:	897b      	ldrh	r3, [r7, #10]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005af8:	611a      	str	r2, [r3, #16]
 8005afa:	e01b      	b.n	8005b34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005afc:	897b      	ldrh	r3, [r7, #10]
 8005afe:	11db      	asrs	r3, r3, #7
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	f003 0306 	and.w	r3, r3, #6
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	f063 030f 	orn	r3, r3, #15
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	490e      	ldr	r1, [pc, #56]	; (8005b54 <I2C_MasterRequestWrite+0xfc>)
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 f875 	bl	8005c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e010      	b.n	8005b4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b2a:	897b      	ldrh	r3, [r7, #10]
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	4907      	ldr	r1, [pc, #28]	; (8005b58 <I2C_MasterRequestWrite+0x100>)
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 f865 	bl	8005c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	00010008 	.word	0x00010008
 8005b58:	00010002 	.word	0x00010002

08005b5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b6c:	e025      	b.n	8005bba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b74:	d021      	beq.n	8005bba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b76:	f7fe f919 	bl	8003dac <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d302      	bcc.n	8005b8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d116      	bne.n	8005bba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	f043 0220 	orr.w	r2, r3, #32
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e023      	b.n	8005c02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	0c1b      	lsrs	r3, r3, #16
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d10d      	bne.n	8005be0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	43da      	mvns	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	bf0c      	ite	eq
 8005bd6:	2301      	moveq	r3, #1
 8005bd8:	2300      	movne	r3, #0
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	461a      	mov	r2, r3
 8005bde:	e00c      	b.n	8005bfa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	43da      	mvns	r2, r3
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4013      	ands	r3, r2
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bf0c      	ite	eq
 8005bf2:	2301      	moveq	r3, #1
 8005bf4:	2300      	movne	r3, #0
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	79fb      	ldrb	r3, [r7, #7]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d0b6      	beq.n	8005b6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	60f8      	str	r0, [r7, #12]
 8005c12:	60b9      	str	r1, [r7, #8]
 8005c14:	607a      	str	r2, [r7, #4]
 8005c16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c18:	e051      	b.n	8005cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c28:	d123      	bne.n	8005c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	f043 0204 	orr.w	r2, r3, #4
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e046      	b.n	8005d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c78:	d021      	beq.n	8005cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c7a:	f7fe f897 	bl	8003dac <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d302      	bcc.n	8005c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d116      	bne.n	8005cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f043 0220 	orr.w	r2, r3, #32
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e020      	b.n	8005d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	0c1b      	lsrs	r3, r3, #16
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d10c      	bne.n	8005ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	43da      	mvns	r2, r3
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	bf14      	ite	ne
 8005cda:	2301      	movne	r3, #1
 8005cdc:	2300      	moveq	r3, #0
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	e00b      	b.n	8005cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	43da      	mvns	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	4013      	ands	r3, r2
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	bf14      	ite	ne
 8005cf4:	2301      	movne	r3, #1
 8005cf6:	2300      	moveq	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d18d      	bne.n	8005c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d14:	e02d      	b.n	8005d72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 f878 	bl	8005e0c <I2C_IsAcknowledgeFailed>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e02d      	b.n	8005d82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2c:	d021      	beq.n	8005d72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d2e:	f7fe f83d 	bl	8003dac <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d302      	bcc.n	8005d44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d116      	bne.n	8005d72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	f043 0220 	orr.w	r2, r3, #32
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e007      	b.n	8005d82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7c:	2b80      	cmp	r3, #128	; 0x80
 8005d7e:	d1ca      	bne.n	8005d16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d96:	e02d      	b.n	8005df4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 f837 	bl	8005e0c <I2C_IsAcknowledgeFailed>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e02d      	b.n	8005e04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dae:	d021      	beq.n	8005df4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db0:	f7fd fffc 	bl	8003dac <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d302      	bcc.n	8005dc6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d116      	bne.n	8005df4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de0:	f043 0220 	orr.w	r2, r3, #32
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e007      	b.n	8005e04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d1ca      	bne.n	8005d98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e22:	d11b      	bne.n	8005e5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	f043 0204 	orr.w	r2, r3, #4
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e000      	b.n	8005e5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
	...

08005e6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e264      	b.n	8006348 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d075      	beq.n	8005f76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e8a:	4ba3      	ldr	r3, [pc, #652]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 030c 	and.w	r3, r3, #12
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d00c      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e96:	4ba0      	ldr	r3, [pc, #640]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e9e:	2b08      	cmp	r3, #8
 8005ea0:	d112      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ea2:	4b9d      	ldr	r3, [pc, #628]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eae:	d10b      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb0:	4b99      	ldr	r3, [pc, #612]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d05b      	beq.n	8005f74 <HAL_RCC_OscConfig+0x108>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d157      	bne.n	8005f74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e23f      	b.n	8006348 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed0:	d106      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x74>
 8005ed2:	4b91      	ldr	r3, [pc, #580]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a90      	ldr	r2, [pc, #576]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	e01d      	b.n	8005f1c <HAL_RCC_OscConfig+0xb0>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ee8:	d10c      	bne.n	8005f04 <HAL_RCC_OscConfig+0x98>
 8005eea:	4b8b      	ldr	r3, [pc, #556]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a8a      	ldr	r2, [pc, #552]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ef4:	6013      	str	r3, [r2, #0]
 8005ef6:	4b88      	ldr	r3, [pc, #544]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a87      	ldr	r2, [pc, #540]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	e00b      	b.n	8005f1c <HAL_RCC_OscConfig+0xb0>
 8005f04:	4b84      	ldr	r3, [pc, #528]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a83      	ldr	r2, [pc, #524]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f0e:	6013      	str	r3, [r2, #0]
 8005f10:	4b81      	ldr	r3, [pc, #516]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a80      	ldr	r2, [pc, #512]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d013      	beq.n	8005f4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f24:	f7fd ff42 	bl	8003dac <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f2a:	e008      	b.n	8005f3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f2c:	f7fd ff3e 	bl	8003dac <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b64      	cmp	r3, #100	; 0x64
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e204      	b.n	8006348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f3e:	4b76      	ldr	r3, [pc, #472]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0f0      	beq.n	8005f2c <HAL_RCC_OscConfig+0xc0>
 8005f4a:	e014      	b.n	8005f76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f4c:	f7fd ff2e 	bl	8003dac <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f54:	f7fd ff2a 	bl	8003dac <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b64      	cmp	r3, #100	; 0x64
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e1f0      	b.n	8006348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f66:	4b6c      	ldr	r3, [pc, #432]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1f0      	bne.n	8005f54 <HAL_RCC_OscConfig+0xe8>
 8005f72:	e000      	b.n	8005f76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d063      	beq.n	800604a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f82:	4b65      	ldr	r3, [pc, #404]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f003 030c 	and.w	r3, r3, #12
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00b      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f8e:	4b62      	ldr	r3, [pc, #392]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f96:	2b08      	cmp	r3, #8
 8005f98:	d11c      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f9a:	4b5f      	ldr	r3, [pc, #380]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d116      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fa6:	4b5c      	ldr	r3, [pc, #368]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d005      	beq.n	8005fbe <HAL_RCC_OscConfig+0x152>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d001      	beq.n	8005fbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e1c4      	b.n	8006348 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fbe:	4b56      	ldr	r3, [pc, #344]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	4952      	ldr	r1, [pc, #328]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fd2:	e03a      	b.n	800604a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d020      	beq.n	800601e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fdc:	4b4f      	ldr	r3, [pc, #316]	; (800611c <HAL_RCC_OscConfig+0x2b0>)
 8005fde:	2201      	movs	r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe2:	f7fd fee3 	bl	8003dac <HAL_GetTick>
 8005fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fe8:	e008      	b.n	8005ffc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fea:	f7fd fedf 	bl	8003dac <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e1a5      	b.n	8006348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ffc:	4b46      	ldr	r3, [pc, #280]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0f0      	beq.n	8005fea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006008:	4b43      	ldr	r3, [pc, #268]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	4940      	ldr	r1, [pc, #256]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8006018:	4313      	orrs	r3, r2
 800601a:	600b      	str	r3, [r1, #0]
 800601c:	e015      	b.n	800604a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800601e:	4b3f      	ldr	r3, [pc, #252]	; (800611c <HAL_RCC_OscConfig+0x2b0>)
 8006020:	2200      	movs	r2, #0
 8006022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006024:	f7fd fec2 	bl	8003dac <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800602c:	f7fd febe 	bl	8003dac <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e184      	b.n	8006348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800603e:	4b36      	ldr	r3, [pc, #216]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f0      	bne.n	800602c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0308 	and.w	r3, r3, #8
 8006052:	2b00      	cmp	r3, #0
 8006054:	d030      	beq.n	80060b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d016      	beq.n	800608c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800605e:	4b30      	ldr	r3, [pc, #192]	; (8006120 <HAL_RCC_OscConfig+0x2b4>)
 8006060:	2201      	movs	r2, #1
 8006062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006064:	f7fd fea2 	bl	8003dac <HAL_GetTick>
 8006068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800606a:	e008      	b.n	800607e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800606c:	f7fd fe9e 	bl	8003dac <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b02      	cmp	r3, #2
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e164      	b.n	8006348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800607e:	4b26      	ldr	r3, [pc, #152]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 8006080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0f0      	beq.n	800606c <HAL_RCC_OscConfig+0x200>
 800608a:	e015      	b.n	80060b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800608c:	4b24      	ldr	r3, [pc, #144]	; (8006120 <HAL_RCC_OscConfig+0x2b4>)
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006092:	f7fd fe8b 	bl	8003dac <HAL_GetTick>
 8006096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006098:	e008      	b.n	80060ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800609a:	f7fd fe87 	bl	8003dac <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d901      	bls.n	80060ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e14d      	b.n	8006348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060ac:	4b1a      	ldr	r3, [pc, #104]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 80060ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1f0      	bne.n	800609a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 80a0 	beq.w	8006206 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060c6:	2300      	movs	r3, #0
 80060c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060ca:	4b13      	ldr	r3, [pc, #76]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10f      	bne.n	80060f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060d6:	2300      	movs	r3, #0
 80060d8:	60bb      	str	r3, [r7, #8]
 80060da:	4b0f      	ldr	r3, [pc, #60]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	4a0e      	ldr	r2, [pc, #56]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 80060e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e4:	6413      	str	r3, [r2, #64]	; 0x40
 80060e6:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <HAL_RCC_OscConfig+0x2ac>)
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ee:	60bb      	str	r3, [r7, #8]
 80060f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060f2:	2301      	movs	r3, #1
 80060f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f6:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <HAL_RCC_OscConfig+0x2b8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d121      	bne.n	8006146 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006102:	4b08      	ldr	r3, [pc, #32]	; (8006124 <HAL_RCC_OscConfig+0x2b8>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a07      	ldr	r2, [pc, #28]	; (8006124 <HAL_RCC_OscConfig+0x2b8>)
 8006108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800610c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800610e:	f7fd fe4d 	bl	8003dac <HAL_GetTick>
 8006112:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006114:	e011      	b.n	800613a <HAL_RCC_OscConfig+0x2ce>
 8006116:	bf00      	nop
 8006118:	40023800 	.word	0x40023800
 800611c:	42470000 	.word	0x42470000
 8006120:	42470e80 	.word	0x42470e80
 8006124:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006128:	f7fd fe40 	bl	8003dac <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e106      	b.n	8006348 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800613a:	4b85      	ldr	r3, [pc, #532]	; (8006350 <HAL_RCC_OscConfig+0x4e4>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0f0      	beq.n	8006128 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d106      	bne.n	800615c <HAL_RCC_OscConfig+0x2f0>
 800614e:	4b81      	ldr	r3, [pc, #516]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 8006150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006152:	4a80      	ldr	r2, [pc, #512]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 8006154:	f043 0301 	orr.w	r3, r3, #1
 8006158:	6713      	str	r3, [r2, #112]	; 0x70
 800615a:	e01c      	b.n	8006196 <HAL_RCC_OscConfig+0x32a>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	2b05      	cmp	r3, #5
 8006162:	d10c      	bne.n	800617e <HAL_RCC_OscConfig+0x312>
 8006164:	4b7b      	ldr	r3, [pc, #492]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 8006166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006168:	4a7a      	ldr	r2, [pc, #488]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 800616a:	f043 0304 	orr.w	r3, r3, #4
 800616e:	6713      	str	r3, [r2, #112]	; 0x70
 8006170:	4b78      	ldr	r3, [pc, #480]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 8006172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006174:	4a77      	ldr	r2, [pc, #476]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 8006176:	f043 0301 	orr.w	r3, r3, #1
 800617a:	6713      	str	r3, [r2, #112]	; 0x70
 800617c:	e00b      	b.n	8006196 <HAL_RCC_OscConfig+0x32a>
 800617e:	4b75      	ldr	r3, [pc, #468]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 8006180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006182:	4a74      	ldr	r2, [pc, #464]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 8006184:	f023 0301 	bic.w	r3, r3, #1
 8006188:	6713      	str	r3, [r2, #112]	; 0x70
 800618a:	4b72      	ldr	r3, [pc, #456]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 800618c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618e:	4a71      	ldr	r2, [pc, #452]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 8006190:	f023 0304 	bic.w	r3, r3, #4
 8006194:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d015      	beq.n	80061ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800619e:	f7fd fe05 	bl	8003dac <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061a4:	e00a      	b.n	80061bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061a6:	f7fd fe01 	bl	8003dac <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d901      	bls.n	80061bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e0c5      	b.n	8006348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061bc:	4b65      	ldr	r3, [pc, #404]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 80061be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0ee      	beq.n	80061a6 <HAL_RCC_OscConfig+0x33a>
 80061c8:	e014      	b.n	80061f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061ca:	f7fd fdef 	bl	8003dac <HAL_GetTick>
 80061ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061d0:	e00a      	b.n	80061e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061d2:	f7fd fdeb 	bl	8003dac <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e0af      	b.n	8006348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061e8:	4b5a      	ldr	r3, [pc, #360]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 80061ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1ee      	bne.n	80061d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061f4:	7dfb      	ldrb	r3, [r7, #23]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d105      	bne.n	8006206 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061fa:	4b56      	ldr	r3, [pc, #344]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	4a55      	ldr	r2, [pc, #340]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 8006200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006204:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 809b 	beq.w	8006346 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006210:	4b50      	ldr	r3, [pc, #320]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f003 030c 	and.w	r3, r3, #12
 8006218:	2b08      	cmp	r3, #8
 800621a:	d05c      	beq.n	80062d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	2b02      	cmp	r3, #2
 8006222:	d141      	bne.n	80062a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006224:	4b4c      	ldr	r3, [pc, #304]	; (8006358 <HAL_RCC_OscConfig+0x4ec>)
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800622a:	f7fd fdbf 	bl	8003dac <HAL_GetTick>
 800622e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006230:	e008      	b.n	8006244 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006232:	f7fd fdbb 	bl	8003dac <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e081      	b.n	8006348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006244:	4b43      	ldr	r3, [pc, #268]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1f0      	bne.n	8006232 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	69da      	ldr	r2, [r3, #28]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	431a      	orrs	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	019b      	lsls	r3, r3, #6
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006266:	085b      	lsrs	r3, r3, #1
 8006268:	3b01      	subs	r3, #1
 800626a:	041b      	lsls	r3, r3, #16
 800626c:	431a      	orrs	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	061b      	lsls	r3, r3, #24
 8006274:	4937      	ldr	r1, [pc, #220]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 8006276:	4313      	orrs	r3, r2
 8006278:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800627a:	4b37      	ldr	r3, [pc, #220]	; (8006358 <HAL_RCC_OscConfig+0x4ec>)
 800627c:	2201      	movs	r2, #1
 800627e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006280:	f7fd fd94 	bl	8003dac <HAL_GetTick>
 8006284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006288:	f7fd fd90 	bl	8003dac <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e056      	b.n	8006348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800629a:	4b2e      	ldr	r3, [pc, #184]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0f0      	beq.n	8006288 <HAL_RCC_OscConfig+0x41c>
 80062a6:	e04e      	b.n	8006346 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062a8:	4b2b      	ldr	r3, [pc, #172]	; (8006358 <HAL_RCC_OscConfig+0x4ec>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ae:	f7fd fd7d 	bl	8003dac <HAL_GetTick>
 80062b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062b4:	e008      	b.n	80062c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062b6:	f7fd fd79 	bl	8003dac <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d901      	bls.n	80062c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e03f      	b.n	8006348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062c8:	4b22      	ldr	r3, [pc, #136]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1f0      	bne.n	80062b6 <HAL_RCC_OscConfig+0x44a>
 80062d4:	e037      	b.n	8006346 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e032      	b.n	8006348 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062e2:	4b1c      	ldr	r3, [pc, #112]	; (8006354 <HAL_RCC_OscConfig+0x4e8>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d028      	beq.n	8006342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d121      	bne.n	8006342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006308:	429a      	cmp	r2, r3
 800630a:	d11a      	bne.n	8006342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006312:	4013      	ands	r3, r2
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006318:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800631a:	4293      	cmp	r3, r2
 800631c:	d111      	bne.n	8006342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006328:	085b      	lsrs	r3, r3, #1
 800632a:	3b01      	subs	r3, #1
 800632c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800632e:	429a      	cmp	r2, r3
 8006330:	d107      	bne.n	8006342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800633e:	429a      	cmp	r2, r3
 8006340:	d001      	beq.n	8006346 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3718      	adds	r7, #24
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	40007000 	.word	0x40007000
 8006354:	40023800 	.word	0x40023800
 8006358:	42470060 	.word	0x42470060

0800635c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e0cc      	b.n	800650a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006370:	4b68      	ldr	r3, [pc, #416]	; (8006514 <HAL_RCC_ClockConfig+0x1b8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d90c      	bls.n	8006398 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800637e:	4b65      	ldr	r3, [pc, #404]	; (8006514 <HAL_RCC_ClockConfig+0x1b8>)
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006386:	4b63      	ldr	r3, [pc, #396]	; (8006514 <HAL_RCC_ClockConfig+0x1b8>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0307 	and.w	r3, r3, #7
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d001      	beq.n	8006398 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e0b8      	b.n	800650a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d020      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063b0:	4b59      	ldr	r3, [pc, #356]	; (8006518 <HAL_RCC_ClockConfig+0x1bc>)
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	4a58      	ldr	r2, [pc, #352]	; (8006518 <HAL_RCC_ClockConfig+0x1bc>)
 80063b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0308 	and.w	r3, r3, #8
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063c8:	4b53      	ldr	r3, [pc, #332]	; (8006518 <HAL_RCC_ClockConfig+0x1bc>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	4a52      	ldr	r2, [pc, #328]	; (8006518 <HAL_RCC_ClockConfig+0x1bc>)
 80063ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063d4:	4b50      	ldr	r3, [pc, #320]	; (8006518 <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	494d      	ldr	r1, [pc, #308]	; (8006518 <HAL_RCC_ClockConfig+0x1bc>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d044      	beq.n	800647c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d107      	bne.n	800640a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063fa:	4b47      	ldr	r3, [pc, #284]	; (8006518 <HAL_RCC_ClockConfig+0x1bc>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d119      	bne.n	800643a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e07f      	b.n	800650a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2b02      	cmp	r3, #2
 8006410:	d003      	beq.n	800641a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006416:	2b03      	cmp	r3, #3
 8006418:	d107      	bne.n	800642a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800641a:	4b3f      	ldr	r3, [pc, #252]	; (8006518 <HAL_RCC_ClockConfig+0x1bc>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d109      	bne.n	800643a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e06f      	b.n	800650a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800642a:	4b3b      	ldr	r3, [pc, #236]	; (8006518 <HAL_RCC_ClockConfig+0x1bc>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e067      	b.n	800650a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800643a:	4b37      	ldr	r3, [pc, #220]	; (8006518 <HAL_RCC_ClockConfig+0x1bc>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f023 0203 	bic.w	r2, r3, #3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	4934      	ldr	r1, [pc, #208]	; (8006518 <HAL_RCC_ClockConfig+0x1bc>)
 8006448:	4313      	orrs	r3, r2
 800644a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800644c:	f7fd fcae 	bl	8003dac <HAL_GetTick>
 8006450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006452:	e00a      	b.n	800646a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006454:	f7fd fcaa 	bl	8003dac <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006462:	4293      	cmp	r3, r2
 8006464:	d901      	bls.n	800646a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e04f      	b.n	800650a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800646a:	4b2b      	ldr	r3, [pc, #172]	; (8006518 <HAL_RCC_ClockConfig+0x1bc>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f003 020c 	and.w	r2, r3, #12
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	429a      	cmp	r2, r3
 800647a:	d1eb      	bne.n	8006454 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800647c:	4b25      	ldr	r3, [pc, #148]	; (8006514 <HAL_RCC_ClockConfig+0x1b8>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d20c      	bcs.n	80064a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648a:	4b22      	ldr	r3, [pc, #136]	; (8006514 <HAL_RCC_ClockConfig+0x1b8>)
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006492:	4b20      	ldr	r3, [pc, #128]	; (8006514 <HAL_RCC_ClockConfig+0x1b8>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	429a      	cmp	r2, r3
 800649e:	d001      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e032      	b.n	800650a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0304 	and.w	r3, r3, #4
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d008      	beq.n	80064c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064b0:	4b19      	ldr	r3, [pc, #100]	; (8006518 <HAL_RCC_ClockConfig+0x1bc>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	4916      	ldr	r1, [pc, #88]	; (8006518 <HAL_RCC_ClockConfig+0x1bc>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0308 	and.w	r3, r3, #8
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d009      	beq.n	80064e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064ce:	4b12      	ldr	r3, [pc, #72]	; (8006518 <HAL_RCC_ClockConfig+0x1bc>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	490e      	ldr	r1, [pc, #56]	; (8006518 <HAL_RCC_ClockConfig+0x1bc>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064e2:	f000 f821 	bl	8006528 <HAL_RCC_GetSysClockFreq>
 80064e6:	4602      	mov	r2, r0
 80064e8:	4b0b      	ldr	r3, [pc, #44]	; (8006518 <HAL_RCC_ClockConfig+0x1bc>)
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	091b      	lsrs	r3, r3, #4
 80064ee:	f003 030f 	and.w	r3, r3, #15
 80064f2:	490a      	ldr	r1, [pc, #40]	; (800651c <HAL_RCC_ClockConfig+0x1c0>)
 80064f4:	5ccb      	ldrb	r3, [r1, r3]
 80064f6:	fa22 f303 	lsr.w	r3, r2, r3
 80064fa:	4a09      	ldr	r2, [pc, #36]	; (8006520 <HAL_RCC_ClockConfig+0x1c4>)
 80064fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064fe:	4b09      	ldr	r3, [pc, #36]	; (8006524 <HAL_RCC_ClockConfig+0x1c8>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4618      	mov	r0, r3
 8006504:	f7fd fa20 	bl	8003948 <HAL_InitTick>

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	40023c00 	.word	0x40023c00
 8006518:	40023800 	.word	0x40023800
 800651c:	08012be0 	.word	0x08012be0
 8006520:	20000010 	.word	0x20000010
 8006524:	20000014 	.word	0x20000014

08006528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006528:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800652c:	b084      	sub	sp, #16
 800652e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	607b      	str	r3, [r7, #4]
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	2300      	movs	r3, #0
 800653a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006540:	4b67      	ldr	r3, [pc, #412]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f003 030c 	and.w	r3, r3, #12
 8006548:	2b08      	cmp	r3, #8
 800654a:	d00d      	beq.n	8006568 <HAL_RCC_GetSysClockFreq+0x40>
 800654c:	2b08      	cmp	r3, #8
 800654e:	f200 80bd 	bhi.w	80066cc <HAL_RCC_GetSysClockFreq+0x1a4>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <HAL_RCC_GetSysClockFreq+0x34>
 8006556:	2b04      	cmp	r3, #4
 8006558:	d003      	beq.n	8006562 <HAL_RCC_GetSysClockFreq+0x3a>
 800655a:	e0b7      	b.n	80066cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800655c:	4b61      	ldr	r3, [pc, #388]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800655e:	60bb      	str	r3, [r7, #8]
       break;
 8006560:	e0b7      	b.n	80066d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006562:	4b61      	ldr	r3, [pc, #388]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006564:	60bb      	str	r3, [r7, #8]
      break;
 8006566:	e0b4      	b.n	80066d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006568:	4b5d      	ldr	r3, [pc, #372]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006570:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006572:	4b5b      	ldr	r3, [pc, #364]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d04d      	beq.n	800661a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800657e:	4b58      	ldr	r3, [pc, #352]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	099b      	lsrs	r3, r3, #6
 8006584:	461a      	mov	r2, r3
 8006586:	f04f 0300 	mov.w	r3, #0
 800658a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800658e:	f04f 0100 	mov.w	r1, #0
 8006592:	ea02 0800 	and.w	r8, r2, r0
 8006596:	ea03 0901 	and.w	r9, r3, r1
 800659a:	4640      	mov	r0, r8
 800659c:	4649      	mov	r1, r9
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	f04f 0300 	mov.w	r3, #0
 80065a6:	014b      	lsls	r3, r1, #5
 80065a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80065ac:	0142      	lsls	r2, r0, #5
 80065ae:	4610      	mov	r0, r2
 80065b0:	4619      	mov	r1, r3
 80065b2:	ebb0 0008 	subs.w	r0, r0, r8
 80065b6:	eb61 0109 	sbc.w	r1, r1, r9
 80065ba:	f04f 0200 	mov.w	r2, #0
 80065be:	f04f 0300 	mov.w	r3, #0
 80065c2:	018b      	lsls	r3, r1, #6
 80065c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80065c8:	0182      	lsls	r2, r0, #6
 80065ca:	1a12      	subs	r2, r2, r0
 80065cc:	eb63 0301 	sbc.w	r3, r3, r1
 80065d0:	f04f 0000 	mov.w	r0, #0
 80065d4:	f04f 0100 	mov.w	r1, #0
 80065d8:	00d9      	lsls	r1, r3, #3
 80065da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065de:	00d0      	lsls	r0, r2, #3
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	eb12 0208 	adds.w	r2, r2, r8
 80065e8:	eb43 0309 	adc.w	r3, r3, r9
 80065ec:	f04f 0000 	mov.w	r0, #0
 80065f0:	f04f 0100 	mov.w	r1, #0
 80065f4:	0259      	lsls	r1, r3, #9
 80065f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80065fa:	0250      	lsls	r0, r2, #9
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4610      	mov	r0, r2
 8006602:	4619      	mov	r1, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	461a      	mov	r2, r3
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	f7fa fae4 	bl	8000bd8 <__aeabi_uldivmod>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4613      	mov	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	e04a      	b.n	80066b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800661a:	4b31      	ldr	r3, [pc, #196]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	099b      	lsrs	r3, r3, #6
 8006620:	461a      	mov	r2, r3
 8006622:	f04f 0300 	mov.w	r3, #0
 8006626:	f240 10ff 	movw	r0, #511	; 0x1ff
 800662a:	f04f 0100 	mov.w	r1, #0
 800662e:	ea02 0400 	and.w	r4, r2, r0
 8006632:	ea03 0501 	and.w	r5, r3, r1
 8006636:	4620      	mov	r0, r4
 8006638:	4629      	mov	r1, r5
 800663a:	f04f 0200 	mov.w	r2, #0
 800663e:	f04f 0300 	mov.w	r3, #0
 8006642:	014b      	lsls	r3, r1, #5
 8006644:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006648:	0142      	lsls	r2, r0, #5
 800664a:	4610      	mov	r0, r2
 800664c:	4619      	mov	r1, r3
 800664e:	1b00      	subs	r0, r0, r4
 8006650:	eb61 0105 	sbc.w	r1, r1, r5
 8006654:	f04f 0200 	mov.w	r2, #0
 8006658:	f04f 0300 	mov.w	r3, #0
 800665c:	018b      	lsls	r3, r1, #6
 800665e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006662:	0182      	lsls	r2, r0, #6
 8006664:	1a12      	subs	r2, r2, r0
 8006666:	eb63 0301 	sbc.w	r3, r3, r1
 800666a:	f04f 0000 	mov.w	r0, #0
 800666e:	f04f 0100 	mov.w	r1, #0
 8006672:	00d9      	lsls	r1, r3, #3
 8006674:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006678:	00d0      	lsls	r0, r2, #3
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	1912      	adds	r2, r2, r4
 8006680:	eb45 0303 	adc.w	r3, r5, r3
 8006684:	f04f 0000 	mov.w	r0, #0
 8006688:	f04f 0100 	mov.w	r1, #0
 800668c:	0299      	lsls	r1, r3, #10
 800668e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006692:	0290      	lsls	r0, r2, #10
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	4610      	mov	r0, r2
 800669a:	4619      	mov	r1, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	461a      	mov	r2, r3
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	f7fa fa98 	bl	8000bd8 <__aeabi_uldivmod>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	4613      	mov	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066b0:	4b0b      	ldr	r3, [pc, #44]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	0c1b      	lsrs	r3, r3, #16
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	3301      	adds	r3, #1
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c8:	60bb      	str	r3, [r7, #8]
      break;
 80066ca:	e002      	b.n	80066d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066cc:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80066ce:	60bb      	str	r3, [r7, #8]
      break;
 80066d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066d2:	68bb      	ldr	r3, [r7, #8]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80066de:	bf00      	nop
 80066e0:	40023800 	.word	0x40023800
 80066e4:	00f42400 	.word	0x00f42400
 80066e8:	007a1200 	.word	0x007a1200

080066ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066f0:	4b03      	ldr	r3, [pc, #12]	; (8006700 <HAL_RCC_GetHCLKFreq+0x14>)
 80066f2:	681b      	ldr	r3, [r3, #0]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	20000010 	.word	0x20000010

08006704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006708:	f7ff fff0 	bl	80066ec <HAL_RCC_GetHCLKFreq>
 800670c:	4602      	mov	r2, r0
 800670e:	4b05      	ldr	r3, [pc, #20]	; (8006724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	0a9b      	lsrs	r3, r3, #10
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	4903      	ldr	r1, [pc, #12]	; (8006728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800671a:	5ccb      	ldrb	r3, [r1, r3]
 800671c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006720:	4618      	mov	r0, r3
 8006722:	bd80      	pop	{r7, pc}
 8006724:	40023800 	.word	0x40023800
 8006728:	08012bf0 	.word	0x08012bf0

0800672c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006730:	f7ff ffdc 	bl	80066ec <HAL_RCC_GetHCLKFreq>
 8006734:	4602      	mov	r2, r0
 8006736:	4b05      	ldr	r3, [pc, #20]	; (800674c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	0b5b      	lsrs	r3, r3, #13
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	4903      	ldr	r1, [pc, #12]	; (8006750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006742:	5ccb      	ldrb	r3, [r1, r3]
 8006744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006748:	4618      	mov	r0, r3
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40023800 	.word	0x40023800
 8006750:	08012bf0 	.word	0x08012bf0

08006754 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	220f      	movs	r2, #15
 8006762:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006764:	4b12      	ldr	r3, [pc, #72]	; (80067b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f003 0203 	and.w	r2, r3, #3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006770:	4b0f      	ldr	r3, [pc, #60]	; (80067b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800677c:	4b0c      	ldr	r3, [pc, #48]	; (80067b0 <HAL_RCC_GetClockConfig+0x5c>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006788:	4b09      	ldr	r3, [pc, #36]	; (80067b0 <HAL_RCC_GetClockConfig+0x5c>)
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	08db      	lsrs	r3, r3, #3
 800678e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006796:	4b07      	ldr	r3, [pc, #28]	; (80067b4 <HAL_RCC_GetClockConfig+0x60>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0207 	and.w	r2, r3, #7
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	601a      	str	r2, [r3, #0]
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	40023800 	.word	0x40023800
 80067b4:	40023c00 	.word	0x40023c00

080067b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e07b      	b.n	80068c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d108      	bne.n	80067e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067da:	d009      	beq.n	80067f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	61da      	str	r2, [r3, #28]
 80067e2:	e005      	b.n	80067f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d106      	bne.n	8006810 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7fc feda 	bl	80035c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006826:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006838:	431a      	orrs	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006842:	431a      	orrs	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	f003 0302 	and.w	r3, r3, #2
 800684c:	431a      	orrs	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	431a      	orrs	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006860:	431a      	orrs	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800686a:	431a      	orrs	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006874:	ea42 0103 	orr.w	r1, r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	0c1b      	lsrs	r3, r3, #16
 800688e:	f003 0104 	and.w	r1, r3, #4
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	f003 0210 	and.w	r2, r3, #16
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69da      	ldr	r2, [r3, #28]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e041      	b.n	8006960 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d106      	bne.n	80068f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7fc feaf 	bl	8003654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2202      	movs	r2, #2
 80068fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3304      	adds	r3, #4
 8006906:	4619      	mov	r1, r3
 8006908:	4610      	mov	r0, r2
 800690a:	f000 fbfd 	bl	8007108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b01      	cmp	r3, #1
 800697a:	d001      	beq.n	8006980 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e03c      	b.n	80069fa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a1e      	ldr	r2, [pc, #120]	; (8006a08 <HAL_TIM_Base_Start+0xa0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d018      	beq.n	80069c4 <HAL_TIM_Base_Start+0x5c>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800699a:	d013      	beq.n	80069c4 <HAL_TIM_Base_Start+0x5c>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a1a      	ldr	r2, [pc, #104]	; (8006a0c <HAL_TIM_Base_Start+0xa4>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d00e      	beq.n	80069c4 <HAL_TIM_Base_Start+0x5c>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a19      	ldr	r2, [pc, #100]	; (8006a10 <HAL_TIM_Base_Start+0xa8>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d009      	beq.n	80069c4 <HAL_TIM_Base_Start+0x5c>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a17      	ldr	r2, [pc, #92]	; (8006a14 <HAL_TIM_Base_Start+0xac>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d004      	beq.n	80069c4 <HAL_TIM_Base_Start+0x5c>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a16      	ldr	r2, [pc, #88]	; (8006a18 <HAL_TIM_Base_Start+0xb0>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d111      	bne.n	80069e8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b06      	cmp	r3, #6
 80069d4:	d010      	beq.n	80069f8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f042 0201 	orr.w	r2, r2, #1
 80069e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069e6:	e007      	b.n	80069f8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0201 	orr.w	r2, r2, #1
 80069f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	40010000 	.word	0x40010000
 8006a0c:	40000400 	.word	0x40000400
 8006a10:	40000800 	.word	0x40000800
 8006a14:	40000c00 	.word	0x40000c00
 8006a18:	40014000 	.word	0x40014000

08006a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d001      	beq.n	8006a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e044      	b.n	8006abe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f042 0201 	orr.w	r2, r2, #1
 8006a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a1e      	ldr	r2, [pc, #120]	; (8006acc <HAL_TIM_Base_Start_IT+0xb0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d018      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0x6c>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5e:	d013      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0x6c>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a1a      	ldr	r2, [pc, #104]	; (8006ad0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00e      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0x6c>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a19      	ldr	r2, [pc, #100]	; (8006ad4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d009      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0x6c>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a17      	ldr	r2, [pc, #92]	; (8006ad8 <HAL_TIM_Base_Start_IT+0xbc>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d004      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0x6c>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a16      	ldr	r2, [pc, #88]	; (8006adc <HAL_TIM_Base_Start_IT+0xc0>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d111      	bne.n	8006aac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b06      	cmp	r3, #6
 8006a98:	d010      	beq.n	8006abc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0201 	orr.w	r2, r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aaa:	e007      	b.n	8006abc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0201 	orr.w	r2, r2, #1
 8006aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	40010000 	.word	0x40010000
 8006ad0:	40000400 	.word	0x40000400
 8006ad4:	40000800 	.word	0x40000800
 8006ad8:	40000c00 	.word	0x40000c00
 8006adc:	40014000 	.word	0x40014000

08006ae0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e041      	b.n	8006b76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d106      	bne.n	8006b0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f839 	bl	8006b7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4610      	mov	r0, r2
 8006b20:	f000 faf2 	bl	8007108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b082      	sub	sp, #8
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d122      	bne.n	8006bee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d11b      	bne.n	8006bee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f06f 0202 	mvn.w	r2, #2
 8006bbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	f003 0303 	and.w	r3, r3, #3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fa78 	bl	80070ca <HAL_TIM_IC_CaptureCallback>
 8006bda:	e005      	b.n	8006be8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fa6a 	bl	80070b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fa7b 	bl	80070de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	d122      	bne.n	8006c42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f003 0304 	and.w	r3, r3, #4
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d11b      	bne.n	8006c42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f06f 0204 	mvn.w	r2, #4
 8006c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fa4e 	bl	80070ca <HAL_TIM_IC_CaptureCallback>
 8006c2e:	e005      	b.n	8006c3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fa40 	bl	80070b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fa51 	bl	80070de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	f003 0308 	and.w	r3, r3, #8
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	d122      	bne.n	8006c96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b08      	cmp	r3, #8
 8006c5c:	d11b      	bne.n	8006c96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f06f 0208 	mvn.w	r2, #8
 8006c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	f003 0303 	and.w	r3, r3, #3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fa24 	bl	80070ca <HAL_TIM_IC_CaptureCallback>
 8006c82:	e005      	b.n	8006c90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fa16 	bl	80070b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fa27 	bl	80070de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	f003 0310 	and.w	r3, r3, #16
 8006ca0:	2b10      	cmp	r3, #16
 8006ca2:	d122      	bne.n	8006cea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f003 0310 	and.w	r3, r3, #16
 8006cae:	2b10      	cmp	r3, #16
 8006cb0:	d11b      	bne.n	8006cea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f06f 0210 	mvn.w	r2, #16
 8006cba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2208      	movs	r2, #8
 8006cc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d003      	beq.n	8006cd8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f9fa 	bl	80070ca <HAL_TIM_IC_CaptureCallback>
 8006cd6:	e005      	b.n	8006ce4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f9ec 	bl	80070b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f9fd 	bl	80070de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d10e      	bne.n	8006d16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d107      	bne.n	8006d16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f06f 0201 	mvn.w	r2, #1
 8006d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7fc f88d 	bl	8002e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d20:	2b80      	cmp	r3, #128	; 0x80
 8006d22:	d10e      	bne.n	8006d42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2e:	2b80      	cmp	r3, #128	; 0x80
 8006d30:	d107      	bne.n	8006d42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fd53 	bl	80077e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4c:	2b40      	cmp	r3, #64	; 0x40
 8006d4e:	d10e      	bne.n	8006d6e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5a:	2b40      	cmp	r3, #64	; 0x40
 8006d5c:	d107      	bne.n	8006d6e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f9c2 	bl	80070f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	2b20      	cmp	r3, #32
 8006d7a:	d10e      	bne.n	8006d9a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d107      	bne.n	8006d9a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f06f 0220 	mvn.w	r2, #32
 8006d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fd1d 	bl	80077d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d9a:	bf00      	nop
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d101      	bne.n	8006dc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e0ae      	b.n	8006f20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b0c      	cmp	r3, #12
 8006dce:	f200 809f 	bhi.w	8006f10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006dd2:	a201      	add	r2, pc, #4	; (adr r2, 8006dd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006e0d 	.word	0x08006e0d
 8006ddc:	08006f11 	.word	0x08006f11
 8006de0:	08006f11 	.word	0x08006f11
 8006de4:	08006f11 	.word	0x08006f11
 8006de8:	08006e4d 	.word	0x08006e4d
 8006dec:	08006f11 	.word	0x08006f11
 8006df0:	08006f11 	.word	0x08006f11
 8006df4:	08006f11 	.word	0x08006f11
 8006df8:	08006e8f 	.word	0x08006e8f
 8006dfc:	08006f11 	.word	0x08006f11
 8006e00:	08006f11 	.word	0x08006f11
 8006e04:	08006f11 	.word	0x08006f11
 8006e08:	08006ecf 	.word	0x08006ecf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68b9      	ldr	r1, [r7, #8]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 f9f8 	bl	8007208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699a      	ldr	r2, [r3, #24]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0208 	orr.w	r2, r2, #8
 8006e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	699a      	ldr	r2, [r3, #24]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0204 	bic.w	r2, r2, #4
 8006e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6999      	ldr	r1, [r3, #24]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	691a      	ldr	r2, [r3, #16]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	619a      	str	r2, [r3, #24]
      break;
 8006e4a:	e064      	b.n	8006f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68b9      	ldr	r1, [r7, #8]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 fa3e 	bl	80072d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	699a      	ldr	r2, [r3, #24]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	699a      	ldr	r2, [r3, #24]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6999      	ldr	r1, [r3, #24]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	021a      	lsls	r2, r3, #8
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	619a      	str	r2, [r3, #24]
      break;
 8006e8c:	e043      	b.n	8006f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68b9      	ldr	r1, [r7, #8]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 fa89 	bl	80073ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69da      	ldr	r2, [r3, #28]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f042 0208 	orr.w	r2, r2, #8
 8006ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69da      	ldr	r2, [r3, #28]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0204 	bic.w	r2, r2, #4
 8006eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	69d9      	ldr	r1, [r3, #28]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	691a      	ldr	r2, [r3, #16]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	61da      	str	r2, [r3, #28]
      break;
 8006ecc:	e023      	b.n	8006f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 fad3 	bl	8007480 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69da      	ldr	r2, [r3, #28]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	69da      	ldr	r2, [r3, #28]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	69d9      	ldr	r1, [r3, #28]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	021a      	lsls	r2, r3, #8
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	61da      	str	r2, [r3, #28]
      break;
 8006f0e:	e002      	b.n	8006f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	75fb      	strb	r3, [r7, #23]
      break;
 8006f14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d101      	bne.n	8006f44 <HAL_TIM_ConfigClockSource+0x1c>
 8006f40:	2302      	movs	r3, #2
 8006f42:	e0b4      	b.n	80070ae <HAL_TIM_ConfigClockSource+0x186>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f7c:	d03e      	beq.n	8006ffc <HAL_TIM_ConfigClockSource+0xd4>
 8006f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f82:	f200 8087 	bhi.w	8007094 <HAL_TIM_ConfigClockSource+0x16c>
 8006f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f8a:	f000 8086 	beq.w	800709a <HAL_TIM_ConfigClockSource+0x172>
 8006f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f92:	d87f      	bhi.n	8007094 <HAL_TIM_ConfigClockSource+0x16c>
 8006f94:	2b70      	cmp	r3, #112	; 0x70
 8006f96:	d01a      	beq.n	8006fce <HAL_TIM_ConfigClockSource+0xa6>
 8006f98:	2b70      	cmp	r3, #112	; 0x70
 8006f9a:	d87b      	bhi.n	8007094 <HAL_TIM_ConfigClockSource+0x16c>
 8006f9c:	2b60      	cmp	r3, #96	; 0x60
 8006f9e:	d050      	beq.n	8007042 <HAL_TIM_ConfigClockSource+0x11a>
 8006fa0:	2b60      	cmp	r3, #96	; 0x60
 8006fa2:	d877      	bhi.n	8007094 <HAL_TIM_ConfigClockSource+0x16c>
 8006fa4:	2b50      	cmp	r3, #80	; 0x50
 8006fa6:	d03c      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0xfa>
 8006fa8:	2b50      	cmp	r3, #80	; 0x50
 8006faa:	d873      	bhi.n	8007094 <HAL_TIM_ConfigClockSource+0x16c>
 8006fac:	2b40      	cmp	r3, #64	; 0x40
 8006fae:	d058      	beq.n	8007062 <HAL_TIM_ConfigClockSource+0x13a>
 8006fb0:	2b40      	cmp	r3, #64	; 0x40
 8006fb2:	d86f      	bhi.n	8007094 <HAL_TIM_ConfigClockSource+0x16c>
 8006fb4:	2b30      	cmp	r3, #48	; 0x30
 8006fb6:	d064      	beq.n	8007082 <HAL_TIM_ConfigClockSource+0x15a>
 8006fb8:	2b30      	cmp	r3, #48	; 0x30
 8006fba:	d86b      	bhi.n	8007094 <HAL_TIM_ConfigClockSource+0x16c>
 8006fbc:	2b20      	cmp	r3, #32
 8006fbe:	d060      	beq.n	8007082 <HAL_TIM_ConfigClockSource+0x15a>
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	d867      	bhi.n	8007094 <HAL_TIM_ConfigClockSource+0x16c>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d05c      	beq.n	8007082 <HAL_TIM_ConfigClockSource+0x15a>
 8006fc8:	2b10      	cmp	r3, #16
 8006fca:	d05a      	beq.n	8007082 <HAL_TIM_ConfigClockSource+0x15a>
 8006fcc:	e062      	b.n	8007094 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6818      	ldr	r0, [r3, #0]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	6899      	ldr	r1, [r3, #8]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f000 fb19 	bl	8007614 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ff0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	609a      	str	r2, [r3, #8]
      break;
 8006ffa:	e04f      	b.n	800709c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6818      	ldr	r0, [r3, #0]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	6899      	ldr	r1, [r3, #8]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f000 fb02 	bl	8007614 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800701e:	609a      	str	r2, [r3, #8]
      break;
 8007020:	e03c      	b.n	800709c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6818      	ldr	r0, [r3, #0]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	6859      	ldr	r1, [r3, #4]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	461a      	mov	r2, r3
 8007030:	f000 fa76 	bl	8007520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2150      	movs	r1, #80	; 0x50
 800703a:	4618      	mov	r0, r3
 800703c:	f000 facf 	bl	80075de <TIM_ITRx_SetConfig>
      break;
 8007040:	e02c      	b.n	800709c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6818      	ldr	r0, [r3, #0]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	6859      	ldr	r1, [r3, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	461a      	mov	r2, r3
 8007050:	f000 fa95 	bl	800757e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2160      	movs	r1, #96	; 0x60
 800705a:	4618      	mov	r0, r3
 800705c:	f000 fabf 	bl	80075de <TIM_ITRx_SetConfig>
      break;
 8007060:	e01c      	b.n	800709c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6818      	ldr	r0, [r3, #0]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	6859      	ldr	r1, [r3, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	461a      	mov	r2, r3
 8007070:	f000 fa56 	bl	8007520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2140      	movs	r1, #64	; 0x40
 800707a:	4618      	mov	r0, r3
 800707c:	f000 faaf 	bl	80075de <TIM_ITRx_SetConfig>
      break;
 8007080:	e00c      	b.n	800709c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4619      	mov	r1, r3
 800708c:	4610      	mov	r0, r2
 800708e:	f000 faa6 	bl	80075de <TIM_ITRx_SetConfig>
      break;
 8007092:	e003      	b.n	800709c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	73fb      	strb	r3, [r7, #15]
      break;
 8007098:	e000      	b.n	800709c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800709a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070d2:	bf00      	nop
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070e6:	bf00      	nop
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b083      	sub	sp, #12
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
	...

08007108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a34      	ldr	r2, [pc, #208]	; (80071ec <TIM_Base_SetConfig+0xe4>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d00f      	beq.n	8007140 <TIM_Base_SetConfig+0x38>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007126:	d00b      	beq.n	8007140 <TIM_Base_SetConfig+0x38>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a31      	ldr	r2, [pc, #196]	; (80071f0 <TIM_Base_SetConfig+0xe8>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d007      	beq.n	8007140 <TIM_Base_SetConfig+0x38>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a30      	ldr	r2, [pc, #192]	; (80071f4 <TIM_Base_SetConfig+0xec>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d003      	beq.n	8007140 <TIM_Base_SetConfig+0x38>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a2f      	ldr	r2, [pc, #188]	; (80071f8 <TIM_Base_SetConfig+0xf0>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d108      	bne.n	8007152 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	4313      	orrs	r3, r2
 8007150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a25      	ldr	r2, [pc, #148]	; (80071ec <TIM_Base_SetConfig+0xe4>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d01b      	beq.n	8007192 <TIM_Base_SetConfig+0x8a>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007160:	d017      	beq.n	8007192 <TIM_Base_SetConfig+0x8a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a22      	ldr	r2, [pc, #136]	; (80071f0 <TIM_Base_SetConfig+0xe8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d013      	beq.n	8007192 <TIM_Base_SetConfig+0x8a>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a21      	ldr	r2, [pc, #132]	; (80071f4 <TIM_Base_SetConfig+0xec>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d00f      	beq.n	8007192 <TIM_Base_SetConfig+0x8a>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a20      	ldr	r2, [pc, #128]	; (80071f8 <TIM_Base_SetConfig+0xf0>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00b      	beq.n	8007192 <TIM_Base_SetConfig+0x8a>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a1f      	ldr	r2, [pc, #124]	; (80071fc <TIM_Base_SetConfig+0xf4>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d007      	beq.n	8007192 <TIM_Base_SetConfig+0x8a>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a1e      	ldr	r2, [pc, #120]	; (8007200 <TIM_Base_SetConfig+0xf8>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d003      	beq.n	8007192 <TIM_Base_SetConfig+0x8a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a1d      	ldr	r2, [pc, #116]	; (8007204 <TIM_Base_SetConfig+0xfc>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d108      	bne.n	80071a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	689a      	ldr	r2, [r3, #8]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a08      	ldr	r2, [pc, #32]	; (80071ec <TIM_Base_SetConfig+0xe4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d103      	bne.n	80071d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	691a      	ldr	r2, [r3, #16]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	615a      	str	r2, [r3, #20]
}
 80071de:	bf00      	nop
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40010000 	.word	0x40010000
 80071f0:	40000400 	.word	0x40000400
 80071f4:	40000800 	.word	0x40000800
 80071f8:	40000c00 	.word	0x40000c00
 80071fc:	40014000 	.word	0x40014000
 8007200:	40014400 	.word	0x40014400
 8007204:	40014800 	.word	0x40014800

08007208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	f023 0201 	bic.w	r2, r3, #1
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0303 	bic.w	r3, r3, #3
 800723e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f023 0302 	bic.w	r3, r3, #2
 8007250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	4313      	orrs	r3, r2
 800725a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a1c      	ldr	r2, [pc, #112]	; (80072d0 <TIM_OC1_SetConfig+0xc8>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d10c      	bne.n	800727e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	f023 0308 	bic.w	r3, r3, #8
 800726a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	4313      	orrs	r3, r2
 8007274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f023 0304 	bic.w	r3, r3, #4
 800727c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a13      	ldr	r2, [pc, #76]	; (80072d0 <TIM_OC1_SetConfig+0xc8>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d111      	bne.n	80072aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800728c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	4313      	orrs	r3, r2
 800729e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	621a      	str	r2, [r3, #32]
}
 80072c4:	bf00      	nop
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	40010000 	.word	0x40010000

080072d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	f023 0210 	bic.w	r2, r3, #16
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800730a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	021b      	lsls	r3, r3, #8
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f023 0320 	bic.w	r3, r3, #32
 800731e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	4313      	orrs	r3, r2
 800732a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a1e      	ldr	r2, [pc, #120]	; (80073a8 <TIM_OC2_SetConfig+0xd4>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d10d      	bne.n	8007350 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800733a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	011b      	lsls	r3, r3, #4
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	4313      	orrs	r3, r2
 8007346:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800734e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a15      	ldr	r2, [pc, #84]	; (80073a8 <TIM_OC2_SetConfig+0xd4>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d113      	bne.n	8007380 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800735e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	4313      	orrs	r3, r2
 8007372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	4313      	orrs	r3, r2
 800737e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	621a      	str	r2, [r3, #32]
}
 800739a:	bf00      	nop
 800739c:	371c      	adds	r7, #28
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	40010000 	.word	0x40010000

080073ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f023 0303 	bic.w	r3, r3, #3
 80073e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	021b      	lsls	r3, r3, #8
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	4313      	orrs	r3, r2
 8007400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a1d      	ldr	r2, [pc, #116]	; (800747c <TIM_OC3_SetConfig+0xd0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d10d      	bne.n	8007426 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007410:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	021b      	lsls	r3, r3, #8
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	4313      	orrs	r3, r2
 800741c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a14      	ldr	r2, [pc, #80]	; (800747c <TIM_OC3_SetConfig+0xd0>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d113      	bne.n	8007456 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800743c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	011b      	lsls	r3, r3, #4
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	4313      	orrs	r3, r2
 8007448:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	4313      	orrs	r3, r2
 8007454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	621a      	str	r2, [r3, #32]
}
 8007470:	bf00      	nop
 8007472:	371c      	adds	r7, #28
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	40010000 	.word	0x40010000

08007480 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	021b      	lsls	r3, r3, #8
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	031b      	lsls	r3, r3, #12
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a10      	ldr	r2, [pc, #64]	; (800751c <TIM_OC4_SetConfig+0x9c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d109      	bne.n	80074f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	019b      	lsls	r3, r3, #6
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	621a      	str	r2, [r3, #32]
}
 800750e:	bf00      	nop
 8007510:	371c      	adds	r7, #28
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	40010000 	.word	0x40010000

08007520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f023 0201 	bic.w	r2, r3, #1
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800754a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f023 030a 	bic.w	r3, r3, #10
 800755c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	4313      	orrs	r3, r2
 8007564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	621a      	str	r2, [r3, #32]
}
 8007572:	bf00      	nop
 8007574:	371c      	adds	r7, #28
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800757e:	b480      	push	{r7}
 8007580:	b087      	sub	sp, #28
 8007582:	af00      	add	r7, sp, #0
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	f023 0210 	bic.w	r2, r3, #16
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	031b      	lsls	r3, r3, #12
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	621a      	str	r2, [r3, #32]
}
 80075d2:	bf00      	nop
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075de:	b480      	push	{r7}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	f043 0307 	orr.w	r3, r3, #7
 8007600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	609a      	str	r2, [r3, #8]
}
 8007608:	bf00      	nop
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800762e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	021a      	lsls	r2, r3, #8
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	431a      	orrs	r2, r3
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	4313      	orrs	r3, r2
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	4313      	orrs	r3, r2
 8007640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	609a      	str	r2, [r3, #8]
}
 8007648:	bf00      	nop
 800764a:	371c      	adds	r7, #28
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007664:	2b01      	cmp	r3, #1
 8007666:	d101      	bne.n	800766c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007668:	2302      	movs	r3, #2
 800766a:	e050      	b.n	800770e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2202      	movs	r2, #2
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007692:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	4313      	orrs	r3, r2
 800769c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a1c      	ldr	r2, [pc, #112]	; (800771c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d018      	beq.n	80076e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b8:	d013      	beq.n	80076e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a18      	ldr	r2, [pc, #96]	; (8007720 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d00e      	beq.n	80076e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a16      	ldr	r2, [pc, #88]	; (8007724 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d009      	beq.n	80076e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a15      	ldr	r2, [pc, #84]	; (8007728 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d004      	beq.n	80076e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a13      	ldr	r2, [pc, #76]	; (800772c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d10c      	bne.n	80076fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	40010000 	.word	0x40010000
 8007720:	40000400 	.word	0x40000400
 8007724:	40000800 	.word	0x40000800
 8007728:	40000c00 	.word	0x40000c00
 800772c:	40014000 	.word	0x40014000

08007730 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007744:	2b01      	cmp	r3, #1
 8007746:	d101      	bne.n	800774c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007748:	2302      	movs	r3, #2
 800774a:	e03d      	b.n	80077c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	4313      	orrs	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	4313      	orrs	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	4313      	orrs	r3, r2
 800777c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4313      	orrs	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e03f      	b.n	800788e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d106      	bne.n	8007828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7fb ffa6 	bl	8003774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2224      	movs	r2, #36	; 0x24
 800782c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68da      	ldr	r2, [r3, #12]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800783e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f001 f8c5 	bl	80089d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	691a      	ldr	r2, [r3, #16]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	695a      	ldr	r2, [r3, #20]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2220      	movs	r2, #32
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2220      	movs	r2, #32
 8007888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d101      	bne.n	80078a8 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e047      	b.n	8007938 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d106      	bne.n	80078c2 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7fb ff59 	bl	8003774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2224      	movs	r2, #36	; 0x24
 80078c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f001 f878 	bl	80089d0 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	691a      	ldr	r2, [r3, #16]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	695a      	ldr	r2, [r3, #20]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80078fe:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	695a      	ldr	r2, [r3, #20]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0208 	orr.w	r2, r2, #8
 800790e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68da      	ldr	r2, [r3, #12]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800791e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2220      	movs	r2, #32
 800792a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2220      	movs	r2, #32
 8007932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b08a      	sub	sp, #40	; 0x28
 8007944:	af02      	add	r7, sp, #8
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	603b      	str	r3, [r7, #0]
 800794c:	4613      	mov	r3, r2
 800794e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b20      	cmp	r3, #32
 800795e:	d17c      	bne.n	8007a5a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d002      	beq.n	800796c <HAL_UART_Transmit+0x2c>
 8007966:	88fb      	ldrh	r3, [r7, #6]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e075      	b.n	8007a5c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007976:	2b01      	cmp	r3, #1
 8007978:	d101      	bne.n	800797e <HAL_UART_Transmit+0x3e>
 800797a:	2302      	movs	r3, #2
 800797c:	e06e      	b.n	8007a5c <HAL_UART_Transmit+0x11c>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2221      	movs	r2, #33	; 0x21
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007994:	f7fc fa0a 	bl	8003dac <HAL_GetTick>
 8007998:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	88fa      	ldrh	r2, [r7, #6]
 800799e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	88fa      	ldrh	r2, [r7, #6]
 80079a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ae:	d108      	bne.n	80079c2 <HAL_UART_Transmit+0x82>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d104      	bne.n	80079c2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80079b8:	2300      	movs	r3, #0
 80079ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	61bb      	str	r3, [r7, #24]
 80079c0:	e003      	b.n	80079ca <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079c6:	2300      	movs	r3, #0
 80079c8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80079d2:	e02a      	b.n	8007a2a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	2200      	movs	r2, #0
 80079dc:	2180      	movs	r1, #128	; 0x80
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 fd2b 	bl	800843a <UART_WaitOnFlagUntilTimeout>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e036      	b.n	8007a5c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10b      	bne.n	8007a0c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	461a      	mov	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a02:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	3302      	adds	r3, #2
 8007a08:	61bb      	str	r3, [r7, #24]
 8007a0a:	e007      	b.n	8007a1c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	781a      	ldrb	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	3b01      	subs	r3, #1
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1cf      	bne.n	80079d4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	2140      	movs	r1, #64	; 0x40
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f000 fcfb 	bl	800843a <UART_WaitOnFlagUntilTimeout>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e006      	b.n	8007a5c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	e000      	b.n	8007a5c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007a5a:	2302      	movs	r3, #2
  }
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3720      	adds	r7, #32
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08c      	sub	sp, #48	; 0x30
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b20      	cmp	r3, #32
 8007a7c:	d165      	bne.n	8007b4a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <HAL_UART_Transmit_DMA+0x26>
 8007a84:	88fb      	ldrh	r3, [r7, #6]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e05e      	b.n	8007b4c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d101      	bne.n	8007a9c <HAL_UART_Transmit_DMA+0x38>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	e057      	b.n	8007b4c <HAL_UART_Transmit_DMA+0xe8>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	88fa      	ldrh	r2, [r7, #6]
 8007aae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	88fa      	ldrh	r2, [r7, #6]
 8007ab4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2221      	movs	r2, #33	; 0x21
 8007ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac8:	4a22      	ldr	r2, [pc, #136]	; (8007b54 <HAL_UART_Transmit_DMA+0xf0>)
 8007aca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad0:	4a21      	ldr	r2, [pc, #132]	; (8007b58 <HAL_UART_Transmit_DMA+0xf4>)
 8007ad2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad8:	4a20      	ldr	r2, [pc, #128]	; (8007b5c <HAL_UART_Transmit_DMA+0xf8>)
 8007ada:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007ae4:	f107 0308 	add.w	r3, r7, #8
 8007ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af0:	6819      	ldr	r1, [r3, #0]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3304      	adds	r3, #4
 8007af8:	461a      	mov	r2, r3
 8007afa:	88fb      	ldrh	r3, [r7, #6]
 8007afc:	f7fc ff18 	bl	8004930 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b08:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3314      	adds	r3, #20
 8007b18:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	e853 3f00 	ldrex	r3, [r3]
 8007b20:	617b      	str	r3, [r7, #20]
   return(result);
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	3314      	adds	r3, #20
 8007b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b32:	627a      	str	r2, [r7, #36]	; 0x24
 8007b34:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b36:	6a39      	ldr	r1, [r7, #32]
 8007b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b3a:	e841 2300 	strex	r3, r2, [r1]
 8007b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1e5      	bne.n	8007b12 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	e000      	b.n	8007b4c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007b4a:	2302      	movs	r3, #2
  }
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3730      	adds	r7, #48	; 0x30
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	08008195 	.word	0x08008195
 8007b58:	0800822f 	.word	0x0800822f
 8007b5c:	080083a7 	.word	0x080083a7

08007b60 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	d11d      	bne.n	8007bb6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <HAL_UART_Receive_DMA+0x26>
 8007b80:	88fb      	ldrh	r3, [r7, #6]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e016      	b.n	8007bb8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d101      	bne.n	8007b98 <HAL_UART_Receive_DMA+0x38>
 8007b94:	2302      	movs	r3, #2
 8007b96:	e00f      	b.n	8007bb8 <HAL_UART_Receive_DMA+0x58>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007ba6:	88fb      	ldrh	r3, [r7, #6]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	68b9      	ldr	r1, [r7, #8]
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f000 fcb3 	bl	8008518 <UART_Start_Receive_DMA>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	e000      	b.n	8007bb8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007bb6:	2302      	movs	r3, #2
  }
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b0ba      	sub	sp, #232	; 0xe8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf6:	f003 030f 	and.w	r3, r3, #15
 8007bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10f      	bne.n	8007c26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0a:	f003 0320 	and.w	r3, r3, #32
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d009      	beq.n	8007c26 <HAL_UART_IRQHandler+0x66>
 8007c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c16:	f003 0320 	and.w	r3, r3, #32
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d003      	beq.n	8007c26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fe1b 	bl	800885a <UART_Receive_IT>
      return;
 8007c24:	e256      	b.n	80080d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 80de 	beq.w	8007dec <HAL_UART_IRQHandler+0x22c>
 8007c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d106      	bne.n	8007c4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c40:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 80d1 	beq.w	8007dec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00b      	beq.n	8007c6e <HAL_UART_IRQHandler+0xae>
 8007c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d005      	beq.n	8007c6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	f043 0201 	orr.w	r2, r3, #1
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c72:	f003 0304 	and.w	r3, r3, #4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00b      	beq.n	8007c92 <HAL_UART_IRQHandler+0xd2>
 8007c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d005      	beq.n	8007c92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8a:	f043 0202 	orr.w	r2, r3, #2
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00b      	beq.n	8007cb6 <HAL_UART_IRQHandler+0xf6>
 8007c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d005      	beq.n	8007cb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	f043 0204 	orr.w	r2, r3, #4
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d011      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x126>
 8007cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cc6:	f003 0320 	and.w	r3, r3, #32
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d105      	bne.n	8007cda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d005      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cde:	f043 0208 	orr.w	r2, r3, #8
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 81ed 	beq.w	80080ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cf4:	f003 0320 	and.w	r3, r3, #32
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d008      	beq.n	8007d0e <HAL_UART_IRQHandler+0x14e>
 8007cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d00:	f003 0320 	and.w	r3, r3, #32
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fda6 	bl	800885a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	695b      	ldr	r3, [r3, #20]
 8007d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d18:	2b40      	cmp	r3, #64	; 0x40
 8007d1a:	bf0c      	ite	eq
 8007d1c:	2301      	moveq	r3, #1
 8007d1e:	2300      	movne	r3, #0
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2a:	f003 0308 	and.w	r3, r3, #8
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d103      	bne.n	8007d3a <HAL_UART_IRQHandler+0x17a>
 8007d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d04f      	beq.n	8007dda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fcae 	bl	800869c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4a:	2b40      	cmp	r3, #64	; 0x40
 8007d4c:	d141      	bne.n	8007dd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3314      	adds	r3, #20
 8007d54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d5c:	e853 3f00 	ldrex	r3, [r3]
 8007d60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3314      	adds	r3, #20
 8007d76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1d9      	bne.n	8007d4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d013      	beq.n	8007dca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da6:	4a7d      	ldr	r2, [pc, #500]	; (8007f9c <HAL_UART_IRQHandler+0x3dc>)
 8007da8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fc fe86 	bl	8004ac0 <HAL_DMA_Abort_IT>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d016      	beq.n	8007de8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc8:	e00e      	b.n	8007de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f9ae 	bl	800812c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd0:	e00a      	b.n	8007de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f9aa 	bl	800812c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd8:	e006      	b.n	8007de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f9a6 	bl	800812c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007de6:	e170      	b.n	80080ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007de8:	bf00      	nop
    return;
 8007dea:	e16e      	b.n	80080ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	f040 814a 	bne.w	800808a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dfa:	f003 0310 	and.w	r3, r3, #16
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 8143 	beq.w	800808a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e08:	f003 0310 	and.w	r3, r3, #16
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 813c 	beq.w	800808a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e12:	2300      	movs	r3, #0
 8007e14:	60bb      	str	r3, [r7, #8]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	60bb      	str	r3, [r7, #8]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	60bb      	str	r3, [r7, #8]
 8007e26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e32:	2b40      	cmp	r3, #64	; 0x40
 8007e34:	f040 80b4 	bne.w	8007fa0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 8140 	beq.w	80080ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e56:	429a      	cmp	r2, r3
 8007e58:	f080 8139 	bcs.w	80080ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e6e:	f000 8088 	beq.w	8007f82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	330c      	adds	r3, #12
 8007e78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e80:	e853 3f00 	ldrex	r3, [r3]
 8007e84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	330c      	adds	r3, #12
 8007e9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007e9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ea2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007eaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007eae:	e841 2300 	strex	r3, r2, [r1]
 8007eb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1d9      	bne.n	8007e72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3314      	adds	r3, #20
 8007ec4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ec8:	e853 3f00 	ldrex	r3, [r3]
 8007ecc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ece:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ed0:	f023 0301 	bic.w	r3, r3, #1
 8007ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	3314      	adds	r3, #20
 8007ede:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ee2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ee6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007eea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007eee:	e841 2300 	strex	r3, r2, [r1]
 8007ef2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1e1      	bne.n	8007ebe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3314      	adds	r3, #20
 8007f00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f04:	e853 3f00 	ldrex	r3, [r3]
 8007f08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	3314      	adds	r3, #20
 8007f1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f26:	e841 2300 	strex	r3, r2, [r1]
 8007f2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1e3      	bne.n	8007efa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	330c      	adds	r3, #12
 8007f46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f4a:	e853 3f00 	ldrex	r3, [r3]
 8007f4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f52:	f023 0310 	bic.w	r3, r3, #16
 8007f56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	330c      	adds	r3, #12
 8007f60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007f64:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f66:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f6c:	e841 2300 	strex	r3, r2, [r1]
 8007f70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e3      	bne.n	8007f40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fc fd2f 	bl	80049e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f8d4 	bl	8008140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f98:	e099      	b.n	80080ce <HAL_UART_IRQHandler+0x50e>
 8007f9a:	bf00      	nop
 8007f9c:	08008763 	.word	0x08008763
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 808b 	beq.w	80080d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007fbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 8086 	beq.w	80080d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	330c      	adds	r3, #12
 8007fcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd0:	e853 3f00 	ldrex	r3, [r3]
 8007fd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	330c      	adds	r3, #12
 8007fe6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007fea:	647a      	str	r2, [r7, #68]	; 0x44
 8007fec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ff0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e3      	bne.n	8007fc6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3314      	adds	r3, #20
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	623b      	str	r3, [r7, #32]
   return(result);
 800800e:	6a3b      	ldr	r3, [r7, #32]
 8008010:	f023 0301 	bic.w	r3, r3, #1
 8008014:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3314      	adds	r3, #20
 800801e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008022:	633a      	str	r2, [r7, #48]	; 0x30
 8008024:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e3      	bne.n	8007ffe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2220      	movs	r2, #32
 800803a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	330c      	adds	r3, #12
 800804a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	e853 3f00 	ldrex	r3, [r3]
 8008052:	60fb      	str	r3, [r7, #12]
   return(result);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f023 0310 	bic.w	r3, r3, #16
 800805a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	330c      	adds	r3, #12
 8008064:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008068:	61fa      	str	r2, [r7, #28]
 800806a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806c:	69b9      	ldr	r1, [r7, #24]
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	e841 2300 	strex	r3, r2, [r1]
 8008074:	617b      	str	r3, [r7, #20]
   return(result);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e3      	bne.n	8008044 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800807c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f85c 	bl	8008140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008088:	e023      	b.n	80080d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800808a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800808e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008092:	2b00      	cmp	r3, #0
 8008094:	d009      	beq.n	80080aa <HAL_UART_IRQHandler+0x4ea>
 8008096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800809a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fb71 	bl	800878a <UART_Transmit_IT>
    return;
 80080a8:	e014      	b.n	80080d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80080aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00e      	beq.n	80080d4 <HAL_UART_IRQHandler+0x514>
 80080b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d008      	beq.n	80080d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fbb1 	bl	800882a <UART_EndTransmit_IT>
    return;
 80080c8:	e004      	b.n	80080d4 <HAL_UART_IRQHandler+0x514>
    return;
 80080ca:	bf00      	nop
 80080cc:	e002      	b.n	80080d4 <HAL_UART_IRQHandler+0x514>
      return;
 80080ce:	bf00      	nop
 80080d0:	e000      	b.n	80080d4 <HAL_UART_IRQHandler+0x514>
      return;
 80080d2:	bf00      	nop
  }
}
 80080d4:	37e8      	adds	r7, #232	; 0xe8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop

080080dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800814c:	bf00      	nop
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8008160:	2300      	movs	r3, #0
 8008162:	60fb      	str	r3, [r7, #12]
 8008164:	2300      	movs	r3, #0
 8008166:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800816e:	b2db      	uxtb	r3, r3
 8008170:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008178:	b2db      	uxtb	r3, r3
 800817a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	b2da      	uxtb	r2, r3
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	b2db      	uxtb	r3, r3
 8008184:	4313      	orrs	r3, r2
 8008186:	b2db      	uxtb	r3, r3
}
 8008188:	4618      	mov	r0, r3
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b090      	sub	sp, #64	; 0x40
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d137      	bne.n	8008220 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80081b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081b2:	2200      	movs	r2, #0
 80081b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80081b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3314      	adds	r3, #20
 80081bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	e853 3f00 	ldrex	r3, [r3]
 80081c4:	623b      	str	r3, [r7, #32]
   return(result);
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80081ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	3314      	adds	r3, #20
 80081d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081d6:	633a      	str	r2, [r7, #48]	; 0x30
 80081d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081de:	e841 2300 	strex	r3, r2, [r1]
 80081e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1e5      	bne.n	80081b6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	330c      	adds	r3, #12
 80081f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	e853 3f00 	ldrex	r3, [r3]
 80081f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008200:	637b      	str	r3, [r7, #52]	; 0x34
 8008202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	330c      	adds	r3, #12
 8008208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800820a:	61fa      	str	r2, [r7, #28]
 800820c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820e:	69b9      	ldr	r1, [r7, #24]
 8008210:	69fa      	ldr	r2, [r7, #28]
 8008212:	e841 2300 	strex	r3, r2, [r1]
 8008216:	617b      	str	r3, [r7, #20]
   return(result);
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1e5      	bne.n	80081ea <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800821e:	e002      	b.n	8008226 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008220:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008222:	f7ff ff5b 	bl	80080dc <HAL_UART_TxCpltCallback>
}
 8008226:	bf00      	nop
 8008228:	3740      	adds	r7, #64	; 0x40
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f7ff ff57 	bl	80080f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008242:	bf00      	nop
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b09c      	sub	sp, #112	; 0x70
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008256:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008262:	2b00      	cmp	r3, #0
 8008264:	d172      	bne.n	800834c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008268:	2200      	movs	r2, #0
 800826a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800826c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	330c      	adds	r3, #12
 8008272:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008276:	e853 3f00 	ldrex	r3, [r3]
 800827a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800827c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800827e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008282:	66bb      	str	r3, [r7, #104]	; 0x68
 8008284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	330c      	adds	r3, #12
 800828a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800828c:	65ba      	str	r2, [r7, #88]	; 0x58
 800828e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008290:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008292:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008294:	e841 2300 	strex	r3, r2, [r1]
 8008298:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800829a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1e5      	bne.n	800826c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3314      	adds	r3, #20
 80082a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082aa:	e853 3f00 	ldrex	r3, [r3]
 80082ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b2:	f023 0301 	bic.w	r3, r3, #1
 80082b6:	667b      	str	r3, [r7, #100]	; 0x64
 80082b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	3314      	adds	r3, #20
 80082be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80082c0:	647a      	str	r2, [r7, #68]	; 0x44
 80082c2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082c8:	e841 2300 	strex	r3, r2, [r1]
 80082cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1e5      	bne.n	80082a0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	3314      	adds	r3, #20
 80082da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	623b      	str	r3, [r7, #32]
   return(result);
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ea:	663b      	str	r3, [r7, #96]	; 0x60
 80082ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	3314      	adds	r3, #20
 80082f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082f4:	633a      	str	r2, [r7, #48]	; 0x30
 80082f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e5      	bne.n	80082d4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830a:	2220      	movs	r2, #32
 800830c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008314:	2b01      	cmp	r3, #1
 8008316:	d119      	bne.n	800834c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	330c      	adds	r3, #12
 800831e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	e853 3f00 	ldrex	r3, [r3]
 8008326:	60fb      	str	r3, [r7, #12]
   return(result);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f023 0310 	bic.w	r3, r3, #16
 800832e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	330c      	adds	r3, #12
 8008336:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008338:	61fa      	str	r2, [r7, #28]
 800833a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833c:	69b9      	ldr	r1, [r7, #24]
 800833e:	69fa      	ldr	r2, [r7, #28]
 8008340:	e841 2300 	strex	r3, r2, [r1]
 8008344:	617b      	str	r3, [r7, #20]
   return(result);
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1e5      	bne.n	8008318 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800834c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800834e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008350:	2b01      	cmp	r3, #1
 8008352:	d106      	bne.n	8008362 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008356:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008358:	4619      	mov	r1, r3
 800835a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800835c:	f7ff fef0 	bl	8008140 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008360:	e002      	b.n	8008368 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008362:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008364:	f7ff fece 	bl	8008104 <HAL_UART_RxCpltCallback>
}
 8008368:	bf00      	nop
 800836a:	3770      	adds	r7, #112	; 0x70
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008382:	2b01      	cmp	r3, #1
 8008384:	d108      	bne.n	8008398 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800838a:	085b      	lsrs	r3, r3, #1
 800838c:	b29b      	uxth	r3, r3
 800838e:	4619      	mov	r1, r3
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f7ff fed5 	bl	8008140 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008396:	e002      	b.n	800839e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f7ff febd 	bl	8008118 <HAL_UART_RxHalfCpltCallback>
}
 800839e:	bf00      	nop
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b084      	sub	sp, #16
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c2:	2b80      	cmp	r3, #128	; 0x80
 80083c4:	bf0c      	ite	eq
 80083c6:	2301      	moveq	r3, #1
 80083c8:	2300      	movne	r3, #0
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b21      	cmp	r3, #33	; 0x21
 80083d8:	d108      	bne.n	80083ec <UART_DMAError+0x46>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d005      	beq.n	80083ec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2200      	movs	r2, #0
 80083e4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80083e6:	68b8      	ldr	r0, [r7, #8]
 80083e8:	f000 f930 	bl	800864c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f6:	2b40      	cmp	r3, #64	; 0x40
 80083f8:	bf0c      	ite	eq
 80083fa:	2301      	moveq	r3, #1
 80083fc:	2300      	movne	r3, #0
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b22      	cmp	r3, #34	; 0x22
 800840c:	d108      	bne.n	8008420 <UART_DMAError+0x7a>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d005      	beq.n	8008420 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2200      	movs	r2, #0
 8008418:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800841a:	68b8      	ldr	r0, [r7, #8]
 800841c:	f000 f93e 	bl	800869c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008424:	f043 0210 	orr.w	r2, r3, #16
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800842c:	68b8      	ldr	r0, [r7, #8]
 800842e:	f7ff fe7d 	bl	800812c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008432:	bf00      	nop
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b090      	sub	sp, #64	; 0x40
 800843e:	af00      	add	r7, sp, #0
 8008440:	60f8      	str	r0, [r7, #12]
 8008442:	60b9      	str	r1, [r7, #8]
 8008444:	603b      	str	r3, [r7, #0]
 8008446:	4613      	mov	r3, r2
 8008448:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800844a:	e050      	b.n	80084ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800844c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800844e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008452:	d04c      	beq.n	80084ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008456:	2b00      	cmp	r3, #0
 8008458:	d007      	beq.n	800846a <UART_WaitOnFlagUntilTimeout+0x30>
 800845a:	f7fb fca7 	bl	8003dac <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008466:	429a      	cmp	r2, r3
 8008468:	d241      	bcs.n	80084ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	330c      	adds	r3, #12
 8008470:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008474:	e853 3f00 	ldrex	r3, [r3]
 8008478:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	330c      	adds	r3, #12
 8008488:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800848a:	637a      	str	r2, [r7, #52]	; 0x34
 800848c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008492:	e841 2300 	strex	r3, r2, [r1]
 8008496:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e5      	bne.n	800846a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3314      	adds	r3, #20
 80084a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	e853 3f00 	ldrex	r3, [r3]
 80084ac:	613b      	str	r3, [r7, #16]
   return(result);
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	f023 0301 	bic.w	r3, r3, #1
 80084b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3314      	adds	r3, #20
 80084bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084be:	623a      	str	r2, [r7, #32]
 80084c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c2:	69f9      	ldr	r1, [r7, #28]
 80084c4:	6a3a      	ldr	r2, [r7, #32]
 80084c6:	e841 2300 	strex	r3, r2, [r1]
 80084ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1e5      	bne.n	800849e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2220      	movs	r2, #32
 80084d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2220      	movs	r2, #32
 80084de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e00f      	b.n	800850e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	4013      	ands	r3, r2
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	bf0c      	ite	eq
 80084fe:	2301      	moveq	r3, #1
 8008500:	2300      	movne	r3, #0
 8008502:	b2db      	uxtb	r3, r3
 8008504:	461a      	mov	r2, r3
 8008506:	79fb      	ldrb	r3, [r7, #7]
 8008508:	429a      	cmp	r2, r3
 800850a:	d09f      	beq.n	800844c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3740      	adds	r7, #64	; 0x40
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
	...

08008518 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b098      	sub	sp, #96	; 0x60
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	4613      	mov	r3, r2
 8008524:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	88fa      	ldrh	r2, [r7, #6]
 8008530:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2222      	movs	r2, #34	; 0x22
 800853c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008544:	4a3e      	ldr	r2, [pc, #248]	; (8008640 <UART_Start_Receive_DMA+0x128>)
 8008546:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854c:	4a3d      	ldr	r2, [pc, #244]	; (8008644 <UART_Start_Receive_DMA+0x12c>)
 800854e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008554:	4a3c      	ldr	r2, [pc, #240]	; (8008648 <UART_Start_Receive_DMA+0x130>)
 8008556:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855c:	2200      	movs	r2, #0
 800855e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008560:	f107 0308 	add.w	r3, r7, #8
 8008564:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3304      	adds	r3, #4
 8008570:	4619      	mov	r1, r3
 8008572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	88fb      	ldrh	r3, [r7, #6]
 8008578:	f7fc f9da 	bl	8004930 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800857c:	2300      	movs	r3, #0
 800857e:	613b      	str	r3, [r7, #16]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	613b      	str	r3, [r7, #16]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	613b      	str	r3, [r7, #16]
 8008590:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	330c      	adds	r3, #12
 80085a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085a4:	e853 3f00 	ldrex	r3, [r3]
 80085a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	330c      	adds	r3, #12
 80085b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 80085bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80085c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085c2:	e841 2300 	strex	r3, r2, [r1]
 80085c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80085c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1e5      	bne.n	800859a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3314      	adds	r3, #20
 80085d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d8:	e853 3f00 	ldrex	r3, [r3]
 80085dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e0:	f043 0301 	orr.w	r3, r3, #1
 80085e4:	657b      	str	r3, [r7, #84]	; 0x54
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3314      	adds	r3, #20
 80085ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80085f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80085f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085f6:	e841 2300 	strex	r3, r2, [r1]
 80085fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1e5      	bne.n	80085ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	3314      	adds	r3, #20
 8008608:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	617b      	str	r3, [r7, #20]
   return(result);
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008618:	653b      	str	r3, [r7, #80]	; 0x50
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3314      	adds	r3, #20
 8008620:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008622:	627a      	str	r2, [r7, #36]	; 0x24
 8008624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	6a39      	ldr	r1, [r7, #32]
 8008628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e5      	bne.n	8008602 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3760      	adds	r7, #96	; 0x60
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	0800824b 	.word	0x0800824b
 8008644:	08008371 	.word	0x08008371
 8008648:	080083a7 	.word	0x080083a7

0800864c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800864c:	b480      	push	{r7}
 800864e:	b089      	sub	sp, #36	; 0x24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	330c      	adds	r3, #12
 800865a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	e853 3f00 	ldrex	r3, [r3]
 8008662:	60bb      	str	r3, [r7, #8]
   return(result);
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800866a:	61fb      	str	r3, [r7, #28]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	330c      	adds	r3, #12
 8008672:	69fa      	ldr	r2, [r7, #28]
 8008674:	61ba      	str	r2, [r7, #24]
 8008676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008678:	6979      	ldr	r1, [r7, #20]
 800867a:	69ba      	ldr	r2, [r7, #24]
 800867c:	e841 2300 	strex	r3, r2, [r1]
 8008680:	613b      	str	r3, [r7, #16]
   return(result);
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1e5      	bne.n	8008654 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2220      	movs	r2, #32
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008690:	bf00      	nop
 8008692:	3724      	adds	r7, #36	; 0x24
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800869c:	b480      	push	{r7}
 800869e:	b095      	sub	sp, #84	; 0x54
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	330c      	adds	r3, #12
 80086aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ae:	e853 3f00 	ldrex	r3, [r3]
 80086b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	330c      	adds	r3, #12
 80086c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086c4:	643a      	str	r2, [r7, #64]	; 0x40
 80086c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086cc:	e841 2300 	strex	r3, r2, [r1]
 80086d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1e5      	bne.n	80086a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	3314      	adds	r3, #20
 80086de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	e853 3f00 	ldrex	r3, [r3]
 80086e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	f023 0301 	bic.w	r3, r3, #1
 80086ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3314      	adds	r3, #20
 80086f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008700:	e841 2300 	strex	r3, r2, [r1]
 8008704:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e5      	bne.n	80086d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008710:	2b01      	cmp	r3, #1
 8008712:	d119      	bne.n	8008748 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	330c      	adds	r3, #12
 800871a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	e853 3f00 	ldrex	r3, [r3]
 8008722:	60bb      	str	r3, [r7, #8]
   return(result);
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	f023 0310 	bic.w	r3, r3, #16
 800872a:	647b      	str	r3, [r7, #68]	; 0x44
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	330c      	adds	r3, #12
 8008732:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008734:	61ba      	str	r2, [r7, #24]
 8008736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008738:	6979      	ldr	r1, [r7, #20]
 800873a:	69ba      	ldr	r2, [r7, #24]
 800873c:	e841 2300 	strex	r3, r2, [r1]
 8008740:	613b      	str	r3, [r7, #16]
   return(result);
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1e5      	bne.n	8008714 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2220      	movs	r2, #32
 800874c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008756:	bf00      	nop
 8008758:	3754      	adds	r7, #84	; 0x54
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f7ff fcd5 	bl	800812c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008782:	bf00      	nop
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800878a:	b480      	push	{r7}
 800878c:	b085      	sub	sp, #20
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b21      	cmp	r3, #33	; 0x21
 800879c:	d13e      	bne.n	800881c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087a6:	d114      	bne.n	80087d2 <UART_Transmit_IT+0x48>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d110      	bne.n	80087d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a1b      	ldr	r3, [r3, #32]
 80087b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	461a      	mov	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	1c9a      	adds	r2, r3, #2
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	621a      	str	r2, [r3, #32]
 80087d0:	e008      	b.n	80087e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	1c59      	adds	r1, r3, #1
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	6211      	str	r1, [r2, #32]
 80087dc:	781a      	ldrb	r2, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	3b01      	subs	r3, #1
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	4619      	mov	r1, r3
 80087f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10f      	bne.n	8008818 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68da      	ldr	r2, [r3, #12]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008806:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008816:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	e000      	b.n	800881e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800881c:	2302      	movs	r3, #2
  }
}
 800881e:	4618      	mov	r0, r3
 8008820:	3714      	adds	r7, #20
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b082      	sub	sp, #8
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008840:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7ff fc46 	bl	80080dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b08c      	sub	sp, #48	; 0x30
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b22      	cmp	r3, #34	; 0x22
 800886c:	f040 80ab 	bne.w	80089c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008878:	d117      	bne.n	80088aa <UART_Receive_IT+0x50>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d113      	bne.n	80088aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008882:	2300      	movs	r3, #0
 8008884:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	b29b      	uxth	r3, r3
 8008894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008898:	b29a      	uxth	r2, r3
 800889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a2:	1c9a      	adds	r2, r3, #2
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	629a      	str	r2, [r3, #40]	; 0x28
 80088a8:	e026      	b.n	80088f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80088b0:	2300      	movs	r3, #0
 80088b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088bc:	d007      	beq.n	80088ce <UART_Receive_IT+0x74>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10a      	bne.n	80088dc <UART_Receive_IT+0x82>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d106      	bne.n	80088dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d8:	701a      	strb	r2, [r3, #0]
 80088da:	e008      	b.n	80088ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f2:	1c5a      	adds	r2, r3, #1
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	3b01      	subs	r3, #1
 8008900:	b29b      	uxth	r3, r3
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	4619      	mov	r1, r3
 8008906:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008908:	2b00      	cmp	r3, #0
 800890a:	d15a      	bne.n	80089c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68da      	ldr	r2, [r3, #12]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f022 0220 	bic.w	r2, r2, #32
 800891a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68da      	ldr	r2, [r3, #12]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800892a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	695a      	ldr	r2, [r3, #20]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f022 0201 	bic.w	r2, r2, #1
 800893a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2220      	movs	r2, #32
 8008940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008948:	2b01      	cmp	r3, #1
 800894a:	d135      	bne.n	80089b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	330c      	adds	r3, #12
 8008958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	e853 3f00 	ldrex	r3, [r3]
 8008960:	613b      	str	r3, [r7, #16]
   return(result);
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	f023 0310 	bic.w	r3, r3, #16
 8008968:	627b      	str	r3, [r7, #36]	; 0x24
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	330c      	adds	r3, #12
 8008970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008972:	623a      	str	r2, [r7, #32]
 8008974:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008976:	69f9      	ldr	r1, [r7, #28]
 8008978:	6a3a      	ldr	r2, [r7, #32]
 800897a:	e841 2300 	strex	r3, r2, [r1]
 800897e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1e5      	bne.n	8008952 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0310 	and.w	r3, r3, #16
 8008990:	2b10      	cmp	r3, #16
 8008992:	d10a      	bne.n	80089aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008994:	2300      	movs	r3, #0
 8008996:	60fb      	str	r3, [r7, #12]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	60fb      	str	r3, [r7, #12]
 80089a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff fbc5 	bl	8008140 <HAL_UARTEx_RxEventCallback>
 80089b6:	e002      	b.n	80089be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7ff fba3 	bl	8008104 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	e002      	b.n	80089c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80089c2:	2300      	movs	r3, #0
 80089c4:	e000      	b.n	80089c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80089c6:	2302      	movs	r3, #2
  }
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3730      	adds	r7, #48	; 0x30
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d4:	b09f      	sub	sp, #124	; 0x7c
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80089e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089e6:	68d9      	ldr	r1, [r3, #12]
 80089e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	ea40 0301 	orr.w	r3, r0, r1
 80089f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089f4:	689a      	ldr	r2, [r3, #8]
 80089f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	431a      	orrs	r2, r3
 80089fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	431a      	orrs	r2, r3
 8008a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a04:	69db      	ldr	r3, [r3, #28]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a14:	f021 010c 	bic.w	r1, r1, #12
 8008a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a1e:	430b      	orrs	r3, r1
 8008a20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a2e:	6999      	ldr	r1, [r3, #24]
 8008a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	ea40 0301 	orr.w	r3, r0, r1
 8008a38:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	4bc5      	ldr	r3, [pc, #788]	; (8008d54 <UART_SetConfig+0x384>)
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d004      	beq.n	8008a4e <UART_SetConfig+0x7e>
 8008a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	4bc3      	ldr	r3, [pc, #780]	; (8008d58 <UART_SetConfig+0x388>)
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d103      	bne.n	8008a56 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a4e:	f7fd fe6d 	bl	800672c <HAL_RCC_GetPCLK2Freq>
 8008a52:	6778      	str	r0, [r7, #116]	; 0x74
 8008a54:	e002      	b.n	8008a5c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a56:	f7fd fe55 	bl	8006704 <HAL_RCC_GetPCLK1Freq>
 8008a5a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a5e:	69db      	ldr	r3, [r3, #28]
 8008a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a64:	f040 80b6 	bne.w	8008bd4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a6a:	461c      	mov	r4, r3
 8008a6c:	f04f 0500 	mov.w	r5, #0
 8008a70:	4622      	mov	r2, r4
 8008a72:	462b      	mov	r3, r5
 8008a74:	1891      	adds	r1, r2, r2
 8008a76:	6439      	str	r1, [r7, #64]	; 0x40
 8008a78:	415b      	adcs	r3, r3
 8008a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8008a7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a80:	1912      	adds	r2, r2, r4
 8008a82:	eb45 0303 	adc.w	r3, r5, r3
 8008a86:	f04f 0000 	mov.w	r0, #0
 8008a8a:	f04f 0100 	mov.w	r1, #0
 8008a8e:	00d9      	lsls	r1, r3, #3
 8008a90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a94:	00d0      	lsls	r0, r2, #3
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	1911      	adds	r1, r2, r4
 8008a9c:	6639      	str	r1, [r7, #96]	; 0x60
 8008a9e:	416b      	adcs	r3, r5
 8008aa0:	667b      	str	r3, [r7, #100]	; 0x64
 8008aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f04f 0300 	mov.w	r3, #0
 8008aac:	1891      	adds	r1, r2, r2
 8008aae:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ab0:	415b      	adcs	r3, r3
 8008ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ab4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ab8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008abc:	f7f8 f88c 	bl	8000bd8 <__aeabi_uldivmod>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	4ba5      	ldr	r3, [pc, #660]	; (8008d5c <UART_SetConfig+0x38c>)
 8008ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8008aca:	095b      	lsrs	r3, r3, #5
 8008acc:	011e      	lsls	r6, r3, #4
 8008ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ad0:	461c      	mov	r4, r3
 8008ad2:	f04f 0500 	mov.w	r5, #0
 8008ad6:	4622      	mov	r2, r4
 8008ad8:	462b      	mov	r3, r5
 8008ada:	1891      	adds	r1, r2, r2
 8008adc:	6339      	str	r1, [r7, #48]	; 0x30
 8008ade:	415b      	adcs	r3, r3
 8008ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ae2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008ae6:	1912      	adds	r2, r2, r4
 8008ae8:	eb45 0303 	adc.w	r3, r5, r3
 8008aec:	f04f 0000 	mov.w	r0, #0
 8008af0:	f04f 0100 	mov.w	r1, #0
 8008af4:	00d9      	lsls	r1, r3, #3
 8008af6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008afa:	00d0      	lsls	r0, r2, #3
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	1911      	adds	r1, r2, r4
 8008b02:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b04:	416b      	adcs	r3, r5
 8008b06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	f04f 0300 	mov.w	r3, #0
 8008b12:	1891      	adds	r1, r2, r2
 8008b14:	62b9      	str	r1, [r7, #40]	; 0x28
 8008b16:	415b      	adcs	r3, r3
 8008b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b1e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008b22:	f7f8 f859 	bl	8000bd8 <__aeabi_uldivmod>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4b8c      	ldr	r3, [pc, #560]	; (8008d5c <UART_SetConfig+0x38c>)
 8008b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8008b30:	095b      	lsrs	r3, r3, #5
 8008b32:	2164      	movs	r1, #100	; 0x64
 8008b34:	fb01 f303 	mul.w	r3, r1, r3
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	00db      	lsls	r3, r3, #3
 8008b3c:	3332      	adds	r3, #50	; 0x32
 8008b3e:	4a87      	ldr	r2, [pc, #540]	; (8008d5c <UART_SetConfig+0x38c>)
 8008b40:	fba2 2303 	umull	r2, r3, r2, r3
 8008b44:	095b      	lsrs	r3, r3, #5
 8008b46:	005b      	lsls	r3, r3, #1
 8008b48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b4c:	441e      	add	r6, r3
 8008b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b50:	4618      	mov	r0, r3
 8008b52:	f04f 0100 	mov.w	r1, #0
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	1894      	adds	r4, r2, r2
 8008b5c:	623c      	str	r4, [r7, #32]
 8008b5e:	415b      	adcs	r3, r3
 8008b60:	627b      	str	r3, [r7, #36]	; 0x24
 8008b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b66:	1812      	adds	r2, r2, r0
 8008b68:	eb41 0303 	adc.w	r3, r1, r3
 8008b6c:	f04f 0400 	mov.w	r4, #0
 8008b70:	f04f 0500 	mov.w	r5, #0
 8008b74:	00dd      	lsls	r5, r3, #3
 8008b76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008b7a:	00d4      	lsls	r4, r2, #3
 8008b7c:	4622      	mov	r2, r4
 8008b7e:	462b      	mov	r3, r5
 8008b80:	1814      	adds	r4, r2, r0
 8008b82:	653c      	str	r4, [r7, #80]	; 0x50
 8008b84:	414b      	adcs	r3, r1
 8008b86:	657b      	str	r3, [r7, #84]	; 0x54
 8008b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	f04f 0300 	mov.w	r3, #0
 8008b92:	1891      	adds	r1, r2, r2
 8008b94:	61b9      	str	r1, [r7, #24]
 8008b96:	415b      	adcs	r3, r3
 8008b98:	61fb      	str	r3, [r7, #28]
 8008b9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b9e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008ba2:	f7f8 f819 	bl	8000bd8 <__aeabi_uldivmod>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4b6c      	ldr	r3, [pc, #432]	; (8008d5c <UART_SetConfig+0x38c>)
 8008bac:	fba3 1302 	umull	r1, r3, r3, r2
 8008bb0:	095b      	lsrs	r3, r3, #5
 8008bb2:	2164      	movs	r1, #100	; 0x64
 8008bb4:	fb01 f303 	mul.w	r3, r1, r3
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	3332      	adds	r3, #50	; 0x32
 8008bbe:	4a67      	ldr	r2, [pc, #412]	; (8008d5c <UART_SetConfig+0x38c>)
 8008bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc4:	095b      	lsrs	r3, r3, #5
 8008bc6:	f003 0207 	and.w	r2, r3, #7
 8008bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4432      	add	r2, r6
 8008bd0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008bd2:	e0b9      	b.n	8008d48 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bd6:	461c      	mov	r4, r3
 8008bd8:	f04f 0500 	mov.w	r5, #0
 8008bdc:	4622      	mov	r2, r4
 8008bde:	462b      	mov	r3, r5
 8008be0:	1891      	adds	r1, r2, r2
 8008be2:	6139      	str	r1, [r7, #16]
 8008be4:	415b      	adcs	r3, r3
 8008be6:	617b      	str	r3, [r7, #20]
 8008be8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008bec:	1912      	adds	r2, r2, r4
 8008bee:	eb45 0303 	adc.w	r3, r5, r3
 8008bf2:	f04f 0000 	mov.w	r0, #0
 8008bf6:	f04f 0100 	mov.w	r1, #0
 8008bfa:	00d9      	lsls	r1, r3, #3
 8008bfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c00:	00d0      	lsls	r0, r2, #3
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	eb12 0804 	adds.w	r8, r2, r4
 8008c0a:	eb43 0905 	adc.w	r9, r3, r5
 8008c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f04f 0100 	mov.w	r1, #0
 8008c18:	f04f 0200 	mov.w	r2, #0
 8008c1c:	f04f 0300 	mov.w	r3, #0
 8008c20:	008b      	lsls	r3, r1, #2
 8008c22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c26:	0082      	lsls	r2, r0, #2
 8008c28:	4640      	mov	r0, r8
 8008c2a:	4649      	mov	r1, r9
 8008c2c:	f7f7 ffd4 	bl	8000bd8 <__aeabi_uldivmod>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	4b49      	ldr	r3, [pc, #292]	; (8008d5c <UART_SetConfig+0x38c>)
 8008c36:	fba3 2302 	umull	r2, r3, r3, r2
 8008c3a:	095b      	lsrs	r3, r3, #5
 8008c3c:	011e      	lsls	r6, r3, #4
 8008c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c40:	4618      	mov	r0, r3
 8008c42:	f04f 0100 	mov.w	r1, #0
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	1894      	adds	r4, r2, r2
 8008c4c:	60bc      	str	r4, [r7, #8]
 8008c4e:	415b      	adcs	r3, r3
 8008c50:	60fb      	str	r3, [r7, #12]
 8008c52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c56:	1812      	adds	r2, r2, r0
 8008c58:	eb41 0303 	adc.w	r3, r1, r3
 8008c5c:	f04f 0400 	mov.w	r4, #0
 8008c60:	f04f 0500 	mov.w	r5, #0
 8008c64:	00dd      	lsls	r5, r3, #3
 8008c66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c6a:	00d4      	lsls	r4, r2, #3
 8008c6c:	4622      	mov	r2, r4
 8008c6e:	462b      	mov	r3, r5
 8008c70:	1814      	adds	r4, r2, r0
 8008c72:	64bc      	str	r4, [r7, #72]	; 0x48
 8008c74:	414b      	adcs	r3, r1
 8008c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f04f 0100 	mov.w	r1, #0
 8008c82:	f04f 0200 	mov.w	r2, #0
 8008c86:	f04f 0300 	mov.w	r3, #0
 8008c8a:	008b      	lsls	r3, r1, #2
 8008c8c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c90:	0082      	lsls	r2, r0, #2
 8008c92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008c96:	f7f7 ff9f 	bl	8000bd8 <__aeabi_uldivmod>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4b2f      	ldr	r3, [pc, #188]	; (8008d5c <UART_SetConfig+0x38c>)
 8008ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ca4:	095b      	lsrs	r3, r3, #5
 8008ca6:	2164      	movs	r1, #100	; 0x64
 8008ca8:	fb01 f303 	mul.w	r3, r1, r3
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	011b      	lsls	r3, r3, #4
 8008cb0:	3332      	adds	r3, #50	; 0x32
 8008cb2:	4a2a      	ldr	r2, [pc, #168]	; (8008d5c <UART_SetConfig+0x38c>)
 8008cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb8:	095b      	lsrs	r3, r3, #5
 8008cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cbe:	441e      	add	r6, r3
 8008cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f04f 0100 	mov.w	r1, #0
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	1894      	adds	r4, r2, r2
 8008cce:	603c      	str	r4, [r7, #0]
 8008cd0:	415b      	adcs	r3, r3
 8008cd2:	607b      	str	r3, [r7, #4]
 8008cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cd8:	1812      	adds	r2, r2, r0
 8008cda:	eb41 0303 	adc.w	r3, r1, r3
 8008cde:	f04f 0400 	mov.w	r4, #0
 8008ce2:	f04f 0500 	mov.w	r5, #0
 8008ce6:	00dd      	lsls	r5, r3, #3
 8008ce8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008cec:	00d4      	lsls	r4, r2, #3
 8008cee:	4622      	mov	r2, r4
 8008cf0:	462b      	mov	r3, r5
 8008cf2:	eb12 0a00 	adds.w	sl, r2, r0
 8008cf6:	eb43 0b01 	adc.w	fp, r3, r1
 8008cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f04f 0100 	mov.w	r1, #0
 8008d04:	f04f 0200 	mov.w	r2, #0
 8008d08:	f04f 0300 	mov.w	r3, #0
 8008d0c:	008b      	lsls	r3, r1, #2
 8008d0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d12:	0082      	lsls	r2, r0, #2
 8008d14:	4650      	mov	r0, sl
 8008d16:	4659      	mov	r1, fp
 8008d18:	f7f7 ff5e 	bl	8000bd8 <__aeabi_uldivmod>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4b0e      	ldr	r3, [pc, #56]	; (8008d5c <UART_SetConfig+0x38c>)
 8008d22:	fba3 1302 	umull	r1, r3, r3, r2
 8008d26:	095b      	lsrs	r3, r3, #5
 8008d28:	2164      	movs	r1, #100	; 0x64
 8008d2a:	fb01 f303 	mul.w	r3, r1, r3
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	011b      	lsls	r3, r3, #4
 8008d32:	3332      	adds	r3, #50	; 0x32
 8008d34:	4a09      	ldr	r2, [pc, #36]	; (8008d5c <UART_SetConfig+0x38c>)
 8008d36:	fba2 2303 	umull	r2, r3, r2, r3
 8008d3a:	095b      	lsrs	r3, r3, #5
 8008d3c:	f003 020f 	and.w	r2, r3, #15
 8008d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4432      	add	r2, r6
 8008d46:	609a      	str	r2, [r3, #8]
}
 8008d48:	bf00      	nop
 8008d4a:	377c      	adds	r7, #124	; 0x7c
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d52:	bf00      	nop
 8008d54:	40011000 	.word	0x40011000
 8008d58:	40011400 	.word	0x40011400
 8008d5c:	51eb851f 	.word	0x51eb851f

08008d60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008d64:	4904      	ldr	r1, [pc, #16]	; (8008d78 <MX_FATFS_Init+0x18>)
 8008d66:	4805      	ldr	r0, [pc, #20]	; (8008d7c <MX_FATFS_Init+0x1c>)
 8008d68:	f002 fe62 	bl	800ba30 <FATFS_LinkDriver>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	461a      	mov	r2, r3
 8008d70:	4b03      	ldr	r3, [pc, #12]	; (8008d80 <MX_FATFS_Init+0x20>)
 8008d72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008d74:	bf00      	nop
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	20006a84 	.word	0x20006a84
 8008d7c:	2000001c 	.word	0x2000001c
 8008d80:	20006a88 	.word	0x20006a88

08008d84 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008d84:	b480      	push	{r7}
 8008d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008d88:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008d9e:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <USER_initialize+0x24>)
 8008da0:	2201      	movs	r2, #1
 8008da2:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008da4:	4b04      	ldr	r3, [pc, #16]	; (8008db8 <USER_initialize+0x24>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	20000019 	.word	0x20000019

08008dbc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008dc6:	4b06      	ldr	r3, [pc, #24]	; (8008de0 <USER_status+0x24>)
 8008dc8:	2201      	movs	r2, #1
 8008dca:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008dcc:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <USER_status+0x24>)
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	20000019 	.word	0x20000019

08008de4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60b9      	str	r1, [r7, #8]
 8008dec:	607a      	str	r2, [r7, #4]
 8008dee:	603b      	str	r3, [r7, #0]
 8008df0:	4603      	mov	r3, r0
 8008df2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008df4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b085      	sub	sp, #20
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	603b      	str	r3, [r7, #0]
 8008e0e:	4603      	mov	r3, r0
 8008e10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8008e12:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	4603      	mov	r3, r0
 8008e28:	603a      	str	r2, [r7, #0]
 8008e2a:	71fb      	strb	r3, [r7, #7]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	73fb      	strb	r3, [r7, #15]
    return res;
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3714      	adds	r7, #20
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
	...

08008e44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008e4e:	79fb      	ldrb	r3, [r7, #7]
 8008e50:	4a08      	ldr	r2, [pc, #32]	; (8008e74 <disk_status+0x30>)
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4413      	add	r3, r2
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	79fa      	ldrb	r2, [r7, #7]
 8008e5c:	4905      	ldr	r1, [pc, #20]	; (8008e74 <disk_status+0x30>)
 8008e5e:	440a      	add	r2, r1
 8008e60:	7a12      	ldrb	r2, [r2, #8]
 8008e62:	4610      	mov	r0, r2
 8008e64:	4798      	blx	r3
 8008e66:	4603      	mov	r3, r0
 8008e68:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	200008b8 	.word	0x200008b8

08008e78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	4603      	mov	r3, r0
 8008e80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008e86:	79fb      	ldrb	r3, [r7, #7]
 8008e88:	4a0d      	ldr	r2, [pc, #52]	; (8008ec0 <disk_initialize+0x48>)
 8008e8a:	5cd3      	ldrb	r3, [r2, r3]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d111      	bne.n	8008eb4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008e90:	79fb      	ldrb	r3, [r7, #7]
 8008e92:	4a0b      	ldr	r2, [pc, #44]	; (8008ec0 <disk_initialize+0x48>)
 8008e94:	2101      	movs	r1, #1
 8008e96:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008e98:	79fb      	ldrb	r3, [r7, #7]
 8008e9a:	4a09      	ldr	r2, [pc, #36]	; (8008ec0 <disk_initialize+0x48>)
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4413      	add	r3, r2
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	79fa      	ldrb	r2, [r7, #7]
 8008ea6:	4906      	ldr	r1, [pc, #24]	; (8008ec0 <disk_initialize+0x48>)
 8008ea8:	440a      	add	r2, r1
 8008eaa:	7a12      	ldrb	r2, [r2, #8]
 8008eac:	4610      	mov	r0, r2
 8008eae:	4798      	blx	r3
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	200008b8 	.word	0x200008b8

08008ec4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008ec4:	b590      	push	{r4, r7, lr}
 8008ec6:	b087      	sub	sp, #28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60b9      	str	r1, [r7, #8]
 8008ecc:	607a      	str	r2, [r7, #4]
 8008ece:	603b      	str	r3, [r7, #0]
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
 8008ed6:	4a0a      	ldr	r2, [pc, #40]	; (8008f00 <disk_read+0x3c>)
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	689c      	ldr	r4, [r3, #8]
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
 8008ee2:	4a07      	ldr	r2, [pc, #28]	; (8008f00 <disk_read+0x3c>)
 8008ee4:	4413      	add	r3, r2
 8008ee6:	7a18      	ldrb	r0, [r3, #8]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	68b9      	ldr	r1, [r7, #8]
 8008eee:	47a0      	blx	r4
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	371c      	adds	r7, #28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd90      	pop	{r4, r7, pc}
 8008efe:	bf00      	nop
 8008f00:	200008b8 	.word	0x200008b8

08008f04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008f04:	b590      	push	{r4, r7, lr}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60b9      	str	r1, [r7, #8]
 8008f0c:	607a      	str	r2, [r7, #4]
 8008f0e:	603b      	str	r3, [r7, #0]
 8008f10:	4603      	mov	r3, r0
 8008f12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	4a0a      	ldr	r2, [pc, #40]	; (8008f40 <disk_write+0x3c>)
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	68dc      	ldr	r4, [r3, #12]
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
 8008f22:	4a07      	ldr	r2, [pc, #28]	; (8008f40 <disk_write+0x3c>)
 8008f24:	4413      	add	r3, r2
 8008f26:	7a18      	ldrb	r0, [r3, #8]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	68b9      	ldr	r1, [r7, #8]
 8008f2e:	47a0      	blx	r4
 8008f30:	4603      	mov	r3, r0
 8008f32:	75fb      	strb	r3, [r7, #23]
  return res;
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	371c      	adds	r7, #28
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd90      	pop	{r4, r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	200008b8 	.word	0x200008b8

08008f44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	603a      	str	r2, [r7, #0]
 8008f4e:	71fb      	strb	r3, [r7, #7]
 8008f50:	460b      	mov	r3, r1
 8008f52:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008f54:	79fb      	ldrb	r3, [r7, #7]
 8008f56:	4a09      	ldr	r2, [pc, #36]	; (8008f7c <disk_ioctl+0x38>)
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	79fa      	ldrb	r2, [r7, #7]
 8008f62:	4906      	ldr	r1, [pc, #24]	; (8008f7c <disk_ioctl+0x38>)
 8008f64:	440a      	add	r2, r1
 8008f66:	7a10      	ldrb	r0, [r2, #8]
 8008f68:	79b9      	ldrb	r1, [r7, #6]
 8008f6a:	683a      	ldr	r2, [r7, #0]
 8008f6c:	4798      	blx	r3
 8008f6e:	4603      	mov	r3, r0
 8008f70:	73fb      	strb	r3, [r7, #15]
  return res;
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	200008b8 	.word	0x200008b8

08008f80 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008f90:	89fb      	ldrh	r3, [r7, #14]
 8008f92:	021b      	lsls	r3, r3, #8
 8008f94:	b21a      	sxth	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	b21b      	sxth	r3, r3
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	b21b      	sxth	r3, r3
 8008fa0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008fa2:	89fb      	ldrh	r3, [r7, #14]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3303      	adds	r3, #3
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	021b      	lsls	r3, r3, #8
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	3202      	adds	r2, #2
 8008fc8:	7812      	ldrb	r2, [r2, #0]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	021b      	lsls	r3, r3, #8
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	3201      	adds	r2, #1
 8008fd6:	7812      	ldrb	r2, [r2, #0]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	021b      	lsls	r3, r3, #8
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	7812      	ldrb	r2, [r2, #0]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]
	return rv;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3714      	adds	r7, #20
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b083      	sub	sp, #12
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	460b      	mov	r3, r1
 8009000:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	607a      	str	r2, [r7, #4]
 8009008:	887a      	ldrh	r2, [r7, #2]
 800900a:	b2d2      	uxtb	r2, r2
 800900c:	701a      	strb	r2, [r3, #0]
 800900e:	887b      	ldrh	r3, [r7, #2]
 8009010:	0a1b      	lsrs	r3, r3, #8
 8009012:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	607a      	str	r2, [r7, #4]
 800901a:	887a      	ldrh	r2, [r7, #2]
 800901c:	b2d2      	uxtb	r2, r2
 800901e:	701a      	strb	r2, [r3, #0]
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	1c5a      	adds	r2, r3, #1
 800903a:	607a      	str	r2, [r7, #4]
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	b2d2      	uxtb	r2, r2
 8009040:	701a      	strb	r2, [r3, #0]
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	0a1b      	lsrs	r3, r3, #8
 8009046:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	607a      	str	r2, [r7, #4]
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	b2d2      	uxtb	r2, r2
 8009052:	701a      	strb	r2, [r3, #0]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	0a1b      	lsrs	r3, r3, #8
 8009058:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	1c5a      	adds	r2, r3, #1
 800905e:	607a      	str	r2, [r7, #4]
 8009060:	683a      	ldr	r2, [r7, #0]
 8009062:	b2d2      	uxtb	r2, r2
 8009064:	701a      	strb	r2, [r3, #0]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	0a1b      	lsrs	r3, r3, #8
 800906a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	607a      	str	r2, [r7, #4]
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	b2d2      	uxtb	r2, r2
 8009076:	701a      	strb	r2, [r3, #0]
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00d      	beq.n	80090ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	1c53      	adds	r3, r2, #1
 80090a2:	613b      	str	r3, [r7, #16]
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	1c59      	adds	r1, r3, #1
 80090a8:	6179      	str	r1, [r7, #20]
 80090aa:	7812      	ldrb	r2, [r2, #0]
 80090ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	607b      	str	r3, [r7, #4]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1f1      	bne.n	800909e <mem_cpy+0x1a>
	}
}
 80090ba:	bf00      	nop
 80090bc:	371c      	adds	r7, #28
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80090c6:	b480      	push	{r7}
 80090c8:	b087      	sub	sp, #28
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	60f8      	str	r0, [r7, #12]
 80090ce:	60b9      	str	r1, [r7, #8]
 80090d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	1c5a      	adds	r2, r3, #1
 80090da:	617a      	str	r2, [r7, #20]
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	b2d2      	uxtb	r2, r2
 80090e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	3b01      	subs	r3, #1
 80090e6:	607b      	str	r3, [r7, #4]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1f3      	bne.n	80090d6 <mem_set+0x10>
}
 80090ee:	bf00      	nop
 80090f0:	bf00      	nop
 80090f2:	371c      	adds	r7, #28
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80090fc:	b480      	push	{r7}
 80090fe:	b089      	sub	sp, #36	; 0x24
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	61fb      	str	r3, [r7, #28]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	1c5a      	adds	r2, r3, #1
 8009118:	61fa      	str	r2, [r7, #28]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	4619      	mov	r1, r3
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	1c5a      	adds	r2, r3, #1
 8009122:	61ba      	str	r2, [r7, #24]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	1acb      	subs	r3, r1, r3
 8009128:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	3b01      	subs	r3, #1
 800912e:	607b      	str	r3, [r7, #4]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <mem_cmp+0x40>
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d0eb      	beq.n	8009114 <mem_cmp+0x18>

	return r;
 800913c:	697b      	ldr	r3, [r7, #20]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3724      	adds	r7, #36	; 0x24
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800914a:	b480      	push	{r7}
 800914c:	b083      	sub	sp, #12
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009154:	e002      	b.n	800915c <chk_chr+0x12>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	3301      	adds	r3, #1
 800915a:	607b      	str	r3, [r7, #4]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d005      	beq.n	8009170 <chk_chr+0x26>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	461a      	mov	r2, r3
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	4293      	cmp	r3, r2
 800916e:	d1f2      	bne.n	8009156 <chk_chr+0xc>
	return *str;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	781b      	ldrb	r3, [r3, #0]
}
 8009174:	4618      	mov	r0, r3
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d009      	beq.n	80091a2 <lock_fs+0x22>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	4618      	mov	r0, r3
 8009194:	f002 fc87 	bl	800baa6 <ff_req_grant>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <lock_fs+0x22>
 800919e:	2301      	movs	r3, #1
 80091a0:	e000      	b.n	80091a4 <lock_fs+0x24>
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00d      	beq.n	80091da <unlock_fs+0x2e>
 80091be:	78fb      	ldrb	r3, [r7, #3]
 80091c0:	2b0c      	cmp	r3, #12
 80091c2:	d00a      	beq.n	80091da <unlock_fs+0x2e>
 80091c4:	78fb      	ldrb	r3, [r7, #3]
 80091c6:	2b0b      	cmp	r3, #11
 80091c8:	d007      	beq.n	80091da <unlock_fs+0x2e>
 80091ca:	78fb      	ldrb	r3, [r7, #3]
 80091cc:	2b0f      	cmp	r3, #15
 80091ce:	d004      	beq.n	80091da <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f002 fc7b 	bl	800bad0 <ff_rel_grant>
	}
}
 80091da:	bf00      	nop
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
	...

080091e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80091ee:	2300      	movs	r3, #0
 80091f0:	60bb      	str	r3, [r7, #8]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	60fb      	str	r3, [r7, #12]
 80091f6:	e029      	b.n	800924c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80091f8:	4a27      	ldr	r2, [pc, #156]	; (8009298 <chk_lock+0xb4>)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	011b      	lsls	r3, r3, #4
 80091fe:	4413      	add	r3, r2
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d01d      	beq.n	8009242 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009206:	4a24      	ldr	r2, [pc, #144]	; (8009298 <chk_lock+0xb4>)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	4413      	add	r3, r2
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	429a      	cmp	r2, r3
 8009216:	d116      	bne.n	8009246 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009218:	4a1f      	ldr	r2, [pc, #124]	; (8009298 <chk_lock+0xb4>)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	011b      	lsls	r3, r3, #4
 800921e:	4413      	add	r3, r2
 8009220:	3304      	adds	r3, #4
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009228:	429a      	cmp	r2, r3
 800922a:	d10c      	bne.n	8009246 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800922c:	4a1a      	ldr	r2, [pc, #104]	; (8009298 <chk_lock+0xb4>)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	011b      	lsls	r3, r3, #4
 8009232:	4413      	add	r3, r2
 8009234:	3308      	adds	r3, #8
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800923c:	429a      	cmp	r2, r3
 800923e:	d102      	bne.n	8009246 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009240:	e007      	b.n	8009252 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009242:	2301      	movs	r3, #1
 8009244:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3301      	adds	r3, #1
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d9d2      	bls.n	80091f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2b02      	cmp	r3, #2
 8009256:	d109      	bne.n	800926c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d102      	bne.n	8009264 <chk_lock+0x80>
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2b02      	cmp	r3, #2
 8009262:	d101      	bne.n	8009268 <chk_lock+0x84>
 8009264:	2300      	movs	r3, #0
 8009266:	e010      	b.n	800928a <chk_lock+0xa6>
 8009268:	2312      	movs	r3, #18
 800926a:	e00e      	b.n	800928a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d108      	bne.n	8009284 <chk_lock+0xa0>
 8009272:	4a09      	ldr	r2, [pc, #36]	; (8009298 <chk_lock+0xb4>)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	011b      	lsls	r3, r3, #4
 8009278:	4413      	add	r3, r2
 800927a:	330c      	adds	r3, #12
 800927c:	881b      	ldrh	r3, [r3, #0]
 800927e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009282:	d101      	bne.n	8009288 <chk_lock+0xa4>
 8009284:	2310      	movs	r3, #16
 8009286:	e000      	b.n	800928a <chk_lock+0xa6>
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3714      	adds	r7, #20
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	20000898 	.word	0x20000898

0800929c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80092a2:	2300      	movs	r3, #0
 80092a4:	607b      	str	r3, [r7, #4]
 80092a6:	e002      	b.n	80092ae <enq_lock+0x12>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	3301      	adds	r3, #1
 80092ac:	607b      	str	r3, [r7, #4]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d806      	bhi.n	80092c2 <enq_lock+0x26>
 80092b4:	4a09      	ldr	r2, [pc, #36]	; (80092dc <enq_lock+0x40>)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	011b      	lsls	r3, r3, #4
 80092ba:	4413      	add	r3, r2
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1f2      	bne.n	80092a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	bf14      	ite	ne
 80092c8:	2301      	movne	r3, #1
 80092ca:	2300      	moveq	r3, #0
 80092cc:	b2db      	uxtb	r3, r3
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	20000898 	.word	0x20000898

080092e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80092ea:	2300      	movs	r3, #0
 80092ec:	60fb      	str	r3, [r7, #12]
 80092ee:	e01f      	b.n	8009330 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80092f0:	4a41      	ldr	r2, [pc, #260]	; (80093f8 <inc_lock+0x118>)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	011b      	lsls	r3, r3, #4
 80092f6:	4413      	add	r3, r2
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d113      	bne.n	800932a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009302:	4a3d      	ldr	r2, [pc, #244]	; (80093f8 <inc_lock+0x118>)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	011b      	lsls	r3, r3, #4
 8009308:	4413      	add	r3, r2
 800930a:	3304      	adds	r3, #4
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009312:	429a      	cmp	r2, r3
 8009314:	d109      	bne.n	800932a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009316:	4a38      	ldr	r2, [pc, #224]	; (80093f8 <inc_lock+0x118>)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	011b      	lsls	r3, r3, #4
 800931c:	4413      	add	r3, r2
 800931e:	3308      	adds	r3, #8
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009326:	429a      	cmp	r2, r3
 8009328:	d006      	beq.n	8009338 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	3301      	adds	r3, #1
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2b01      	cmp	r3, #1
 8009334:	d9dc      	bls.n	80092f0 <inc_lock+0x10>
 8009336:	e000      	b.n	800933a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009338:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2b02      	cmp	r3, #2
 800933e:	d132      	bne.n	80093a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009340:	2300      	movs	r3, #0
 8009342:	60fb      	str	r3, [r7, #12]
 8009344:	e002      	b.n	800934c <inc_lock+0x6c>
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3301      	adds	r3, #1
 800934a:	60fb      	str	r3, [r7, #12]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d806      	bhi.n	8009360 <inc_lock+0x80>
 8009352:	4a29      	ldr	r2, [pc, #164]	; (80093f8 <inc_lock+0x118>)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	011b      	lsls	r3, r3, #4
 8009358:	4413      	add	r3, r2
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1f2      	bne.n	8009346 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2b02      	cmp	r3, #2
 8009364:	d101      	bne.n	800936a <inc_lock+0x8a>
 8009366:	2300      	movs	r3, #0
 8009368:	e040      	b.n	80093ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	4922      	ldr	r1, [pc, #136]	; (80093f8 <inc_lock+0x118>)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	011b      	lsls	r3, r3, #4
 8009374:	440b      	add	r3, r1
 8009376:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689a      	ldr	r2, [r3, #8]
 800937c:	491e      	ldr	r1, [pc, #120]	; (80093f8 <inc_lock+0x118>)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	011b      	lsls	r3, r3, #4
 8009382:	440b      	add	r3, r1
 8009384:	3304      	adds	r3, #4
 8009386:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	695a      	ldr	r2, [r3, #20]
 800938c:	491a      	ldr	r1, [pc, #104]	; (80093f8 <inc_lock+0x118>)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	011b      	lsls	r3, r3, #4
 8009392:	440b      	add	r3, r1
 8009394:	3308      	adds	r3, #8
 8009396:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009398:	4a17      	ldr	r2, [pc, #92]	; (80093f8 <inc_lock+0x118>)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	011b      	lsls	r3, r3, #4
 800939e:	4413      	add	r3, r2
 80093a0:	330c      	adds	r3, #12
 80093a2:	2200      	movs	r2, #0
 80093a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d009      	beq.n	80093c0 <inc_lock+0xe0>
 80093ac:	4a12      	ldr	r2, [pc, #72]	; (80093f8 <inc_lock+0x118>)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	011b      	lsls	r3, r3, #4
 80093b2:	4413      	add	r3, r2
 80093b4:	330c      	adds	r3, #12
 80093b6:	881b      	ldrh	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <inc_lock+0xe0>
 80093bc:	2300      	movs	r3, #0
 80093be:	e015      	b.n	80093ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d108      	bne.n	80093d8 <inc_lock+0xf8>
 80093c6:	4a0c      	ldr	r2, [pc, #48]	; (80093f8 <inc_lock+0x118>)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	011b      	lsls	r3, r3, #4
 80093cc:	4413      	add	r3, r2
 80093ce:	330c      	adds	r3, #12
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	3301      	adds	r3, #1
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	e001      	b.n	80093dc <inc_lock+0xfc>
 80093d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093dc:	4906      	ldr	r1, [pc, #24]	; (80093f8 <inc_lock+0x118>)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	011b      	lsls	r3, r3, #4
 80093e2:	440b      	add	r3, r1
 80093e4:	330c      	adds	r3, #12
 80093e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3301      	adds	r3, #1
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	20000898 	.word	0x20000898

080093fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	3b01      	subs	r3, #1
 8009408:	607b      	str	r3, [r7, #4]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d825      	bhi.n	800945c <dec_lock+0x60>
		n = Files[i].ctr;
 8009410:	4a17      	ldr	r2, [pc, #92]	; (8009470 <dec_lock+0x74>)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	011b      	lsls	r3, r3, #4
 8009416:	4413      	add	r3, r2
 8009418:	330c      	adds	r3, #12
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800941e:	89fb      	ldrh	r3, [r7, #14]
 8009420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009424:	d101      	bne.n	800942a <dec_lock+0x2e>
 8009426:	2300      	movs	r3, #0
 8009428:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800942a:	89fb      	ldrh	r3, [r7, #14]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <dec_lock+0x3a>
 8009430:	89fb      	ldrh	r3, [r7, #14]
 8009432:	3b01      	subs	r3, #1
 8009434:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009436:	4a0e      	ldr	r2, [pc, #56]	; (8009470 <dec_lock+0x74>)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	011b      	lsls	r3, r3, #4
 800943c:	4413      	add	r3, r2
 800943e:	330c      	adds	r3, #12
 8009440:	89fa      	ldrh	r2, [r7, #14]
 8009442:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009444:	89fb      	ldrh	r3, [r7, #14]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d105      	bne.n	8009456 <dec_lock+0x5a>
 800944a:	4a09      	ldr	r2, [pc, #36]	; (8009470 <dec_lock+0x74>)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	011b      	lsls	r3, r3, #4
 8009450:	4413      	add	r3, r2
 8009452:	2200      	movs	r2, #0
 8009454:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	737b      	strb	r3, [r7, #13]
 800945a:	e001      	b.n	8009460 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800945c:	2302      	movs	r3, #2
 800945e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009460:	7b7b      	ldrb	r3, [r7, #13]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	20000898 	.word	0x20000898

08009474 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800947c:	2300      	movs	r3, #0
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	e010      	b.n	80094a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009482:	4a0d      	ldr	r2, [pc, #52]	; (80094b8 <clear_lock+0x44>)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	011b      	lsls	r3, r3, #4
 8009488:	4413      	add	r3, r2
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	429a      	cmp	r2, r3
 8009490:	d105      	bne.n	800949e <clear_lock+0x2a>
 8009492:	4a09      	ldr	r2, [pc, #36]	; (80094b8 <clear_lock+0x44>)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	011b      	lsls	r3, r3, #4
 8009498:	4413      	add	r3, r2
 800949a:	2200      	movs	r2, #0
 800949c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	3301      	adds	r3, #1
 80094a2:	60fb      	str	r3, [r7, #12]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d9eb      	bls.n	8009482 <clear_lock+0xe>
	}
}
 80094aa:	bf00      	nop
 80094ac:	bf00      	nop
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr
 80094b8:	20000898 	.word	0x20000898

080094bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	78db      	ldrb	r3, [r3, #3]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d034      	beq.n	800953a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	7858      	ldrb	r0, [r3, #1]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80094e0:	2301      	movs	r3, #1
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	f7ff fd0e 	bl	8008f04 <disk_write>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	73fb      	strb	r3, [r7, #15]
 80094f2:	e022      	b.n	800953a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	1ad2      	subs	r2, r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	429a      	cmp	r2, r3
 8009508:	d217      	bcs.n	800953a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	789b      	ldrb	r3, [r3, #2]
 800950e:	613b      	str	r3, [r7, #16]
 8009510:	e010      	b.n	8009534 <sync_window+0x78>
					wsect += fs->fsize;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	4413      	add	r3, r2
 800951a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	7858      	ldrb	r0, [r3, #1]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009526:	2301      	movs	r3, #1
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	f7ff fceb 	bl	8008f04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	3b01      	subs	r3, #1
 8009532:	613b      	str	r3, [r7, #16]
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d8eb      	bhi.n	8009512 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800953a:	7bfb      	ldrb	r3, [r7, #15]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3718      	adds	r7, #24
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009556:	683a      	ldr	r2, [r7, #0]
 8009558:	429a      	cmp	r2, r3
 800955a:	d01b      	beq.n	8009594 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f7ff ffad 	bl	80094bc <sync_window>
 8009562:	4603      	mov	r3, r0
 8009564:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009566:	7bfb      	ldrb	r3, [r7, #15]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d113      	bne.n	8009594 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	7858      	ldrb	r0, [r3, #1]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009576:	2301      	movs	r3, #1
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	f7ff fca3 	bl	8008ec4 <disk_read>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d004      	beq.n	800958e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009584:	f04f 33ff 	mov.w	r3, #4294967295
 8009588:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800958a:	2301      	movs	r3, #1
 800958c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8009594:	7bfb      	ldrb	r3, [r7, #15]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
	...

080095a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7ff ff87 	bl	80094bc <sync_window>
 80095ae:	4603      	mov	r3, r0
 80095b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d159      	bne.n	800966c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	2b03      	cmp	r3, #3
 80095be:	d149      	bne.n	8009654 <sync_fs+0xb4>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	791b      	ldrb	r3, [r3, #4]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d145      	bne.n	8009654 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	899b      	ldrh	r3, [r3, #12]
 80095d2:	461a      	mov	r2, r3
 80095d4:	2100      	movs	r1, #0
 80095d6:	f7ff fd76 	bl	80090c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	3338      	adds	r3, #56	; 0x38
 80095de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80095e2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7ff fd05 	bl	8008ff6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	3338      	adds	r3, #56	; 0x38
 80095f0:	4921      	ldr	r1, [pc, #132]	; (8009678 <sync_fs+0xd8>)
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff fd1a 	bl	800902c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	3338      	adds	r3, #56	; 0x38
 80095fc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009600:	491e      	ldr	r1, [pc, #120]	; (800967c <sync_fs+0xdc>)
 8009602:	4618      	mov	r0, r3
 8009604:	f7ff fd12 	bl	800902c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	3338      	adds	r3, #56	; 0x38
 800960c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	4619      	mov	r1, r3
 8009616:	4610      	mov	r0, r2
 8009618:	f7ff fd08 	bl	800902c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	3338      	adds	r3, #56	; 0x38
 8009620:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	695b      	ldr	r3, [r3, #20]
 8009628:	4619      	mov	r1, r3
 800962a:	4610      	mov	r0, r2
 800962c:	f7ff fcfe 	bl	800902c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009634:	1c5a      	adds	r2, r3, #1
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	7858      	ldrb	r0, [r3, #1]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009648:	2301      	movs	r3, #1
 800964a:	f7ff fc5b 	bl	8008f04 <disk_write>
			fs->fsi_flag = 0;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	785b      	ldrb	r3, [r3, #1]
 8009658:	2200      	movs	r2, #0
 800965a:	2100      	movs	r1, #0
 800965c:	4618      	mov	r0, r3
 800965e:	f7ff fc71 	bl	8008f44 <disk_ioctl>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <sync_fs+0xcc>
 8009668:	2301      	movs	r3, #1
 800966a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800966c:	7bfb      	ldrb	r3, [r7, #15]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	41615252 	.word	0x41615252
 800967c:	61417272 	.word	0x61417272

08009680 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	3b02      	subs	r3, #2
 800968e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	69db      	ldr	r3, [r3, #28]
 8009694:	3b02      	subs	r3, #2
 8009696:	683a      	ldr	r2, [r7, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d301      	bcc.n	80096a0 <clust2sect+0x20>
 800969c:	2300      	movs	r3, #0
 800969e:	e008      	b.n	80096b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	895b      	ldrh	r3, [r3, #10]
 80096a4:	461a      	mov	r2, r3
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	fb03 f202 	mul.w	r2, r3, r2
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b0:	4413      	add	r3, r2
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b086      	sub	sp, #24
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d904      	bls.n	80096de <get_fat+0x20>
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	69db      	ldr	r3, [r3, #28]
 80096d8:	683a      	ldr	r2, [r7, #0]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d302      	bcc.n	80096e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80096de:	2301      	movs	r3, #1
 80096e0:	617b      	str	r3, [r7, #20]
 80096e2:	e0bb      	b.n	800985c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80096e4:	f04f 33ff 	mov.w	r3, #4294967295
 80096e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	2b03      	cmp	r3, #3
 80096f0:	f000 8083 	beq.w	80097fa <get_fat+0x13c>
 80096f4:	2b03      	cmp	r3, #3
 80096f6:	f300 80a7 	bgt.w	8009848 <get_fat+0x18a>
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d002      	beq.n	8009704 <get_fat+0x46>
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d056      	beq.n	80097b0 <get_fat+0xf2>
 8009702:	e0a1      	b.n	8009848 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	60fb      	str	r3, [r7, #12]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	085b      	lsrs	r3, r3, #1
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	4413      	add	r3, r2
 8009710:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	899b      	ldrh	r3, [r3, #12]
 800971a:	4619      	mov	r1, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009722:	4413      	add	r3, r2
 8009724:	4619      	mov	r1, r3
 8009726:	6938      	ldr	r0, [r7, #16]
 8009728:	f7ff ff0c 	bl	8009544 <move_window>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	f040 808d 	bne.w	800984e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	1c5a      	adds	r2, r3, #1
 8009738:	60fa      	str	r2, [r7, #12]
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	8992      	ldrh	r2, [r2, #12]
 800973e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009742:	fb02 f201 	mul.w	r2, r2, r1
 8009746:	1a9b      	subs	r3, r3, r2
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	4413      	add	r3, r2
 800974c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009750:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	899b      	ldrh	r3, [r3, #12]
 800975a:	4619      	mov	r1, r3
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009762:	4413      	add	r3, r2
 8009764:	4619      	mov	r1, r3
 8009766:	6938      	ldr	r0, [r7, #16]
 8009768:	f7ff feec 	bl	8009544 <move_window>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d16f      	bne.n	8009852 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	899b      	ldrh	r3, [r3, #12]
 8009776:	461a      	mov	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	fbb3 f1f2 	udiv	r1, r3, r2
 800977e:	fb02 f201 	mul.w	r2, r2, r1
 8009782:	1a9b      	subs	r3, r3, r2
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	4413      	add	r3, r2
 8009788:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800978c:	021b      	lsls	r3, r3, #8
 800978e:	461a      	mov	r2, r3
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	4313      	orrs	r3, r2
 8009794:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	f003 0301 	and.w	r3, r3, #1
 800979c:	2b00      	cmp	r3, #0
 800979e:	d002      	beq.n	80097a6 <get_fat+0xe8>
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	091b      	lsrs	r3, r3, #4
 80097a4:	e002      	b.n	80097ac <get_fat+0xee>
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097ac:	617b      	str	r3, [r7, #20]
			break;
 80097ae:	e055      	b.n	800985c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	899b      	ldrh	r3, [r3, #12]
 80097b8:	085b      	lsrs	r3, r3, #1
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	4619      	mov	r1, r3
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80097c4:	4413      	add	r3, r2
 80097c6:	4619      	mov	r1, r3
 80097c8:	6938      	ldr	r0, [r7, #16]
 80097ca:	f7ff febb 	bl	8009544 <move_window>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d140      	bne.n	8009856 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	005b      	lsls	r3, r3, #1
 80097de:	693a      	ldr	r2, [r7, #16]
 80097e0:	8992      	ldrh	r2, [r2, #12]
 80097e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80097e6:	fb02 f200 	mul.w	r2, r2, r0
 80097ea:	1a9b      	subs	r3, r3, r2
 80097ec:	440b      	add	r3, r1
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7ff fbc6 	bl	8008f80 <ld_word>
 80097f4:	4603      	mov	r3, r0
 80097f6:	617b      	str	r3, [r7, #20]
			break;
 80097f8:	e030      	b.n	800985c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	899b      	ldrh	r3, [r3, #12]
 8009802:	089b      	lsrs	r3, r3, #2
 8009804:	b29b      	uxth	r3, r3
 8009806:	4619      	mov	r1, r3
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	fbb3 f3f1 	udiv	r3, r3, r1
 800980e:	4413      	add	r3, r2
 8009810:	4619      	mov	r1, r3
 8009812:	6938      	ldr	r0, [r7, #16]
 8009814:	f7ff fe96 	bl	8009544 <move_window>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d11d      	bne.n	800985a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	8992      	ldrh	r2, [r2, #12]
 800982c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009830:	fb02 f200 	mul.w	r2, r2, r0
 8009834:	1a9b      	subs	r3, r3, r2
 8009836:	440b      	add	r3, r1
 8009838:	4618      	mov	r0, r3
 800983a:	f7ff fbb9 	bl	8008fb0 <ld_dword>
 800983e:	4603      	mov	r3, r0
 8009840:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009844:	617b      	str	r3, [r7, #20]
			break;
 8009846:	e009      	b.n	800985c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009848:	2301      	movs	r3, #1
 800984a:	617b      	str	r3, [r7, #20]
 800984c:	e006      	b.n	800985c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800984e:	bf00      	nop
 8009850:	e004      	b.n	800985c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009852:	bf00      	nop
 8009854:	e002      	b.n	800985c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009856:	bf00      	nop
 8009858:	e000      	b.n	800985c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800985a:	bf00      	nop
		}
	}

	return val;
 800985c:	697b      	ldr	r3, [r7, #20]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3718      	adds	r7, #24
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009866:	b590      	push	{r4, r7, lr}
 8009868:	b089      	sub	sp, #36	; 0x24
 800986a:	af00      	add	r7, sp, #0
 800986c:	60f8      	str	r0, [r7, #12]
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009872:	2302      	movs	r3, #2
 8009874:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	2b01      	cmp	r3, #1
 800987a:	f240 8102 	bls.w	8009a82 <put_fat+0x21c>
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	429a      	cmp	r2, r3
 8009886:	f080 80fc 	bcs.w	8009a82 <put_fat+0x21c>
		switch (fs->fs_type) {
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2b03      	cmp	r3, #3
 8009890:	f000 80b6 	beq.w	8009a00 <put_fat+0x19a>
 8009894:	2b03      	cmp	r3, #3
 8009896:	f300 80fd 	bgt.w	8009a94 <put_fat+0x22e>
 800989a:	2b01      	cmp	r3, #1
 800989c:	d003      	beq.n	80098a6 <put_fat+0x40>
 800989e:	2b02      	cmp	r3, #2
 80098a0:	f000 8083 	beq.w	80099aa <put_fat+0x144>
 80098a4:	e0f6      	b.n	8009a94 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	61bb      	str	r3, [r7, #24]
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	085b      	lsrs	r3, r3, #1
 80098ae:	69ba      	ldr	r2, [r7, #24]
 80098b0:	4413      	add	r3, r2
 80098b2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	899b      	ldrh	r3, [r3, #12]
 80098bc:	4619      	mov	r1, r3
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80098c4:	4413      	add	r3, r2
 80098c6:	4619      	mov	r1, r3
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f7ff fe3b 	bl	8009544 <move_window>
 80098ce:	4603      	mov	r3, r0
 80098d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80098d2:	7ffb      	ldrb	r3, [r7, #31]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f040 80d6 	bne.w	8009a86 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	1c5a      	adds	r2, r3, #1
 80098e4:	61ba      	str	r2, [r7, #24]
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	8992      	ldrh	r2, [r2, #12]
 80098ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80098ee:	fb02 f200 	mul.w	r2, r2, r0
 80098f2:	1a9b      	subs	r3, r3, r2
 80098f4:	440b      	add	r3, r1
 80098f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00d      	beq.n	800991e <put_fat+0xb8>
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	b25b      	sxtb	r3, r3
 8009908:	f003 030f 	and.w	r3, r3, #15
 800990c:	b25a      	sxtb	r2, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	b2db      	uxtb	r3, r3
 8009912:	011b      	lsls	r3, r3, #4
 8009914:	b25b      	sxtb	r3, r3
 8009916:	4313      	orrs	r3, r2
 8009918:	b25b      	sxtb	r3, r3
 800991a:	b2db      	uxtb	r3, r3
 800991c:	e001      	b.n	8009922 <put_fat+0xbc>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	b2db      	uxtb	r3, r3
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2201      	movs	r2, #1
 800992a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	899b      	ldrh	r3, [r3, #12]
 8009934:	4619      	mov	r1, r3
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	fbb3 f3f1 	udiv	r3, r3, r1
 800993c:	4413      	add	r3, r2
 800993e:	4619      	mov	r1, r3
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f7ff fdff 	bl	8009544 <move_window>
 8009946:	4603      	mov	r3, r0
 8009948:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800994a:	7ffb      	ldrb	r3, [r7, #31]
 800994c:	2b00      	cmp	r3, #0
 800994e:	f040 809c 	bne.w	8009a8a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	899b      	ldrh	r3, [r3, #12]
 800995c:	461a      	mov	r2, r3
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	fbb3 f0f2 	udiv	r0, r3, r2
 8009964:	fb02 f200 	mul.w	r2, r2, r0
 8009968:	1a9b      	subs	r3, r3, r2
 800996a:	440b      	add	r3, r1
 800996c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	f003 0301 	and.w	r3, r3, #1
 8009974:	2b00      	cmp	r3, #0
 8009976:	d003      	beq.n	8009980 <put_fat+0x11a>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	091b      	lsrs	r3, r3, #4
 800997c:	b2db      	uxtb	r3, r3
 800997e:	e00e      	b.n	800999e <put_fat+0x138>
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	b25b      	sxtb	r3, r3
 8009986:	f023 030f 	bic.w	r3, r3, #15
 800998a:	b25a      	sxtb	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	0a1b      	lsrs	r3, r3, #8
 8009990:	b25b      	sxtb	r3, r3
 8009992:	f003 030f 	and.w	r3, r3, #15
 8009996:	b25b      	sxtb	r3, r3
 8009998:	4313      	orrs	r3, r2
 800999a:	b25b      	sxtb	r3, r3
 800999c:	b2db      	uxtb	r3, r3
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2201      	movs	r2, #1
 80099a6:	70da      	strb	r2, [r3, #3]
			break;
 80099a8:	e074      	b.n	8009a94 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	899b      	ldrh	r3, [r3, #12]
 80099b2:	085b      	lsrs	r3, r3, #1
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	4619      	mov	r1, r3
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80099be:	4413      	add	r3, r2
 80099c0:	4619      	mov	r1, r3
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f7ff fdbe 	bl	8009544 <move_window>
 80099c8:	4603      	mov	r3, r0
 80099ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80099cc:	7ffb      	ldrb	r3, [r7, #31]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d15d      	bne.n	8009a8e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	005b      	lsls	r3, r3, #1
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	8992      	ldrh	r2, [r2, #12]
 80099e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80099e4:	fb02 f200 	mul.w	r2, r2, r0
 80099e8:	1a9b      	subs	r3, r3, r2
 80099ea:	440b      	add	r3, r1
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	b292      	uxth	r2, r2
 80099f0:	4611      	mov	r1, r2
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7ff faff 	bl	8008ff6 <st_word>
			fs->wflag = 1;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2201      	movs	r2, #1
 80099fc:	70da      	strb	r2, [r3, #3]
			break;
 80099fe:	e049      	b.n	8009a94 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	899b      	ldrh	r3, [r3, #12]
 8009a08:	089b      	lsrs	r3, r3, #2
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a14:	4413      	add	r3, r2
 8009a16:	4619      	mov	r1, r3
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	f7ff fd93 	bl	8009544 <move_window>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a22:	7ffb      	ldrb	r3, [r7, #31]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d134      	bne.n	8009a92 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	8992      	ldrh	r2, [r2, #12]
 8009a3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a40:	fb02 f200 	mul.w	r2, r2, r0
 8009a44:	1a9b      	subs	r3, r3, r2
 8009a46:	440b      	add	r3, r1
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7ff fab1 	bl	8008fb0 <ld_dword>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009a54:	4323      	orrs	r3, r4
 8009a56:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	8992      	ldrh	r2, [r2, #12]
 8009a66:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a6a:	fb02 f200 	mul.w	r2, r2, r0
 8009a6e:	1a9b      	subs	r3, r3, r2
 8009a70:	440b      	add	r3, r1
 8009a72:	6879      	ldr	r1, [r7, #4]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7ff fad9 	bl	800902c <st_dword>
			fs->wflag = 1;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	70da      	strb	r2, [r3, #3]
			break;
 8009a80:	e008      	b.n	8009a94 <put_fat+0x22e>
		}
	}
 8009a82:	bf00      	nop
 8009a84:	e006      	b.n	8009a94 <put_fat+0x22e>
			if (res != FR_OK) break;
 8009a86:	bf00      	nop
 8009a88:	e004      	b.n	8009a94 <put_fat+0x22e>
			if (res != FR_OK) break;
 8009a8a:	bf00      	nop
 8009a8c:	e002      	b.n	8009a94 <put_fat+0x22e>
			if (res != FR_OK) break;
 8009a8e:	bf00      	nop
 8009a90:	e000      	b.n	8009a94 <put_fat+0x22e>
			if (res != FR_OK) break;
 8009a92:	bf00      	nop
	return res;
 8009a94:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3724      	adds	r7, #36	; 0x24
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd90      	pop	{r4, r7, pc}

08009a9e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b088      	sub	sp, #32
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	60f8      	str	r0, [r7, #12]
 8009aa6:	60b9      	str	r1, [r7, #8]
 8009aa8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d904      	bls.n	8009ac4 <remove_chain+0x26>
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	69db      	ldr	r3, [r3, #28]
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d301      	bcc.n	8009ac8 <remove_chain+0x2a>
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	e04b      	b.n	8009b60 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00c      	beq.n	8009ae8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009ace:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad2:	6879      	ldr	r1, [r7, #4]
 8009ad4:	69b8      	ldr	r0, [r7, #24]
 8009ad6:	f7ff fec6 	bl	8009866 <put_fat>
 8009ada:	4603      	mov	r3, r0
 8009adc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009ade:	7ffb      	ldrb	r3, [r7, #31]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d001      	beq.n	8009ae8 <remove_chain+0x4a>
 8009ae4:	7ffb      	ldrb	r3, [r7, #31]
 8009ae6:	e03b      	b.n	8009b60 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009ae8:	68b9      	ldr	r1, [r7, #8]
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f7ff fde7 	bl	80096be <get_fat>
 8009af0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d031      	beq.n	8009b5c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d101      	bne.n	8009b02 <remove_chain+0x64>
 8009afe:	2302      	movs	r3, #2
 8009b00:	e02e      	b.n	8009b60 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b08:	d101      	bne.n	8009b0e <remove_chain+0x70>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e028      	b.n	8009b60 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009b0e:	2200      	movs	r2, #0
 8009b10:	68b9      	ldr	r1, [r7, #8]
 8009b12:	69b8      	ldr	r0, [r7, #24]
 8009b14:	f7ff fea7 	bl	8009866 <put_fat>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009b1c:	7ffb      	ldrb	r3, [r7, #31]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d001      	beq.n	8009b26 <remove_chain+0x88>
 8009b22:	7ffb      	ldrb	r3, [r7, #31]
 8009b24:	e01c      	b.n	8009b60 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	699a      	ldr	r2, [r3, #24]
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	69db      	ldr	r3, [r3, #28]
 8009b2e:	3b02      	subs	r3, #2
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d20b      	bcs.n	8009b4c <remove_chain+0xae>
			fs->free_clst++;
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	1c5a      	adds	r2, r3, #1
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	791b      	ldrb	r3, [r3, #4]
 8009b42:	f043 0301 	orr.w	r3, r3, #1
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	69db      	ldr	r3, [r3, #28]
 8009b54:	68ba      	ldr	r2, [r7, #8]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d3c6      	bcc.n	8009ae8 <remove_chain+0x4a>
 8009b5a:	e000      	b.n	8009b5e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009b5c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3720      	adds	r7, #32
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b088      	sub	sp, #32
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10d      	bne.n	8009b9a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d004      	beq.n	8009b94 <create_chain+0x2c>
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	69db      	ldr	r3, [r3, #28]
 8009b8e:	69ba      	ldr	r2, [r7, #24]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d31b      	bcc.n	8009bcc <create_chain+0x64>
 8009b94:	2301      	movs	r3, #1
 8009b96:	61bb      	str	r3, [r7, #24]
 8009b98:	e018      	b.n	8009bcc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7ff fd8e 	bl	80096be <get_fat>
 8009ba2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d801      	bhi.n	8009bae <create_chain+0x46>
 8009baa:	2301      	movs	r3, #1
 8009bac:	e070      	b.n	8009c90 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb4:	d101      	bne.n	8009bba <create_chain+0x52>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	e06a      	b.n	8009c90 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d201      	bcs.n	8009bc8 <create_chain+0x60>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	e063      	b.n	8009c90 <create_chain+0x128>
		scl = clst;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	69db      	ldr	r3, [r3, #28]
 8009bda:	69fa      	ldr	r2, [r7, #28]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d307      	bcc.n	8009bf0 <create_chain+0x88>
				ncl = 2;
 8009be0:	2302      	movs	r3, #2
 8009be2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009be4:	69fa      	ldr	r2, [r7, #28]
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d901      	bls.n	8009bf0 <create_chain+0x88>
 8009bec:	2300      	movs	r3, #0
 8009bee:	e04f      	b.n	8009c90 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009bf0:	69f9      	ldr	r1, [r7, #28]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7ff fd63 	bl	80096be <get_fat>
 8009bf8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00e      	beq.n	8009c1e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d003      	beq.n	8009c0e <create_chain+0xa6>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c0c:	d101      	bne.n	8009c12 <create_chain+0xaa>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	e03e      	b.n	8009c90 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009c12:	69fa      	ldr	r2, [r7, #28]
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d1da      	bne.n	8009bd0 <create_chain+0x68>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	e038      	b.n	8009c90 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009c1e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009c20:	f04f 32ff 	mov.w	r2, #4294967295
 8009c24:	69f9      	ldr	r1, [r7, #28]
 8009c26:	6938      	ldr	r0, [r7, #16]
 8009c28:	f7ff fe1d 	bl	8009866 <put_fat>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009c30:	7dfb      	ldrb	r3, [r7, #23]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d109      	bne.n	8009c4a <create_chain+0xe2>
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d006      	beq.n	8009c4a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009c3c:	69fa      	ldr	r2, [r7, #28]
 8009c3e:	6839      	ldr	r1, [r7, #0]
 8009c40:	6938      	ldr	r0, [r7, #16]
 8009c42:	f7ff fe10 	bl	8009866 <put_fat>
 8009c46:	4603      	mov	r3, r0
 8009c48:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d116      	bne.n	8009c7e <create_chain+0x116>
		fs->last_clst = ncl;
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	69fa      	ldr	r2, [r7, #28]
 8009c54:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	699a      	ldr	r2, [r3, #24]
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	69db      	ldr	r3, [r3, #28]
 8009c5e:	3b02      	subs	r3, #2
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d804      	bhi.n	8009c6e <create_chain+0x106>
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	699b      	ldr	r3, [r3, #24]
 8009c68:	1e5a      	subs	r2, r3, #1
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	791b      	ldrb	r3, [r3, #4]
 8009c72:	f043 0301 	orr.w	r3, r3, #1
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	711a      	strb	r2, [r3, #4]
 8009c7c:	e007      	b.n	8009c8e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009c7e:	7dfb      	ldrb	r3, [r7, #23]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d102      	bne.n	8009c8a <create_chain+0x122>
 8009c84:	f04f 33ff 	mov.w	r3, #4294967295
 8009c88:	e000      	b.n	8009c8c <create_chain+0x124>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009c8e:	69fb      	ldr	r3, [r7, #28]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3720      	adds	r7, #32
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b087      	sub	sp, #28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cac:	3304      	adds	r3, #4
 8009cae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	899b      	ldrh	r3, [r3, #12]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	8952      	ldrh	r2, [r2, #10]
 8009cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cc4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	1d1a      	adds	r2, r3, #4
 8009cca:	613a      	str	r2, [r7, #16]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d101      	bne.n	8009cda <clmt_clust+0x42>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	e010      	b.n	8009cfc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d307      	bcc.n	8009cf2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	617b      	str	r3, [r7, #20]
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	3304      	adds	r3, #4
 8009cee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009cf0:	e7e9      	b.n	8009cc6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009cf2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	4413      	add	r3, r2
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	371c      	adds	r7, #28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d1e:	d204      	bcs.n	8009d2a <dir_sdi+0x22>
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	f003 031f 	and.w	r3, r3, #31
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d001      	beq.n	8009d2e <dir_sdi+0x26>
		return FR_INT_ERR;
 8009d2a:	2302      	movs	r3, #2
 8009d2c:	e071      	b.n	8009e12 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d106      	bne.n	8009d4e <dir_sdi+0x46>
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	d902      	bls.n	8009d4e <dir_sdi+0x46>
		clst = fs->dirbase;
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10c      	bne.n	8009d6e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	095b      	lsrs	r3, r3, #5
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	8912      	ldrh	r2, [r2, #8]
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d301      	bcc.n	8009d64 <dir_sdi+0x5c>
 8009d60:	2302      	movs	r3, #2
 8009d62:	e056      	b.n	8009e12 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	61da      	str	r2, [r3, #28]
 8009d6c:	e02d      	b.n	8009dca <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	895b      	ldrh	r3, [r3, #10]
 8009d72:	461a      	mov	r2, r3
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	899b      	ldrh	r3, [r3, #12]
 8009d78:	fb03 f302 	mul.w	r3, r3, r2
 8009d7c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009d7e:	e019      	b.n	8009db4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6979      	ldr	r1, [r7, #20]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7ff fc9a 	bl	80096be <get_fat>
 8009d8a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d92:	d101      	bne.n	8009d98 <dir_sdi+0x90>
 8009d94:	2301      	movs	r3, #1
 8009d96:	e03c      	b.n	8009e12 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d904      	bls.n	8009da8 <dir_sdi+0xa0>
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	69db      	ldr	r3, [r3, #28]
 8009da2:	697a      	ldr	r2, [r7, #20]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d301      	bcc.n	8009dac <dir_sdi+0xa4>
 8009da8:	2302      	movs	r3, #2
 8009daa:	e032      	b.n	8009e12 <dir_sdi+0x10a>
			ofs -= csz;
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d2e1      	bcs.n	8009d80 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009dbc:	6979      	ldr	r1, [r7, #20]
 8009dbe:	6938      	ldr	r0, [r7, #16]
 8009dc0:	f7ff fc5e 	bl	8009680 <clust2sect>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	697a      	ldr	r2, [r7, #20]
 8009dce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	69db      	ldr	r3, [r3, #28]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d101      	bne.n	8009ddc <dir_sdi+0xd4>
 8009dd8:	2302      	movs	r3, #2
 8009dda:	e01a      	b.n	8009e12 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	69da      	ldr	r2, [r3, #28]
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	899b      	ldrh	r3, [r3, #12]
 8009de4:	4619      	mov	r1, r3
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	fbb3 f3f1 	udiv	r3, r3, r1
 8009dec:	441a      	add	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	899b      	ldrh	r3, [r3, #12]
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e04:	fb02 f200 	mul.w	r2, r2, r0
 8009e08:	1a9b      	subs	r3, r3, r2
 8009e0a:	18ca      	adds	r2, r1, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3718      	adds	r7, #24
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b086      	sub	sp, #24
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	695b      	ldr	r3, [r3, #20]
 8009e2e:	3320      	adds	r3, #32
 8009e30:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	69db      	ldr	r3, [r3, #28]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d003      	beq.n	8009e42 <dir_next+0x28>
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e40:	d301      	bcc.n	8009e46 <dir_next+0x2c>
 8009e42:	2304      	movs	r3, #4
 8009e44:	e0bb      	b.n	8009fbe <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	899b      	ldrh	r3, [r3, #12]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e52:	fb02 f201 	mul.w	r2, r2, r1
 8009e56:	1a9b      	subs	r3, r3, r2
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f040 809d 	bne.w	8009f98 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	69db      	ldr	r3, [r3, #28]
 8009e62:	1c5a      	adds	r2, r3, #1
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10b      	bne.n	8009e88 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	095b      	lsrs	r3, r3, #5
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	8912      	ldrh	r2, [r2, #8]
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	f0c0 808d 	bcc.w	8009f98 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	61da      	str	r2, [r3, #28]
 8009e84:	2304      	movs	r3, #4
 8009e86:	e09a      	b.n	8009fbe <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	899b      	ldrh	r3, [r3, #12]
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	8952      	ldrh	r2, [r2, #10]
 8009e98:	3a01      	subs	r2, #1
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d17b      	bne.n	8009f98 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	699b      	ldr	r3, [r3, #24]
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	f7ff fc08 	bl	80096be <get_fat>
 8009eae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d801      	bhi.n	8009eba <dir_next+0xa0>
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	e081      	b.n	8009fbe <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec0:	d101      	bne.n	8009ec6 <dir_next+0xac>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e07b      	b.n	8009fbe <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	69db      	ldr	r3, [r3, #28]
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d359      	bcc.n	8009f84 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d104      	bne.n	8009ee0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	61da      	str	r2, [r3, #28]
 8009edc:	2304      	movs	r3, #4
 8009ede:	e06e      	b.n	8009fbe <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	4610      	mov	r0, r2
 8009eea:	f7ff fe3d 	bl	8009b68 <create_chain>
 8009eee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d101      	bne.n	8009efa <dir_next+0xe0>
 8009ef6:	2307      	movs	r3, #7
 8009ef8:	e061      	b.n	8009fbe <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d101      	bne.n	8009f04 <dir_next+0xea>
 8009f00:	2302      	movs	r3, #2
 8009f02:	e05c      	b.n	8009fbe <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f0a:	d101      	bne.n	8009f10 <dir_next+0xf6>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e056      	b.n	8009fbe <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f7ff fad3 	bl	80094bc <sync_window>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d001      	beq.n	8009f20 <dir_next+0x106>
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e04e      	b.n	8009fbe <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	899b      	ldrh	r3, [r3, #12]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	f7ff f8ca 	bl	80090c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009f32:	2300      	movs	r3, #0
 8009f34:	613b      	str	r3, [r7, #16]
 8009f36:	6979      	ldr	r1, [r7, #20]
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f7ff fba1 	bl	8009680 <clust2sect>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	635a      	str	r2, [r3, #52]	; 0x34
 8009f44:	e012      	b.n	8009f6c <dir_next+0x152>
						fs->wflag = 1;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7ff fab5 	bl	80094bc <sync_window>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <dir_next+0x142>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e030      	b.n	8009fbe <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	613b      	str	r3, [r7, #16]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f66:	1c5a      	adds	r2, r3, #1
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	635a      	str	r2, [r3, #52]	; 0x34
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	895b      	ldrh	r3, [r3, #10]
 8009f70:	461a      	mov	r2, r3
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d3e6      	bcc.n	8009f46 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	1ad2      	subs	r2, r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009f8a:	6979      	ldr	r1, [r7, #20]
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f7ff fb77 	bl	8009680 <clust2sect>
 8009f92:	4602      	mov	r2, r0
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	899b      	ldrh	r3, [r3, #12]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fb0:	fb02 f200 	mul.w	r2, r2, r0
 8009fb4:	1a9b      	subs	r3, r3, r2
 8009fb6:	18ca      	adds	r2, r1, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3718      	adds	r7, #24
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b086      	sub	sp, #24
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7ff fe95 	bl	8009d08 <dir_sdi>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009fe2:	7dfb      	ldrb	r3, [r7, #23]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d12b      	bne.n	800a040 <dir_alloc+0x7a>
		n = 0;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	69db      	ldr	r3, [r3, #28]
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f7ff faa6 	bl	8009544 <move_window>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009ffc:	7dfb      	ldrb	r3, [r7, #23]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d11d      	bne.n	800a03e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	2be5      	cmp	r3, #229	; 0xe5
 800a00a:	d004      	beq.n	800a016 <dir_alloc+0x50>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a1b      	ldr	r3, [r3, #32]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d107      	bne.n	800a026 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	3301      	adds	r3, #1
 800a01a:	613b      	str	r3, [r7, #16]
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	429a      	cmp	r2, r3
 800a022:	d102      	bne.n	800a02a <dir_alloc+0x64>
 800a024:	e00c      	b.n	800a040 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a026:	2300      	movs	r3, #0
 800a028:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a02a:	2101      	movs	r1, #1
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f7ff fef4 	bl	8009e1a <dir_next>
 800a032:	4603      	mov	r3, r0
 800a034:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d0d7      	beq.n	8009fec <dir_alloc+0x26>
 800a03c:	e000      	b.n	800a040 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a03e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a040:	7dfb      	ldrb	r3, [r7, #23]
 800a042:	2b04      	cmp	r3, #4
 800a044:	d101      	bne.n	800a04a <dir_alloc+0x84>
 800a046:	2307      	movs	r3, #7
 800a048:	75fb      	strb	r3, [r7, #23]
	return res;
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	331a      	adds	r3, #26
 800a062:	4618      	mov	r0, r3
 800a064:	f7fe ff8c 	bl	8008f80 <ld_word>
 800a068:	4603      	mov	r3, r0
 800a06a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	2b03      	cmp	r3, #3
 800a072:	d109      	bne.n	800a088 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	3314      	adds	r3, #20
 800a078:	4618      	mov	r0, r3
 800a07a:	f7fe ff81 	bl	8008f80 <ld_word>
 800a07e:	4603      	mov	r3, r0
 800a080:	041b      	lsls	r3, r3, #16
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	4313      	orrs	r3, r2
 800a086:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a088:	68fb      	ldr	r3, [r7, #12]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b084      	sub	sp, #16
 800a096:	af00      	add	r7, sp, #0
 800a098:	60f8      	str	r0, [r7, #12]
 800a09a:	60b9      	str	r1, [r7, #8]
 800a09c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	331a      	adds	r3, #26
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	b292      	uxth	r2, r2
 800a0a6:	4611      	mov	r1, r2
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fe ffa4 	bl	8008ff6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	2b03      	cmp	r3, #3
 800a0b4:	d109      	bne.n	800a0ca <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	f103 0214 	add.w	r2, r3, #20
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	0c1b      	lsrs	r3, r3, #16
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	f7fe ff96 	bl	8008ff6 <st_word>
	}
}
 800a0ca:	bf00      	nop
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b086      	sub	sp, #24
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
 800a0da:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800a0dc:	2304      	movs	r3, #4
 800a0de:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800a0e6:	e03c      	b.n	800a162 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	69db      	ldr	r3, [r3, #28]
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6938      	ldr	r0, [r7, #16]
 800a0f0:	f7ff fa28 	bl	8009544 <move_window>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a0f8:	7dfb      	ldrb	r3, [r7, #23]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d136      	bne.n	800a16c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a1b      	ldr	r3, [r3, #32]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800a106:	7bfb      	ldrb	r3, [r7, #15]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d102      	bne.n	800a112 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800a10c:	2304      	movs	r3, #4
 800a10e:	75fb      	strb	r3, [r7, #23]
 800a110:	e031      	b.n	800a176 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	330b      	adds	r3, #11
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a11e:	73bb      	strb	r3, [r7, #14]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	7bba      	ldrb	r2, [r7, #14]
 800a124:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800a126:	7bfb      	ldrb	r3, [r7, #15]
 800a128:	2be5      	cmp	r3, #229	; 0xe5
 800a12a:	d011      	beq.n	800a150 <dir_read+0x7e>
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
 800a12e:	2b2e      	cmp	r3, #46	; 0x2e
 800a130:	d00e      	beq.n	800a150 <dir_read+0x7e>
 800a132:	7bbb      	ldrb	r3, [r7, #14]
 800a134:	2b0f      	cmp	r3, #15
 800a136:	d00b      	beq.n	800a150 <dir_read+0x7e>
 800a138:	7bbb      	ldrb	r3, [r7, #14]
 800a13a:	f023 0320 	bic.w	r3, r3, #32
 800a13e:	2b08      	cmp	r3, #8
 800a140:	bf0c      	ite	eq
 800a142:	2301      	moveq	r3, #1
 800a144:	2300      	movne	r3, #0
 800a146:	b2db      	uxtb	r3, r3
 800a148:	461a      	mov	r2, r3
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d00f      	beq.n	800a170 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800a150:	2100      	movs	r1, #0
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7ff fe61 	bl	8009e1a <dir_next>
 800a158:	4603      	mov	r3, r0
 800a15a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d108      	bne.n	800a174 <dir_read+0xa2>
	while (dp->sect) {
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	69db      	ldr	r3, [r3, #28]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1be      	bne.n	800a0e8 <dir_read+0x16>
 800a16a:	e004      	b.n	800a176 <dir_read+0xa4>
		if (res != FR_OK) break;
 800a16c:	bf00      	nop
 800a16e:	e002      	b.n	800a176 <dir_read+0xa4>
				break;
 800a170:	bf00      	nop
 800a172:	e000      	b.n	800a176 <dir_read+0xa4>
		if (res != FR_OK) break;
 800a174:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a176:	7dfb      	ldrb	r3, [r7, #23]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d002      	beq.n	800a182 <dir_read+0xb0>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	61da      	str	r2, [r3, #28]
	return res;
 800a182:	7dfb      	ldrb	r3, [r7, #23]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3718      	adds	r7, #24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a19a:	2100      	movs	r1, #0
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7ff fdb3 	bl	8009d08 <dir_sdi>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a1a6:	7dfb      	ldrb	r3, [r7, #23]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <dir_find+0x24>
 800a1ac:	7dfb      	ldrb	r3, [r7, #23]
 800a1ae:	e03e      	b.n	800a22e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	69db      	ldr	r3, [r3, #28]
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6938      	ldr	r0, [r7, #16]
 800a1b8:	f7ff f9c4 	bl	8009544 <move_window>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d12f      	bne.n	800a226 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a1ce:	7bfb      	ldrb	r3, [r7, #15]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d102      	bne.n	800a1da <dir_find+0x4e>
 800a1d4:	2304      	movs	r3, #4
 800a1d6:	75fb      	strb	r3, [r7, #23]
 800a1d8:	e028      	b.n	800a22c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	330b      	adds	r3, #11
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6a1b      	ldr	r3, [r3, #32]
 800a1f0:	330b      	adds	r3, #11
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	f003 0308 	and.w	r3, r3, #8
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10a      	bne.n	800a212 <dir_find+0x86>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6a18      	ldr	r0, [r3, #32]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	3324      	adds	r3, #36	; 0x24
 800a204:	220b      	movs	r2, #11
 800a206:	4619      	mov	r1, r3
 800a208:	f7fe ff78 	bl	80090fc <mem_cmp>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00b      	beq.n	800a22a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a212:	2100      	movs	r1, #0
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7ff fe00 	bl	8009e1a <dir_next>
 800a21a:	4603      	mov	r3, r0
 800a21c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a21e:	7dfb      	ldrb	r3, [r7, #23]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d0c5      	beq.n	800a1b0 <dir_find+0x24>
 800a224:	e002      	b.n	800a22c <dir_find+0xa0>
		if (res != FR_OK) break;
 800a226:	bf00      	nop
 800a228:	e000      	b.n	800a22c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a22a:	bf00      	nop

	return res;
 800a22c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3718      	adds	r7, #24
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b084      	sub	sp, #16
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a244:	2101      	movs	r1, #1
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f7ff febd 	bl	8009fc6 <dir_alloc>
 800a24c:	4603      	mov	r3, r0
 800a24e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a250:	7bfb      	ldrb	r3, [r7, #15]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d11c      	bne.n	800a290 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	69db      	ldr	r3, [r3, #28]
 800a25a:	4619      	mov	r1, r3
 800a25c:	68b8      	ldr	r0, [r7, #8]
 800a25e:	f7ff f971 	bl	8009544 <move_window>
 800a262:	4603      	mov	r3, r0
 800a264:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a266:	7bfb      	ldrb	r3, [r7, #15]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d111      	bne.n	800a290 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a1b      	ldr	r3, [r3, #32]
 800a270:	2220      	movs	r2, #32
 800a272:	2100      	movs	r1, #0
 800a274:	4618      	mov	r0, r3
 800a276:	f7fe ff26 	bl	80090c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a18      	ldr	r0, [r3, #32]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	3324      	adds	r3, #36	; 0x24
 800a282:	220b      	movs	r2, #11
 800a284:	4619      	mov	r1, r3
 800a286:	f7fe fefd 	bl	8009084 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	2201      	movs	r2, #1
 800a28e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a290:	7bfb      	ldrb	r3, [r7, #15]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b084      	sub	sp, #16
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	69db      	ldr	r3, [r3, #28]
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f7ff f948 	bl	8009544 <move_window>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800a2b8:	7afb      	ldrb	r3, [r7, #11]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d106      	bne.n	800a2cc <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	22e5      	movs	r2, #229	; 0xe5
 800a2c4:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800a2cc:	7afb      	ldrb	r3, [r7, #11]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b086      	sub	sp, #24
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	69db      	ldr	r3, [r3, #28]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d04e      	beq.n	800a38c <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	613b      	str	r3, [r7, #16]
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800a2f6:	e021      	b.n	800a33c <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6a1a      	ldr	r2, [r3, #32]
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	1c59      	adds	r1, r3, #1
 800a300:	6179      	str	r1, [r7, #20]
 800a302:	4413      	add	r3, r2
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800a308:	7bfb      	ldrb	r3, [r7, #15]
 800a30a:	2b20      	cmp	r3, #32
 800a30c:	d100      	bne.n	800a310 <get_fileinfo+0x3a>
 800a30e:	e015      	b.n	800a33c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a310:	7bfb      	ldrb	r3, [r7, #15]
 800a312:	2b05      	cmp	r3, #5
 800a314:	d101      	bne.n	800a31a <get_fileinfo+0x44>
 800a316:	23e5      	movs	r3, #229	; 0xe5
 800a318:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	2b09      	cmp	r3, #9
 800a31e:	d106      	bne.n	800a32e <get_fileinfo+0x58>
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	613a      	str	r2, [r7, #16]
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	4413      	add	r3, r2
 800a32a:	222e      	movs	r2, #46	; 0x2e
 800a32c:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	1c5a      	adds	r2, r3, #1
 800a332:	613a      	str	r2, [r7, #16]
 800a334:	683a      	ldr	r2, [r7, #0]
 800a336:	4413      	add	r3, r2
 800a338:	7bfa      	ldrb	r2, [r7, #15]
 800a33a:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	2b0a      	cmp	r3, #10
 800a340:	d9da      	bls.n	800a2f8 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	4413      	add	r3, r2
 800a348:	3309      	adds	r3, #9
 800a34a:	2200      	movs	r2, #0
 800a34c:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	7ada      	ldrb	r2, [r3, #11]
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6a1b      	ldr	r3, [r3, #32]
 800a35c:	331c      	adds	r3, #28
 800a35e:	4618      	mov	r0, r3
 800a360:	f7fe fe26 	bl	8008fb0 <ld_dword>
 800a364:	4602      	mov	r2, r0
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	3316      	adds	r3, #22
 800a370:	4618      	mov	r0, r3
 800a372:	f7fe fe1d 	bl	8008fb0 <ld_dword>
 800a376:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	80da      	strh	r2, [r3, #6]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	0c1b      	lsrs	r3, r3, #16
 800a384:	b29a      	uxth	r2, r3
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	809a      	strh	r2, [r3, #4]
 800a38a:	e000      	b.n	800a38e <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a38c:	bf00      	nop
}
 800a38e:	3718      	adds	r7, #24
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b088      	sub	sp, #32
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	60fb      	str	r3, [r7, #12]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	3324      	adds	r3, #36	; 0x24
 800a3a8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a3aa:	220b      	movs	r2, #11
 800a3ac:	2120      	movs	r1, #32
 800a3ae:	68b8      	ldr	r0, [r7, #8]
 800a3b0:	f7fe fe89 	bl	80090c6 <mem_set>
	si = i = 0; ni = 8;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	613b      	str	r3, [r7, #16]
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	61fb      	str	r3, [r7, #28]
 800a3bc:	2308      	movs	r3, #8
 800a3be:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	1c5a      	adds	r2, r3, #1
 800a3c4:	61fa      	str	r2, [r7, #28]
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a3ce:	7efb      	ldrb	r3, [r7, #27]
 800a3d0:	2b20      	cmp	r3, #32
 800a3d2:	d94e      	bls.n	800a472 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a3d4:	7efb      	ldrb	r3, [r7, #27]
 800a3d6:	2b2f      	cmp	r3, #47	; 0x2f
 800a3d8:	d006      	beq.n	800a3e8 <create_name+0x54>
 800a3da:	7efb      	ldrb	r3, [r7, #27]
 800a3dc:	2b5c      	cmp	r3, #92	; 0x5c
 800a3de:	d110      	bne.n	800a402 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a3e0:	e002      	b.n	800a3e8 <create_name+0x54>
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	61fb      	str	r3, [r7, #28]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	2b2f      	cmp	r3, #47	; 0x2f
 800a3f2:	d0f6      	beq.n	800a3e2 <create_name+0x4e>
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	2b5c      	cmp	r3, #92	; 0x5c
 800a3fe:	d0f0      	beq.n	800a3e2 <create_name+0x4e>
			break;
 800a400:	e038      	b.n	800a474 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a402:	7efb      	ldrb	r3, [r7, #27]
 800a404:	2b2e      	cmp	r3, #46	; 0x2e
 800a406:	d003      	beq.n	800a410 <create_name+0x7c>
 800a408:	693a      	ldr	r2, [r7, #16]
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d30c      	bcc.n	800a42a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	2b0b      	cmp	r3, #11
 800a414:	d002      	beq.n	800a41c <create_name+0x88>
 800a416:	7efb      	ldrb	r3, [r7, #27]
 800a418:	2b2e      	cmp	r3, #46	; 0x2e
 800a41a:	d001      	beq.n	800a420 <create_name+0x8c>
 800a41c:	2306      	movs	r3, #6
 800a41e:	e044      	b.n	800a4aa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a420:	2308      	movs	r3, #8
 800a422:	613b      	str	r3, [r7, #16]
 800a424:	230b      	movs	r3, #11
 800a426:	617b      	str	r3, [r7, #20]
			continue;
 800a428:	e022      	b.n	800a470 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a42a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	da04      	bge.n	800a43c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a432:	7efb      	ldrb	r3, [r7, #27]
 800a434:	3b80      	subs	r3, #128	; 0x80
 800a436:	4a1f      	ldr	r2, [pc, #124]	; (800a4b4 <create_name+0x120>)
 800a438:	5cd3      	ldrb	r3, [r2, r3]
 800a43a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a43c:	7efb      	ldrb	r3, [r7, #27]
 800a43e:	4619      	mov	r1, r3
 800a440:	481d      	ldr	r0, [pc, #116]	; (800a4b8 <create_name+0x124>)
 800a442:	f7fe fe82 	bl	800914a <chk_chr>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d001      	beq.n	800a450 <create_name+0xbc>
 800a44c:	2306      	movs	r3, #6
 800a44e:	e02c      	b.n	800a4aa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a450:	7efb      	ldrb	r3, [r7, #27]
 800a452:	2b60      	cmp	r3, #96	; 0x60
 800a454:	d905      	bls.n	800a462 <create_name+0xce>
 800a456:	7efb      	ldrb	r3, [r7, #27]
 800a458:	2b7a      	cmp	r3, #122	; 0x7a
 800a45a:	d802      	bhi.n	800a462 <create_name+0xce>
 800a45c:	7efb      	ldrb	r3, [r7, #27]
 800a45e:	3b20      	subs	r3, #32
 800a460:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	1c5a      	adds	r2, r3, #1
 800a466:	613a      	str	r2, [r7, #16]
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	4413      	add	r3, r2
 800a46c:	7efa      	ldrb	r2, [r7, #27]
 800a46e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a470:	e7a6      	b.n	800a3c0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a472:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	441a      	add	r2, r3
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d101      	bne.n	800a488 <create_name+0xf4>
 800a484:	2306      	movs	r3, #6
 800a486:	e010      	b.n	800a4aa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2be5      	cmp	r3, #229	; 0xe5
 800a48e:	d102      	bne.n	800a496 <create_name+0x102>
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	2205      	movs	r2, #5
 800a494:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a496:	7efb      	ldrb	r3, [r7, #27]
 800a498:	2b20      	cmp	r3, #32
 800a49a:	d801      	bhi.n	800a4a0 <create_name+0x10c>
 800a49c:	2204      	movs	r2, #4
 800a49e:	e000      	b.n	800a4a2 <create_name+0x10e>
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	330b      	adds	r3, #11
 800a4a6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a4a8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3720      	adds	r7, #32
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	08012c00 	.word	0x08012c00
 800a4b8:	080116ac 	.word	0x080116ac

0800a4bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b086      	sub	sp, #24
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a4d0:	e002      	b.n	800a4d8 <follow_path+0x1c>
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	603b      	str	r3, [r7, #0]
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2b2f      	cmp	r3, #47	; 0x2f
 800a4de:	d0f8      	beq.n	800a4d2 <follow_path+0x16>
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	2b5c      	cmp	r3, #92	; 0x5c
 800a4e6:	d0f4      	beq.n	800a4d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	2b1f      	cmp	r3, #31
 800a4f4:	d80a      	bhi.n	800a50c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2280      	movs	r2, #128	; 0x80
 800a4fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a4fe:	2100      	movs	r1, #0
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f7ff fc01 	bl	8009d08 <dir_sdi>
 800a506:	4603      	mov	r3, r0
 800a508:	75fb      	strb	r3, [r7, #23]
 800a50a:	e048      	b.n	800a59e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a50c:	463b      	mov	r3, r7
 800a50e:	4619      	mov	r1, r3
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f7ff ff3f 	bl	800a394 <create_name>
 800a516:	4603      	mov	r3, r0
 800a518:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a51a:	7dfb      	ldrb	r3, [r7, #23]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d139      	bne.n	800a594 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f7ff fe33 	bl	800a18c <dir_find>
 800a526:	4603      	mov	r3, r0
 800a528:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a530:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a532:	7dfb      	ldrb	r3, [r7, #23]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00a      	beq.n	800a54e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a538:	7dfb      	ldrb	r3, [r7, #23]
 800a53a:	2b04      	cmp	r3, #4
 800a53c:	d12c      	bne.n	800a598 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a53e:	7afb      	ldrb	r3, [r7, #11]
 800a540:	f003 0304 	and.w	r3, r3, #4
 800a544:	2b00      	cmp	r3, #0
 800a546:	d127      	bne.n	800a598 <follow_path+0xdc>
 800a548:	2305      	movs	r3, #5
 800a54a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a54c:	e024      	b.n	800a598 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a54e:	7afb      	ldrb	r3, [r7, #11]
 800a550:	f003 0304 	and.w	r3, r3, #4
 800a554:	2b00      	cmp	r3, #0
 800a556:	d121      	bne.n	800a59c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	799b      	ldrb	r3, [r3, #6]
 800a55c:	f003 0310 	and.w	r3, r3, #16
 800a560:	2b00      	cmp	r3, #0
 800a562:	d102      	bne.n	800a56a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a564:	2305      	movs	r3, #5
 800a566:	75fb      	strb	r3, [r7, #23]
 800a568:	e019      	b.n	800a59e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	695b      	ldr	r3, [r3, #20]
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	8992      	ldrh	r2, [r2, #12]
 800a578:	fbb3 f0f2 	udiv	r0, r3, r2
 800a57c:	fb02 f200 	mul.w	r2, r2, r0
 800a580:	1a9b      	subs	r3, r3, r2
 800a582:	440b      	add	r3, r1
 800a584:	4619      	mov	r1, r3
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f7ff fd64 	bl	800a054 <ld_clust>
 800a58c:	4602      	mov	r2, r0
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a592:	e7bb      	b.n	800a50c <follow_path+0x50>
			if (res != FR_OK) break;
 800a594:	bf00      	nop
 800a596:	e002      	b.n	800a59e <follow_path+0xe2>
				break;
 800a598:	bf00      	nop
 800a59a:	e000      	b.n	800a59e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a59c:	bf00      	nop
			}
		}
	}

	return res;
 800a59e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3718      	adds	r7, #24
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b087      	sub	sp, #28
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d031      	beq.n	800a622 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	617b      	str	r3, [r7, #20]
 800a5c4:	e002      	b.n	800a5cc <get_ldnumber+0x24>
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	617b      	str	r3, [r7, #20]
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	2b20      	cmp	r3, #32
 800a5d2:	d903      	bls.n	800a5dc <get_ldnumber+0x34>
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	2b3a      	cmp	r3, #58	; 0x3a
 800a5da:	d1f4      	bne.n	800a5c6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	2b3a      	cmp	r3, #58	; 0x3a
 800a5e2:	d11c      	bne.n	800a61e <get_ldnumber+0x76>
			tp = *path;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	1c5a      	adds	r2, r3, #1
 800a5ee:	60fa      	str	r2, [r7, #12]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	3b30      	subs	r3, #48	; 0x30
 800a5f4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	2b09      	cmp	r3, #9
 800a5fa:	d80e      	bhi.n	800a61a <get_ldnumber+0x72>
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	429a      	cmp	r2, r3
 800a602:	d10a      	bne.n	800a61a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d107      	bne.n	800a61a <get_ldnumber+0x72>
					vol = (int)i;
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	3301      	adds	r3, #1
 800a612:	617b      	str	r3, [r7, #20]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	e002      	b.n	800a624 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a61e:	2300      	movs	r3, #0
 800a620:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a622:	693b      	ldr	r3, [r7, #16]
}
 800a624:	4618      	mov	r0, r3
 800a626:	371c      	adds	r7, #28
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	70da      	strb	r2, [r3, #3]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f04f 32ff 	mov.w	r2, #4294967295
 800a646:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f7fe ff7a 	bl	8009544 <move_window>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d001      	beq.n	800a65a <check_fs+0x2a>
 800a656:	2304      	movs	r3, #4
 800a658:	e038      	b.n	800a6cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	3338      	adds	r3, #56	; 0x38
 800a65e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a662:	4618      	mov	r0, r3
 800a664:	f7fe fc8c 	bl	8008f80 <ld_word>
 800a668:	4603      	mov	r3, r0
 800a66a:	461a      	mov	r2, r3
 800a66c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a670:	429a      	cmp	r2, r3
 800a672:	d001      	beq.n	800a678 <check_fs+0x48>
 800a674:	2303      	movs	r3, #3
 800a676:	e029      	b.n	800a6cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a67e:	2be9      	cmp	r3, #233	; 0xe9
 800a680:	d009      	beq.n	800a696 <check_fs+0x66>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a688:	2beb      	cmp	r3, #235	; 0xeb
 800a68a:	d11e      	bne.n	800a6ca <check_fs+0x9a>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a692:	2b90      	cmp	r3, #144	; 0x90
 800a694:	d119      	bne.n	800a6ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	3338      	adds	r3, #56	; 0x38
 800a69a:	3336      	adds	r3, #54	; 0x36
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fe fc87 	bl	8008fb0 <ld_dword>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a6a8:	4a0a      	ldr	r2, [pc, #40]	; (800a6d4 <check_fs+0xa4>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d101      	bne.n	800a6b2 <check_fs+0x82>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	e00c      	b.n	800a6cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	3338      	adds	r3, #56	; 0x38
 800a6b6:	3352      	adds	r3, #82	; 0x52
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7fe fc79 	bl	8008fb0 <ld_dword>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	4a05      	ldr	r2, [pc, #20]	; (800a6d8 <check_fs+0xa8>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d101      	bne.n	800a6ca <check_fs+0x9a>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	e000      	b.n	800a6cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a6ca:	2302      	movs	r3, #2
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	00544146 	.word	0x00544146
 800a6d8:	33544146 	.word	0x33544146

0800a6dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b096      	sub	sp, #88	; 0x58
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f7ff ff59 	bl	800a5a8 <get_ldnumber>
 800a6f6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	da01      	bge.n	800a702 <find_volume+0x26>
 800a6fe:	230b      	movs	r3, #11
 800a700:	e26c      	b.n	800abdc <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a702:	4aa4      	ldr	r2, [pc, #656]	; (800a994 <find_volume+0x2b8>)
 800a704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a70a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d101      	bne.n	800a716 <find_volume+0x3a>
 800a712:	230c      	movs	r3, #12
 800a714:	e262      	b.n	800abdc <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 800a716:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a718:	f7fe fd32 	bl	8009180 <lock_fs>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d101      	bne.n	800a726 <find_volume+0x4a>
 800a722:	230f      	movs	r3, #15
 800a724:	e25a      	b.n	800abdc <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a72a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a72c:	79fb      	ldrb	r3, [r7, #7]
 800a72e:	f023 0301 	bic.w	r3, r3, #1
 800a732:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d01a      	beq.n	800a772 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	785b      	ldrb	r3, [r3, #1]
 800a740:	4618      	mov	r0, r3
 800a742:	f7fe fb7f 	bl	8008e44 <disk_status>
 800a746:	4603      	mov	r3, r0
 800a748:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a74c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10c      	bne.n	800a772 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a758:	79fb      	ldrb	r3, [r7, #7]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d007      	beq.n	800a76e <find_volume+0x92>
 800a75e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a762:	f003 0304 	and.w	r3, r3, #4
 800a766:	2b00      	cmp	r3, #0
 800a768:	d001      	beq.n	800a76e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a76a:	230a      	movs	r3, #10
 800a76c:	e236      	b.n	800abdc <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800a76e:	2300      	movs	r3, #0
 800a770:	e234      	b.n	800abdc <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a774:	2200      	movs	r2, #0
 800a776:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a782:	785b      	ldrb	r3, [r3, #1]
 800a784:	4618      	mov	r0, r3
 800a786:	f7fe fb77 	bl	8008e78 <disk_initialize>
 800a78a:	4603      	mov	r3, r0
 800a78c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a790:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a794:	f003 0301 	and.w	r3, r3, #1
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d001      	beq.n	800a7a0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a79c:	2303      	movs	r3, #3
 800a79e:	e21d      	b.n	800abdc <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a7a0:	79fb      	ldrb	r3, [r7, #7]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d007      	beq.n	800a7b6 <find_volume+0xda>
 800a7a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a7aa:	f003 0304 	and.w	r3, r3, #4
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d001      	beq.n	800a7b6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a7b2:	230a      	movs	r3, #10
 800a7b4:	e212      	b.n	800abdc <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b8:	7858      	ldrb	r0, [r3, #1]
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7bc:	330c      	adds	r3, #12
 800a7be:	461a      	mov	r2, r3
 800a7c0:	2102      	movs	r1, #2
 800a7c2:	f7fe fbbf 	bl	8008f44 <disk_ioctl>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d001      	beq.n	800a7d0 <find_volume+0xf4>
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e205      	b.n	800abdc <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d2:	899b      	ldrh	r3, [r3, #12]
 800a7d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7d8:	d80d      	bhi.n	800a7f6 <find_volume+0x11a>
 800a7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7dc:	899b      	ldrh	r3, [r3, #12]
 800a7de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7e2:	d308      	bcc.n	800a7f6 <find_volume+0x11a>
 800a7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e6:	899b      	ldrh	r3, [r3, #12]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ec:	899b      	ldrh	r3, [r3, #12]
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	4013      	ands	r3, r2
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d001      	beq.n	800a7fa <find_volume+0x11e>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e1f0      	b.n	800abdc <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a7fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a800:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a802:	f7ff ff15 	bl	800a630 <check_fs>
 800a806:	4603      	mov	r3, r0
 800a808:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a80c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a810:	2b02      	cmp	r3, #2
 800a812:	d14b      	bne.n	800a8ac <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a814:	2300      	movs	r3, #0
 800a816:	643b      	str	r3, [r7, #64]	; 0x40
 800a818:	e01f      	b.n	800a85a <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a822:	011b      	lsls	r3, r3, #4
 800a824:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a828:	4413      	add	r3, r2
 800a82a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82e:	3304      	adds	r3, #4
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d006      	beq.n	800a844 <find_volume+0x168>
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	3308      	adds	r3, #8
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe fbb8 	bl	8008fb0 <ld_dword>
 800a840:	4602      	mov	r2, r0
 800a842:	e000      	b.n	800a846 <find_volume+0x16a>
 800a844:	2200      	movs	r2, #0
 800a846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a84e:	440b      	add	r3, r1
 800a850:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a856:	3301      	adds	r3, #1
 800a858:	643b      	str	r3, [r7, #64]	; 0x40
 800a85a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a85c:	2b03      	cmp	r3, #3
 800a85e:	d9dc      	bls.n	800a81a <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a860:	2300      	movs	r3, #0
 800a862:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a866:	2b00      	cmp	r3, #0
 800a868:	d002      	beq.n	800a870 <find_volume+0x194>
 800a86a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a86c:	3b01      	subs	r3, #1
 800a86e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a878:	4413      	add	r3, r2
 800a87a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a87e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a882:	2b00      	cmp	r3, #0
 800a884:	d005      	beq.n	800a892 <find_volume+0x1b6>
 800a886:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a888:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a88a:	f7ff fed1 	bl	800a630 <check_fs>
 800a88e:	4603      	mov	r3, r0
 800a890:	e000      	b.n	800a894 <find_volume+0x1b8>
 800a892:	2303      	movs	r3, #3
 800a894:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a898:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d905      	bls.n	800a8ac <find_volume+0x1d0>
 800a8a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	643b      	str	r3, [r7, #64]	; 0x40
 800a8a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8a8:	2b03      	cmp	r3, #3
 800a8aa:	d9e1      	bls.n	800a870 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a8ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8b0:	2b04      	cmp	r3, #4
 800a8b2:	d101      	bne.n	800a8b8 <find_volume+0x1dc>
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e191      	b.n	800abdc <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a8b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d901      	bls.n	800a8c4 <find_volume+0x1e8>
 800a8c0:	230d      	movs	r3, #13
 800a8c2:	e18b      	b.n	800abdc <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c6:	3338      	adds	r3, #56	; 0x38
 800a8c8:	330b      	adds	r3, #11
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fe fb58 	bl	8008f80 <ld_word>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d6:	899b      	ldrh	r3, [r3, #12]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d001      	beq.n	800a8e0 <find_volume+0x204>
 800a8dc:	230d      	movs	r3, #13
 800a8de:	e17d      	b.n	800abdc <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e2:	3338      	adds	r3, #56	; 0x38
 800a8e4:	3316      	adds	r3, #22
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fe fb4a 	bl	8008f80 <ld_word>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a8f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d106      	bne.n	800a904 <find_volume+0x228>
 800a8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f8:	3338      	adds	r3, #56	; 0x38
 800a8fa:	3324      	adds	r3, #36	; 0x24
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7fe fb57 	bl	8008fb0 <ld_dword>
 800a902:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a906:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a908:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a912:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a916:	789b      	ldrb	r3, [r3, #2]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d005      	beq.n	800a928 <find_volume+0x24c>
 800a91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91e:	789b      	ldrb	r3, [r3, #2]
 800a920:	2b02      	cmp	r3, #2
 800a922:	d001      	beq.n	800a928 <find_volume+0x24c>
 800a924:	230d      	movs	r3, #13
 800a926:	e159      	b.n	800abdc <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92a:	789b      	ldrb	r3, [r3, #2]
 800a92c:	461a      	mov	r2, r3
 800a92e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a930:	fb02 f303 	mul.w	r3, r2, r3
 800a934:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a940:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a944:	895b      	ldrh	r3, [r3, #10]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d008      	beq.n	800a95c <find_volume+0x280>
 800a94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94c:	895b      	ldrh	r3, [r3, #10]
 800a94e:	461a      	mov	r2, r3
 800a950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a952:	895b      	ldrh	r3, [r3, #10]
 800a954:	3b01      	subs	r3, #1
 800a956:	4013      	ands	r3, r2
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d001      	beq.n	800a960 <find_volume+0x284>
 800a95c:	230d      	movs	r3, #13
 800a95e:	e13d      	b.n	800abdc <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a962:	3338      	adds	r3, #56	; 0x38
 800a964:	3311      	adds	r3, #17
 800a966:	4618      	mov	r0, r3
 800a968:	f7fe fb0a 	bl	8008f80 <ld_word>
 800a96c:	4603      	mov	r3, r0
 800a96e:	461a      	mov	r2, r3
 800a970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a972:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a976:	891b      	ldrh	r3, [r3, #8]
 800a978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a97a:	8992      	ldrh	r2, [r2, #12]
 800a97c:	0952      	lsrs	r2, r2, #5
 800a97e:	b292      	uxth	r2, r2
 800a980:	fbb3 f1f2 	udiv	r1, r3, r2
 800a984:	fb02 f201 	mul.w	r2, r2, r1
 800a988:	1a9b      	subs	r3, r3, r2
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d003      	beq.n	800a998 <find_volume+0x2bc>
 800a990:	230d      	movs	r3, #13
 800a992:	e123      	b.n	800abdc <find_volume+0x500>
 800a994:	20000890 	.word	0x20000890

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99a:	3338      	adds	r3, #56	; 0x38
 800a99c:	3313      	adds	r3, #19
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fe faee 	bl	8008f80 <ld_word>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a9a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d106      	bne.n	800a9bc <find_volume+0x2e0>
 800a9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b0:	3338      	adds	r3, #56	; 0x38
 800a9b2:	3320      	adds	r3, #32
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fe fafb 	bl	8008fb0 <ld_dword>
 800a9ba:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9be:	3338      	adds	r3, #56	; 0x38
 800a9c0:	330e      	adds	r3, #14
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fe fadc 	bl	8008f80 <ld_word>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a9cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d101      	bne.n	800a9d6 <find_volume+0x2fa>
 800a9d2:	230d      	movs	r3, #13
 800a9d4:	e102      	b.n	800abdc <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a9d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a9d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9da:	4413      	add	r3, r2
 800a9dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9de:	8911      	ldrh	r1, [r2, #8]
 800a9e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9e2:	8992      	ldrh	r2, [r2, #12]
 800a9e4:	0952      	lsrs	r2, r2, #5
 800a9e6:	b292      	uxth	r2, r2
 800a9e8:	fbb1 f2f2 	udiv	r2, r1, r2
 800a9ec:	b292      	uxth	r2, r2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a9f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d201      	bcs.n	800a9fe <find_volume+0x322>
 800a9fa:	230d      	movs	r3, #13
 800a9fc:	e0ee      	b.n	800abdc <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a9fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa06:	8952      	ldrh	r2, [r2, #10]
 800aa08:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa0c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800aa0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d101      	bne.n	800aa18 <find_volume+0x33c>
 800aa14:	230d      	movs	r3, #13
 800aa16:	e0e1      	b.n	800abdc <find_volume+0x500>
		fmt = FS_FAT32;
 800aa18:	2303      	movs	r3, #3
 800aa1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800aa1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa20:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d802      	bhi.n	800aa2e <find_volume+0x352>
 800aa28:	2302      	movs	r3, #2
 800aa2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa30:	f640 72f5 	movw	r2, #4085	; 0xff5
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d802      	bhi.n	800aa3e <find_volume+0x362>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa40:	1c9a      	adds	r2, r3, #2
 800aa42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa44:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800aa46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa4a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800aa4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aa4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa50:	441a      	add	r2, r3
 800aa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa54:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800aa56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5a:	441a      	add	r2, r3
 800aa5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800aa60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aa64:	2b03      	cmp	r3, #3
 800aa66:	d11e      	bne.n	800aaa6 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800aa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6a:	3338      	adds	r3, #56	; 0x38
 800aa6c:	332a      	adds	r3, #42	; 0x2a
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe fa86 	bl	8008f80 <ld_word>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d001      	beq.n	800aa7e <find_volume+0x3a2>
 800aa7a:	230d      	movs	r3, #13
 800aa7c:	e0ae      	b.n	800abdc <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800aa7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa80:	891b      	ldrh	r3, [r3, #8]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d001      	beq.n	800aa8a <find_volume+0x3ae>
 800aa86:	230d      	movs	r3, #13
 800aa88:	e0a8      	b.n	800abdc <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800aa8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8c:	3338      	adds	r3, #56	; 0x38
 800aa8e:	332c      	adds	r3, #44	; 0x2c
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7fe fa8d 	bl	8008fb0 <ld_dword>
 800aa96:	4602      	mov	r2, r0
 800aa98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800aa9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9e:	69db      	ldr	r3, [r3, #28]
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	647b      	str	r3, [r7, #68]	; 0x44
 800aaa4:	e01f      	b.n	800aae6 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800aaa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa8:	891b      	ldrh	r3, [r3, #8]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d101      	bne.n	800aab2 <find_volume+0x3d6>
 800aaae:	230d      	movs	r3, #13
 800aab0:	e094      	b.n	800abdc <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800aab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aab8:	441a      	add	r2, r3
 800aaba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aabc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800aabe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d103      	bne.n	800aace <find_volume+0x3f2>
 800aac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac8:	69db      	ldr	r3, [r3, #28]
 800aaca:	005b      	lsls	r3, r3, #1
 800aacc:	e00a      	b.n	800aae4 <find_volume+0x408>
 800aace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad0:	69da      	ldr	r2, [r3, #28]
 800aad2:	4613      	mov	r3, r2
 800aad4:	005b      	lsls	r3, r3, #1
 800aad6:	4413      	add	r3, r2
 800aad8:	085a      	lsrs	r2, r3, #1
 800aada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	f003 0301 	and.w	r3, r3, #1
 800aae2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800aae4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800aae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae8:	6a1a      	ldr	r2, [r3, #32]
 800aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaec:	899b      	ldrh	r3, [r3, #12]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaf2:	440b      	add	r3, r1
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aaf8:	8989      	ldrh	r1, [r1, #12]
 800aafa:	fbb3 f3f1 	udiv	r3, r3, r1
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d201      	bcs.n	800ab06 <find_volume+0x42a>
 800ab02:	230d      	movs	r3, #13
 800ab04:	e06a      	b.n	800abdc <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ab06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab08:	f04f 32ff 	mov.w	r2, #4294967295
 800ab0c:	619a      	str	r2, [r3, #24]
 800ab0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab10:	699a      	ldr	r2, [r3, #24]
 800ab12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab14:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800ab16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab18:	2280      	movs	r2, #128	; 0x80
 800ab1a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ab1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab20:	2b03      	cmp	r3, #3
 800ab22:	d149      	bne.n	800abb8 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ab24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab26:	3338      	adds	r3, #56	; 0x38
 800ab28:	3330      	adds	r3, #48	; 0x30
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fe fa28 	bl	8008f80 <ld_word>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d140      	bne.n	800abb8 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ab36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab38:	3301      	adds	r3, #1
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab3e:	f7fe fd01 	bl	8009544 <move_window>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d137      	bne.n	800abb8 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 800ab48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ab4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab50:	3338      	adds	r3, #56	; 0x38
 800ab52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fe fa12 	bl	8008f80 <ld_word>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	461a      	mov	r2, r3
 800ab60:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d127      	bne.n	800abb8 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ab68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6a:	3338      	adds	r3, #56	; 0x38
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7fe fa1f 	bl	8008fb0 <ld_dword>
 800ab72:	4603      	mov	r3, r0
 800ab74:	4a1b      	ldr	r2, [pc, #108]	; (800abe4 <find_volume+0x508>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d11e      	bne.n	800abb8 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ab7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7c:	3338      	adds	r3, #56	; 0x38
 800ab7e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7fe fa14 	bl	8008fb0 <ld_dword>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	4a17      	ldr	r2, [pc, #92]	; (800abe8 <find_volume+0x50c>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d113      	bne.n	800abb8 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ab90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab92:	3338      	adds	r3, #56	; 0x38
 800ab94:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7fe fa09 	bl	8008fb0 <ld_dword>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800aba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba6:	3338      	adds	r3, #56	; 0x38
 800aba8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800abac:	4618      	mov	r0, r3
 800abae:	f7fe f9ff 	bl	8008fb0 <ld_dword>
 800abb2:	4602      	mov	r2, r0
 800abb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800abb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800abbe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800abc0:	4b0a      	ldr	r3, [pc, #40]	; (800abec <find_volume+0x510>)
 800abc2:	881b      	ldrh	r3, [r3, #0]
 800abc4:	3301      	adds	r3, #1
 800abc6:	b29a      	uxth	r2, r3
 800abc8:	4b08      	ldr	r3, [pc, #32]	; (800abec <find_volume+0x510>)
 800abca:	801a      	strh	r2, [r3, #0]
 800abcc:	4b07      	ldr	r3, [pc, #28]	; (800abec <find_volume+0x510>)
 800abce:	881a      	ldrh	r2, [r3, #0]
 800abd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800abd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800abd6:	f7fe fc4d 	bl	8009474 <clear_lock>
#endif
	return FR_OK;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3758      	adds	r7, #88	; 0x58
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	41615252 	.word	0x41615252
 800abe8:	61417272 	.word	0x61417272
 800abec:	20000894 	.word	0x20000894

0800abf0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800abfa:	2309      	movs	r3, #9
 800abfc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d02e      	beq.n	800ac62 <validate+0x72>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d02a      	beq.n	800ac62 <validate+0x72>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d025      	beq.n	800ac62 <validate+0x72>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	889a      	ldrh	r2, [r3, #4]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	88db      	ldrh	r3, [r3, #6]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d11e      	bne.n	800ac62 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7fe faa9 	bl	8009180 <lock_fs>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d014      	beq.n	800ac5e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	785b      	ldrb	r3, [r3, #1]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fe f902 	bl	8008e44 <disk_status>
 800ac40:	4603      	mov	r3, r0
 800ac42:	f003 0301 	and.w	r3, r3, #1
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d102      	bne.n	800ac50 <validate+0x60>
				res = FR_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	73fb      	strb	r3, [r7, #15]
 800ac4e:	e008      	b.n	800ac62 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2100      	movs	r1, #0
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fe faa8 	bl	80091ac <unlock_fs>
 800ac5c:	e001      	b.n	800ac62 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800ac5e:	230f      	movs	r3, #15
 800ac60:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ac62:	7bfb      	ldrb	r3, [r7, #15]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d102      	bne.n	800ac6e <validate+0x7e>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	e000      	b.n	800ac70 <validate+0x80>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	683a      	ldr	r2, [r7, #0]
 800ac72:	6013      	str	r3, [r2, #0]
	return res;
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
	...

0800ac80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b088      	sub	sp, #32
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ac92:	f107 0310 	add.w	r3, r7, #16
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7ff fc86 	bl	800a5a8 <get_ldnumber>
 800ac9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	da01      	bge.n	800aca8 <f_mount+0x28>
 800aca4:	230b      	movs	r3, #11
 800aca6:	e048      	b.n	800ad3a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800aca8:	4a26      	ldr	r2, [pc, #152]	; (800ad44 <f_mount+0xc4>)
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acb0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00f      	beq.n	800acd8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800acb8:	69b8      	ldr	r0, [r7, #24]
 800acba:	f7fe fbdb 	bl	8009474 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	4618      	mov	r0, r3
 800acc4:	f000 fee3 	bl	800ba8e <ff_del_syncobj>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <f_mount+0x52>
 800acce:	2302      	movs	r3, #2
 800acd0:	e033      	b.n	800ad3a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	2200      	movs	r2, #0
 800acd6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00f      	beq.n	800acfe <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2200      	movs	r2, #0
 800ace2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	3310      	adds	r3, #16
 800acec:	4619      	mov	r1, r3
 800acee:	4610      	mov	r0, r2
 800acf0:	f000 fead 	bl	800ba4e <ff_cre_syncobj>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d101      	bne.n	800acfe <f_mount+0x7e>
 800acfa:	2302      	movs	r3, #2
 800acfc:	e01d      	b.n	800ad3a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	4910      	ldr	r1, [pc, #64]	; (800ad44 <f_mount+0xc4>)
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d002      	beq.n	800ad14 <f_mount+0x94>
 800ad0e:	79fb      	ldrb	r3, [r7, #7]
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d001      	beq.n	800ad18 <f_mount+0x98>
 800ad14:	2300      	movs	r3, #0
 800ad16:	e010      	b.n	800ad3a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ad18:	f107 010c 	add.w	r1, r7, #12
 800ad1c:	f107 0308 	add.w	r3, r7, #8
 800ad20:	2200      	movs	r2, #0
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7ff fcda 	bl	800a6dc <find_volume>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	7dfa      	ldrb	r2, [r7, #23]
 800ad30:	4611      	mov	r1, r2
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7fe fa3a 	bl	80091ac <unlock_fs>
 800ad38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3720      	adds	r7, #32
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	20000890 	.word	0x20000890

0800ad48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b098      	sub	sp, #96	; 0x60
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	4613      	mov	r3, r2
 800ad54:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d101      	bne.n	800ad60 <f_open+0x18>
 800ad5c:	2309      	movs	r3, #9
 800ad5e:	e1c2      	b.n	800b0e6 <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ad60:	79fb      	ldrb	r3, [r7, #7]
 800ad62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad66:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ad68:	79fa      	ldrb	r2, [r7, #7]
 800ad6a:	f107 0110 	add.w	r1, r7, #16
 800ad6e:	f107 0308 	add.w	r3, r7, #8
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7ff fcb2 	bl	800a6dc <find_volume>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ad7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f040 819f 	bne.w	800b0c6 <f_open+0x37e>
		dj.obj.fs = fs;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	f107 0314 	add.w	r3, r7, #20
 800ad92:	4611      	mov	r1, r2
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff fb91 	bl	800a4bc <follow_path>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ada0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d11a      	bne.n	800adde <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ada8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800adac:	b25b      	sxtb	r3, r3
 800adae:	2b00      	cmp	r3, #0
 800adb0:	da03      	bge.n	800adba <f_open+0x72>
				res = FR_INVALID_NAME;
 800adb2:	2306      	movs	r3, #6
 800adb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800adb8:	e011      	b.n	800adde <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800adba:	79fb      	ldrb	r3, [r7, #7]
 800adbc:	f023 0301 	bic.w	r3, r3, #1
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	bf14      	ite	ne
 800adc4:	2301      	movne	r3, #1
 800adc6:	2300      	moveq	r3, #0
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	461a      	mov	r2, r3
 800adcc:	f107 0314 	add.w	r3, r7, #20
 800add0:	4611      	mov	r1, r2
 800add2:	4618      	mov	r0, r3
 800add4:	f7fe fa06 	bl	80091e4 <chk_lock>
 800add8:	4603      	mov	r3, r0
 800adda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800adde:	79fb      	ldrb	r3, [r7, #7]
 800ade0:	f003 031c 	and.w	r3, r3, #28
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d07f      	beq.n	800aee8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ade8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adec:	2b00      	cmp	r3, #0
 800adee:	d017      	beq.n	800ae20 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800adf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adf4:	2b04      	cmp	r3, #4
 800adf6:	d10e      	bne.n	800ae16 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800adf8:	f7fe fa50 	bl	800929c <enq_lock>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d006      	beq.n	800ae10 <f_open+0xc8>
 800ae02:	f107 0314 	add.w	r3, r7, #20
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7ff fa15 	bl	800a236 <dir_register>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	e000      	b.n	800ae12 <f_open+0xca>
 800ae10:	2312      	movs	r3, #18
 800ae12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ae16:	79fb      	ldrb	r3, [r7, #7]
 800ae18:	f043 0308 	orr.w	r3, r3, #8
 800ae1c:	71fb      	strb	r3, [r7, #7]
 800ae1e:	e010      	b.n	800ae42 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ae20:	7ebb      	ldrb	r3, [r7, #26]
 800ae22:	f003 0311 	and.w	r3, r3, #17
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d003      	beq.n	800ae32 <f_open+0xea>
					res = FR_DENIED;
 800ae2a:	2307      	movs	r3, #7
 800ae2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ae30:	e007      	b.n	800ae42 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ae32:	79fb      	ldrb	r3, [r7, #7]
 800ae34:	f003 0304 	and.w	r3, r3, #4
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d002      	beq.n	800ae42 <f_open+0xfa>
 800ae3c:	2308      	movs	r3, #8
 800ae3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ae42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d168      	bne.n	800af1c <f_open+0x1d4>
 800ae4a:	79fb      	ldrb	r3, [r7, #7]
 800ae4c:	f003 0308 	and.w	r3, r3, #8
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d063      	beq.n	800af1c <f_open+0x1d4>
				dw = GET_FATTIME();
 800ae54:	f7fd ff96 	bl	8008d84 <get_fattime>
 800ae58:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ae5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae5c:	330e      	adds	r3, #14
 800ae5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7fe f8e3 	bl	800902c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ae66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae68:	3316      	adds	r3, #22
 800ae6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7fe f8dd 	bl	800902c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ae72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae74:	330b      	adds	r3, #11
 800ae76:	2220      	movs	r2, #32
 800ae78:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae7e:	4611      	mov	r1, r2
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7ff f8e7 	bl	800a054 <ld_clust>
 800ae86:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7ff f8ff 	bl	800a092 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ae94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae96:	331c      	adds	r3, #28
 800ae98:	2100      	movs	r1, #0
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7fe f8c6 	bl	800902c <st_dword>
					fs->wflag = 1;
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	2201      	movs	r2, #1
 800aea4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800aea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d037      	beq.n	800af1c <f_open+0x1d4>
						dw = fs->winsect;
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeb0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800aeb2:	f107 0314 	add.w	r3, r7, #20
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7fe fdef 	bl	8009a9e <remove_chain>
 800aec0:	4603      	mov	r3, r0
 800aec2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800aec6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d126      	bne.n	800af1c <f_open+0x1d4>
							res = move_window(fs, dw);
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fe fb36 	bl	8009544 <move_window>
 800aed8:	4603      	mov	r3, r0
 800aeda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aee2:	3a01      	subs	r2, #1
 800aee4:	615a      	str	r2, [r3, #20]
 800aee6:	e019      	b.n	800af1c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800aee8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d115      	bne.n	800af1c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800aef0:	7ebb      	ldrb	r3, [r7, #26]
 800aef2:	f003 0310 	and.w	r3, r3, #16
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <f_open+0x1ba>
					res = FR_NO_FILE;
 800aefa:	2304      	movs	r3, #4
 800aefc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800af00:	e00c      	b.n	800af1c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800af02:	79fb      	ldrb	r3, [r7, #7]
 800af04:	f003 0302 	and.w	r3, r3, #2
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d007      	beq.n	800af1c <f_open+0x1d4>
 800af0c:	7ebb      	ldrb	r3, [r7, #26]
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	d002      	beq.n	800af1c <f_open+0x1d4>
						res = FR_DENIED;
 800af16:	2307      	movs	r3, #7
 800af18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800af1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af20:	2b00      	cmp	r3, #0
 800af22:	d128      	bne.n	800af76 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800af24:	79fb      	ldrb	r3, [r7, #7]
 800af26:	f003 0308 	and.w	r3, r3, #8
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d003      	beq.n	800af36 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800af2e:	79fb      	ldrb	r3, [r7, #7]
 800af30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af34:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800af3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800af44:	79fb      	ldrb	r3, [r7, #7]
 800af46:	f023 0301 	bic.w	r3, r3, #1
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	bf14      	ite	ne
 800af4e:	2301      	movne	r3, #1
 800af50:	2300      	moveq	r3, #0
 800af52:	b2db      	uxtb	r3, r3
 800af54:	461a      	mov	r2, r3
 800af56:	f107 0314 	add.w	r3, r7, #20
 800af5a:	4611      	mov	r1, r2
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7fe f9bf 	bl	80092e0 <inc_lock>
 800af62:	4602      	mov	r2, r0
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	691b      	ldr	r3, [r3, #16]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d102      	bne.n	800af76 <f_open+0x22e>
 800af70:	2302      	movs	r3, #2
 800af72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800af76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f040 80a3 	bne.w	800b0c6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af84:	4611      	mov	r1, r2
 800af86:	4618      	mov	r0, r3
 800af88:	f7ff f864 	bl	800a054 <ld_clust>
 800af8c:	4602      	mov	r2, r0
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800af92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af94:	331c      	adds	r3, #28
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe f80a 	bl	8008fb0 <ld_dword>
 800af9c:	4602      	mov	r2, r0
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2200      	movs	r2, #0
 800afa6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800afa8:	693a      	ldr	r2, [r7, #16]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	88da      	ldrh	r2, [r3, #6]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	79fa      	ldrb	r2, [r7, #7]
 800afba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2200      	movs	r2, #0
 800afc0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2200      	movs	r2, #0
 800afcc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	3330      	adds	r3, #48	; 0x30
 800afd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800afd6:	2100      	movs	r1, #0
 800afd8:	4618      	mov	r0, r3
 800afda:	f7fe f874 	bl	80090c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800afde:	79fb      	ldrb	r3, [r7, #7]
 800afe0:	f003 0320 	and.w	r3, r3, #32
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d06e      	beq.n	800b0c6 <f_open+0x37e>
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d06a      	beq.n	800b0c6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	68da      	ldr	r2, [r3, #12]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	895b      	ldrh	r3, [r3, #10]
 800affc:	461a      	mov	r2, r3
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	899b      	ldrh	r3, [r3, #12]
 800b002:	fb03 f302 	mul.w	r3, r3, r2
 800b006:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	657b      	str	r3, [r7, #84]	; 0x54
 800b014:	e016      	b.n	800b044 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fe fb4f 	bl	80096be <get_fat>
 800b020:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b024:	2b01      	cmp	r3, #1
 800b026:	d802      	bhi.n	800b02e <f_open+0x2e6>
 800b028:	2302      	movs	r3, #2
 800b02a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b02e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b034:	d102      	bne.n	800b03c <f_open+0x2f4>
 800b036:	2301      	movs	r3, #1
 800b038:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b03c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b03e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	657b      	str	r3, [r7, #84]	; 0x54
 800b044:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d103      	bne.n	800b054 <f_open+0x30c>
 800b04c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b04e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b050:	429a      	cmp	r2, r3
 800b052:	d8e0      	bhi.n	800b016 <f_open+0x2ce>
				}
				fp->clust = clst;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b058:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b05a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d131      	bne.n	800b0c6 <f_open+0x37e>
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	899b      	ldrh	r3, [r3, #12]
 800b066:	461a      	mov	r2, r3
 800b068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b06a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b06e:	fb02 f201 	mul.w	r2, r2, r1
 800b072:	1a9b      	subs	r3, r3, r2
 800b074:	2b00      	cmp	r3, #0
 800b076:	d026      	beq.n	800b0c6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7fe faff 	bl	8009680 <clust2sect>
 800b082:	6478      	str	r0, [r7, #68]	; 0x44
 800b084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b086:	2b00      	cmp	r3, #0
 800b088:	d103      	bne.n	800b092 <f_open+0x34a>
						res = FR_INT_ERR;
 800b08a:	2302      	movs	r3, #2
 800b08c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b090:	e019      	b.n	800b0c6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	899b      	ldrh	r3, [r3, #12]
 800b096:	461a      	mov	r2, r3
 800b098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b09a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b09e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0a0:	441a      	add	r2, r3
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	7858      	ldrb	r0, [r3, #1]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6a1a      	ldr	r2, [r3, #32]
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	f7fd ff05 	bl	8008ec4 <disk_read>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d002      	beq.n	800b0c6 <f_open+0x37e>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b0c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d002      	beq.n	800b0d4 <f_open+0x38c>
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800b0da:	4611      	mov	r1, r2
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fe f865 	bl	80091ac <unlock_fs>
 800b0e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3760      	adds	r7, #96	; 0x60
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b08c      	sub	sp, #48	; 0x30
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	60f8      	str	r0, [r7, #12]
 800b0f6:	60b9      	str	r1, [r7, #8]
 800b0f8:	607a      	str	r2, [r7, #4]
 800b0fa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	2200      	movs	r2, #0
 800b104:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f107 0210 	add.w	r2, r7, #16
 800b10c:	4611      	mov	r1, r2
 800b10e:	4618      	mov	r0, r3
 800b110:	f7ff fd6e 	bl	800abf0 <validate>
 800b114:	4603      	mov	r3, r0
 800b116:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b11a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d107      	bne.n	800b132 <f_write+0x44>
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	7d5b      	ldrb	r3, [r3, #21]
 800b126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b12a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d009      	beq.n	800b146 <f_write+0x58>
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b138:	4611      	mov	r1, r2
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7fe f836 	bl	80091ac <unlock_fs>
 800b140:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b144:	e192      	b.n	800b46c <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	7d1b      	ldrb	r3, [r3, #20]
 800b14a:	f003 0302 	and.w	r3, r3, #2
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d106      	bne.n	800b160 <f_write+0x72>
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	2107      	movs	r1, #7
 800b156:	4618      	mov	r0, r3
 800b158:	f7fe f828 	bl	80091ac <unlock_fs>
 800b15c:	2307      	movs	r3, #7
 800b15e:	e185      	b.n	800b46c <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	699a      	ldr	r2, [r3, #24]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	441a      	add	r2, r3
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	699b      	ldr	r3, [r3, #24]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	f080 816a 	bcs.w	800b446 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	699b      	ldr	r3, [r3, #24]
 800b176:	43db      	mvns	r3, r3
 800b178:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b17a:	e164      	b.n	800b446 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	699b      	ldr	r3, [r3, #24]
 800b180:	693a      	ldr	r2, [r7, #16]
 800b182:	8992      	ldrh	r2, [r2, #12]
 800b184:	fbb3 f1f2 	udiv	r1, r3, r2
 800b188:	fb02 f201 	mul.w	r2, r2, r1
 800b18c:	1a9b      	subs	r3, r3, r2
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f040 810f 	bne.w	800b3b2 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	693a      	ldr	r2, [r7, #16]
 800b19a:	8992      	ldrh	r2, [r2, #12]
 800b19c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	8952      	ldrh	r2, [r2, #10]
 800b1a4:	3a01      	subs	r2, #1
 800b1a6:	4013      	ands	r3, r2
 800b1a8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d14d      	bne.n	800b24c <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	699b      	ldr	r3, [r3, #24]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d10c      	bne.n	800b1d2 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d11a      	bne.n	800b1fa <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2100      	movs	r1, #0
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7fe fccd 	bl	8009b68 <create_chain>
 800b1ce:	62b8      	str	r0, [r7, #40]	; 0x28
 800b1d0:	e013      	b.n	800b1fa <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d007      	beq.n	800b1ea <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	699b      	ldr	r3, [r3, #24]
 800b1de:	4619      	mov	r1, r3
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f7fe fd59 	bl	8009c98 <clmt_clust>
 800b1e6:	62b8      	str	r0, [r7, #40]	; 0x28
 800b1e8:	e007      	b.n	800b1fa <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	69db      	ldr	r3, [r3, #28]
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	f7fe fcb8 	bl	8009b68 <create_chain>
 800b1f8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 8127 	beq.w	800b450 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b204:	2b01      	cmp	r3, #1
 800b206:	d109      	bne.n	800b21c <f_write+0x12e>
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2202      	movs	r2, #2
 800b20c:	755a      	strb	r2, [r3, #21]
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	2102      	movs	r1, #2
 800b212:	4618      	mov	r0, r3
 800b214:	f7fd ffca 	bl	80091ac <unlock_fs>
 800b218:	2302      	movs	r3, #2
 800b21a:	e127      	b.n	800b46c <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b222:	d109      	bne.n	800b238 <f_write+0x14a>
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2201      	movs	r2, #1
 800b228:	755a      	strb	r2, [r3, #21]
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	2101      	movs	r1, #1
 800b22e:	4618      	mov	r0, r3
 800b230:	f7fd ffbc 	bl	80091ac <unlock_fs>
 800b234:	2301      	movs	r3, #1
 800b236:	e119      	b.n	800b46c <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b23c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d102      	bne.n	800b24c <f_write+0x15e>
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b24a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	7d1b      	ldrb	r3, [r3, #20]
 800b250:	b25b      	sxtb	r3, r3
 800b252:	2b00      	cmp	r3, #0
 800b254:	da1d      	bge.n	800b292 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	7858      	ldrb	r0, [r3, #1]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6a1a      	ldr	r2, [r3, #32]
 800b264:	2301      	movs	r3, #1
 800b266:	f7fd fe4d 	bl	8008f04 <disk_write>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d009      	beq.n	800b284 <f_write+0x196>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2201      	movs	r2, #1
 800b274:	755a      	strb	r2, [r3, #21]
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	2101      	movs	r1, #1
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7fd ff96 	bl	80091ac <unlock_fs>
 800b280:	2301      	movs	r3, #1
 800b282:	e0f3      	b.n	800b46c <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	7d1b      	ldrb	r3, [r3, #20]
 800b288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b28c:	b2da      	uxtb	r2, r3
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b292:	693a      	ldr	r2, [r7, #16]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	69db      	ldr	r3, [r3, #28]
 800b298:	4619      	mov	r1, r3
 800b29a:	4610      	mov	r0, r2
 800b29c:	f7fe f9f0 	bl	8009680 <clust2sect>
 800b2a0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d109      	bne.n	800b2bc <f_write+0x1ce>
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2202      	movs	r2, #2
 800b2ac:	755a      	strb	r2, [r3, #21]
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	2102      	movs	r1, #2
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7fd ff7a 	bl	80091ac <unlock_fs>
 800b2b8:	2302      	movs	r3, #2
 800b2ba:	e0d7      	b.n	800b46c <f_write+0x37e>
			sect += csect;
 800b2bc:	697a      	ldr	r2, [r7, #20]
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	899b      	ldrh	r3, [r3, #12]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b2d2:	6a3b      	ldr	r3, [r7, #32]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d048      	beq.n	800b36a <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b2d8:	69ba      	ldr	r2, [r7, #24]
 800b2da:	6a3b      	ldr	r3, [r7, #32]
 800b2dc:	4413      	add	r3, r2
 800b2de:	693a      	ldr	r2, [r7, #16]
 800b2e0:	8952      	ldrh	r2, [r2, #10]
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d905      	bls.n	800b2f2 <f_write+0x204>
					cc = fs->csize - csect;
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	895b      	ldrh	r3, [r3, #10]
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	7858      	ldrb	r0, [r3, #1]
 800b2f6:	6a3b      	ldr	r3, [r7, #32]
 800b2f8:	697a      	ldr	r2, [r7, #20]
 800b2fa:	69f9      	ldr	r1, [r7, #28]
 800b2fc:	f7fd fe02 	bl	8008f04 <disk_write>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d009      	beq.n	800b31a <f_write+0x22c>
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2201      	movs	r2, #1
 800b30a:	755a      	strb	r2, [r3, #21]
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	2101      	movs	r1, #1
 800b310:	4618      	mov	r0, r3
 800b312:	f7fd ff4b 	bl	80091ac <unlock_fs>
 800b316:	2301      	movs	r3, #1
 800b318:	e0a8      	b.n	800b46c <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6a1a      	ldr	r2, [r3, #32]
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	6a3a      	ldr	r2, [r7, #32]
 800b324:	429a      	cmp	r2, r3
 800b326:	d918      	bls.n	800b35a <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	6a1a      	ldr	r2, [r3, #32]
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	1ad3      	subs	r3, r2, r3
 800b336:	693a      	ldr	r2, [r7, #16]
 800b338:	8992      	ldrh	r2, [r2, #12]
 800b33a:	fb02 f303 	mul.w	r3, r2, r3
 800b33e:	69fa      	ldr	r2, [r7, #28]
 800b340:	18d1      	adds	r1, r2, r3
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	899b      	ldrh	r3, [r3, #12]
 800b346:	461a      	mov	r2, r3
 800b348:	f7fd fe9c 	bl	8009084 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	7d1b      	ldrb	r3, [r3, #20]
 800b350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b354:	b2da      	uxtb	r2, r3
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	899b      	ldrh	r3, [r3, #12]
 800b35e:	461a      	mov	r2, r3
 800b360:	6a3b      	ldr	r3, [r7, #32]
 800b362:	fb02 f303 	mul.w	r3, r2, r3
 800b366:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b368:	e050      	b.n	800b40c <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	6a1b      	ldr	r3, [r3, #32]
 800b36e:	697a      	ldr	r2, [r7, #20]
 800b370:	429a      	cmp	r2, r3
 800b372:	d01b      	beq.n	800b3ac <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	699a      	ldr	r2, [r3, #24]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d215      	bcs.n	800b3ac <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	7858      	ldrb	r0, [r3, #1]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b38a:	2301      	movs	r3, #1
 800b38c:	697a      	ldr	r2, [r7, #20]
 800b38e:	f7fd fd99 	bl	8008ec4 <disk_read>
 800b392:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b394:	2b00      	cmp	r3, #0
 800b396:	d009      	beq.n	800b3ac <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2201      	movs	r2, #1
 800b39c:	755a      	strb	r2, [r3, #21]
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	2101      	movs	r1, #1
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fd ff02 	bl	80091ac <unlock_fs>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e05f      	b.n	800b46c <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	697a      	ldr	r2, [r7, #20]
 800b3b0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	899b      	ldrh	r3, [r3, #12]
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	699b      	ldr	r3, [r3, #24]
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	8992      	ldrh	r2, [r2, #12]
 800b3c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3c4:	fb02 f201 	mul.w	r2, r2, r1
 800b3c8:	1a9b      	subs	r3, r3, r2
 800b3ca:	1ac3      	subs	r3, r0, r3
 800b3cc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b3ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d901      	bls.n	800b3da <f_write+0x2ec>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	8992      	ldrh	r2, [r2, #12]
 800b3e8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b3ec:	fb02 f200 	mul.w	r2, r2, r0
 800b3f0:	1a9b      	subs	r3, r3, r2
 800b3f2:	440b      	add	r3, r1
 800b3f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3f6:	69f9      	ldr	r1, [r7, #28]
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7fd fe43 	bl	8009084 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	7d1b      	ldrb	r3, [r3, #20]
 800b402:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b406:	b2da      	uxtb	r2, r3
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b40c:	69fa      	ldr	r2, [r7, #28]
 800b40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b410:	4413      	add	r3, r2
 800b412:	61fb      	str	r3, [r7, #28]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	699a      	ldr	r2, [r3, #24]
 800b418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41a:	441a      	add	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	619a      	str	r2, [r3, #24]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	68da      	ldr	r2, [r3, #12]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	699b      	ldr	r3, [r3, #24]
 800b428:	429a      	cmp	r2, r3
 800b42a:	bf38      	it	cc
 800b42c:	461a      	movcc	r2, r3
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	60da      	str	r2, [r3, #12]
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b438:	441a      	add	r2, r3
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	601a      	str	r2, [r3, #0]
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	1ad3      	subs	r3, r2, r3
 800b444:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f47f ae97 	bne.w	800b17c <f_write+0x8e>
 800b44e:	e000      	b.n	800b452 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b450:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	7d1b      	ldrb	r3, [r3, #20]
 800b456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b45a:	b2da      	uxtb	r2, r3
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	2100      	movs	r1, #0
 800b464:	4618      	mov	r0, r3
 800b466:	f7fd fea1 	bl	80091ac <unlock_fs>
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3730      	adds	r7, #48	; 0x30
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f107 0208 	add.w	r2, r7, #8
 800b482:	4611      	mov	r1, r2
 800b484:	4618      	mov	r0, r3
 800b486:	f7ff fbb3 	bl	800abf0 <validate>
 800b48a:	4603      	mov	r3, r0
 800b48c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b48e:	7dfb      	ldrb	r3, [r7, #23]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d16d      	bne.n	800b570 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	7d1b      	ldrb	r3, [r3, #20]
 800b498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d067      	beq.n	800b570 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	7d1b      	ldrb	r3, [r3, #20]
 800b4a4:	b25b      	sxtb	r3, r3
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	da1a      	bge.n	800b4e0 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	7858      	ldrb	r0, [r3, #1]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6a1a      	ldr	r2, [r3, #32]
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	f7fd fd23 	bl	8008f04 <disk_write>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d006      	beq.n	800b4d2 <f_sync+0x5e>
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	2101      	movs	r1, #1
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7fd fe6f 	bl	80091ac <unlock_fs>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e055      	b.n	800b57e <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	7d1b      	ldrb	r3, [r3, #20]
 800b4d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4da:	b2da      	uxtb	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b4e0:	f7fd fc50 	bl	8008d84 <get_fattime>
 800b4e4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b4e6:	68ba      	ldr	r2, [r7, #8]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	4610      	mov	r0, r2
 800b4f0:	f7fe f828 	bl	8009544 <move_window>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b4f8:	7dfb      	ldrb	r3, [r7, #23]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d138      	bne.n	800b570 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b502:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	330b      	adds	r3, #11
 800b508:	781a      	ldrb	r2, [r3, #0]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	330b      	adds	r3, #11
 800b50e:	f042 0220 	orr.w	r2, r2, #32
 800b512:	b2d2      	uxtb	r2, r2
 800b514:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6818      	ldr	r0, [r3, #0]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	689b      	ldr	r3, [r3, #8]
 800b51e:	461a      	mov	r2, r3
 800b520:	68f9      	ldr	r1, [r7, #12]
 800b522:	f7fe fdb6 	bl	800a092 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f103 021c 	add.w	r2, r3, #28
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	4619      	mov	r1, r3
 800b532:	4610      	mov	r0, r2
 800b534:	f7fd fd7a 	bl	800902c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	3316      	adds	r3, #22
 800b53c:	6939      	ldr	r1, [r7, #16]
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fd fd74 	bl	800902c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	3312      	adds	r3, #18
 800b548:	2100      	movs	r1, #0
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fd fd53 	bl	8008ff6 <st_word>
					fs->wflag = 1;
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	2201      	movs	r2, #1
 800b554:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fe f821 	bl	80095a0 <sync_fs>
 800b55e:	4603      	mov	r3, r0
 800b560:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	7d1b      	ldrb	r3, [r3, #20]
 800b566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b56a:	b2da      	uxtb	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	7dfa      	ldrb	r2, [r7, #23]
 800b574:	4611      	mov	r1, r2
 800b576:	4618      	mov	r0, r3
 800b578:	f7fd fe18 	bl	80091ac <unlock_fs>
 800b57c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3718      	adds	r7, #24
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b084      	sub	sp, #16
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f7ff ff70 	bl	800b474 <f_sync>
 800b594:	4603      	mov	r3, r0
 800b596:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b598:	7bfb      	ldrb	r3, [r7, #15]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d11d      	bne.n	800b5da <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f107 0208 	add.w	r2, r7, #8
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7ff fb22 	bl	800abf0 <validate>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b5b0:	7bfb      	ldrb	r3, [r7, #15]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d111      	bne.n	800b5da <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fd ff1e 	bl	80093fc <dec_lock>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d102      	bne.n	800b5d0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	2100      	movs	r1, #0
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7fd fde9 	bl	80091ac <unlock_fs>
#endif
		}
	}
	return res;
 800b5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b086      	sub	sp, #24
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d101      	bne.n	800b5f8 <f_opendir+0x14>
 800b5f4:	2309      	movs	r3, #9
 800b5f6:	e06a      	b.n	800b6ce <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800b5fc:	f107 010c 	add.w	r1, r7, #12
 800b600:	463b      	mov	r3, r7
 800b602:	2200      	movs	r2, #0
 800b604:	4618      	mov	r0, r3
 800b606:	f7ff f869 	bl	800a6dc <find_volume>
 800b60a:	4603      	mov	r3, r0
 800b60c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b60e:	7dfb      	ldrb	r3, [r7, #23]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d14f      	bne.n	800b6b4 <f_opendir+0xd0>
		obj->fs = fs;
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	4619      	mov	r1, r3
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7fe ff4c 	bl	800a4bc <follow_path>
 800b624:	4603      	mov	r3, r0
 800b626:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800b628:	7dfb      	ldrb	r3, [r7, #23]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d13d      	bne.n	800b6aa <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b634:	b25b      	sxtb	r3, r3
 800b636:	2b00      	cmp	r3, #0
 800b638:	db12      	blt.n	800b660 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	799b      	ldrb	r3, [r3, #6]
 800b63e:	f003 0310 	and.w	r3, r3, #16
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00a      	beq.n	800b65c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b646:	68fa      	ldr	r2, [r7, #12]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	4619      	mov	r1, r3
 800b64e:	4610      	mov	r0, r2
 800b650:	f7fe fd00 	bl	800a054 <ld_clust>
 800b654:	4602      	mov	r2, r0
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	609a      	str	r2, [r3, #8]
 800b65a:	e001      	b.n	800b660 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800b65c:	2305      	movs	r3, #5
 800b65e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800b660:	7dfb      	ldrb	r3, [r7, #23]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d121      	bne.n	800b6aa <f_opendir+0xc6>
				obj->id = fs->id;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	88da      	ldrh	r2, [r3, #6]
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b66e:	2100      	movs	r1, #0
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f7fe fb49 	bl	8009d08 <dir_sdi>
 800b676:	4603      	mov	r3, r0
 800b678:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800b67a:	7dfb      	ldrb	r3, [r7, #23]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d114      	bne.n	800b6aa <f_opendir+0xc6>
					if (obj->sclust) {
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d00d      	beq.n	800b6a4 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b688:	2100      	movs	r1, #0
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f7fd fe28 	bl	80092e0 <inc_lock>
 800b690:	4602      	mov	r2, r0
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d105      	bne.n	800b6aa <f_opendir+0xc6>
 800b69e:	2312      	movs	r3, #18
 800b6a0:	75fb      	strb	r3, [r7, #23]
 800b6a2:	e002      	b.n	800b6aa <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b6aa:	7dfb      	ldrb	r3, [r7, #23]
 800b6ac:	2b04      	cmp	r3, #4
 800b6ae:	d101      	bne.n	800b6b4 <f_opendir+0xd0>
 800b6b0:	2305      	movs	r3, #5
 800b6b2:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b6b4:	7dfb      	ldrb	r3, [r7, #23]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d002      	beq.n	800b6c0 <f_opendir+0xdc>
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	7dfa      	ldrb	r2, [r7, #23]
 800b6c4:	4611      	mov	r1, r2
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fd fd70 	bl	80091ac <unlock_fs>
 800b6cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3718      	adds	r7, #24
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b084      	sub	sp, #16
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f107 0208 	add.w	r2, r7, #8
 800b6e4:	4611      	mov	r1, r2
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7ff fa82 	bl	800abf0 <validate>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b6f0:	7bfb      	ldrb	r3, [r7, #15]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d115      	bne.n	800b722 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d006      	beq.n	800b70c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	4618      	mov	r0, r3
 800b704:	f7fd fe7a 	bl	80093fc <dec_lock>
 800b708:	4603      	mov	r3, r0
 800b70a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b70c:	7bfb      	ldrb	r3, [r7, #15]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d102      	bne.n	800b718 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	2100      	movs	r1, #0
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7fd fd45 	bl	80091ac <unlock_fs>
#endif
	}
	return res;
 800b722:	7bfb      	ldrb	r3, [r7, #15]
}
 800b724:	4618      	mov	r0, r3
 800b726:	3710      	adds	r7, #16
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f107 0208 	add.w	r2, r7, #8
 800b73c:	4611      	mov	r1, r2
 800b73e:	4618      	mov	r0, r3
 800b740:	f7ff fa56 	bl	800abf0 <validate>
 800b744:	4603      	mov	r3, r0
 800b746:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b748:	7bfb      	ldrb	r3, [r7, #15]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d126      	bne.n	800b79c <f_readdir+0x70>
		if (!fno) {
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d106      	bne.n	800b762 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b754:	2100      	movs	r1, #0
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f7fe fad6 	bl	8009d08 <dir_sdi>
 800b75c:	4603      	mov	r3, r0
 800b75e:	73fb      	strb	r3, [r7, #15]
 800b760:	e01c      	b.n	800b79c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b762:	2100      	movs	r1, #0
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f7fe fcb4 	bl	800a0d2 <dir_read>
 800b76a:	4603      	mov	r3, r0
 800b76c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b76e:	7bfb      	ldrb	r3, [r7, #15]
 800b770:	2b04      	cmp	r3, #4
 800b772:	d101      	bne.n	800b778 <f_readdir+0x4c>
 800b774:	2300      	movs	r3, #0
 800b776:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b778:	7bfb      	ldrb	r3, [r7, #15]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d10e      	bne.n	800b79c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b77e:	6839      	ldr	r1, [r7, #0]
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f7fe fda8 	bl	800a2d6 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b786:	2100      	movs	r1, #0
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f7fe fb46 	bl	8009e1a <dir_next>
 800b78e:	4603      	mov	r3, r0
 800b790:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b792:	7bfb      	ldrb	r3, [r7, #15]
 800b794:	2b04      	cmp	r3, #4
 800b796:	d101      	bne.n	800b79c <f_readdir+0x70>
 800b798:	2300      	movs	r3, #0
 800b79a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	7bfa      	ldrb	r2, [r7, #15]
 800b7a0:	4611      	mov	r1, r2
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fd fd02 	bl	80091ac <unlock_fs>
 800b7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b090      	sub	sp, #64	; 0x40
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
 800b7ba:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800b7bc:	f107 010c 	add.w	r1, r7, #12
 800b7c0:	1d3b      	adds	r3, r7, #4
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7fe ff89 	bl	800a6dc <find_volume>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800b7d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d11f      	bne.n	800b818 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	f107 030c 	add.w	r3, r7, #12
 800b7de:	4611      	mov	r1, r2
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7fe fe6b 	bl	800a4bc <follow_path>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800b7ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d111      	bne.n	800b818 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800b7f4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b7f8:	b25b      	sxtb	r3, r3
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	da03      	bge.n	800b806 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800b7fe:	2306      	movs	r3, #6
 800b800:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b804:	e008      	b.n	800b818 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d005      	beq.n	800b818 <f_stat+0x66>
 800b80c:	f107 030c 	add.w	r3, r7, #12
 800b810:	6839      	ldr	r1, [r7, #0]
 800b812:	4618      	mov	r0, r3
 800b814:	f7fe fd5f 	bl	800a2d6 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b81e:	4611      	mov	r1, r2
 800b820:	4618      	mov	r0, r3
 800b822:	f7fd fcc3 	bl	80091ac <unlock_fs>
 800b826:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3740      	adds	r7, #64	; 0x40
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b832:	b580      	push	{r7, lr}
 800b834:	b09e      	sub	sp, #120	; 0x78
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800b83a:	2300      	movs	r3, #0
 800b83c:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b83e:	f107 010c 	add.w	r1, r7, #12
 800b842:	1d3b      	adds	r3, r7, #4
 800b844:	2202      	movs	r2, #2
 800b846:	4618      	mov	r0, r3
 800b848:	f7fe ff48 	bl	800a6dc <find_volume>
 800b84c:	4603      	mov	r3, r0
 800b84e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800b856:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f040 808e 	bne.w	800b97c <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b866:	4611      	mov	r1, r2
 800b868:	4618      	mov	r0, r3
 800b86a:	f7fe fe27 	bl	800a4bc <follow_path>
 800b86e:	4603      	mov	r3, r0
 800b870:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800b874:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d108      	bne.n	800b88e <f_unlink+0x5c>
 800b87c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b880:	2102      	movs	r1, #2
 800b882:	4618      	mov	r0, r3
 800b884:	f7fd fcae 	bl	80091e4 <chk_lock>
 800b888:	4603      	mov	r3, r0
 800b88a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b88e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b892:	2b00      	cmp	r3, #0
 800b894:	d172      	bne.n	800b97c <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b896:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b89a:	b25b      	sxtb	r3, r3
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	da03      	bge.n	800b8a8 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b8a0:	2306      	movs	r3, #6
 800b8a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b8a6:	e008      	b.n	800b8ba <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800b8a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b8ac:	f003 0301 	and.w	r3, r3, #1
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d002      	beq.n	800b8ba <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b8b4:	2307      	movs	r3, #7
 800b8b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800b8ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d134      	bne.n	800b92c <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b8c6:	4611      	mov	r1, r2
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fe fbc3 	bl	800a054 <ld_clust>
 800b8ce:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800b8d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b8d4:	f003 0310 	and.w	r3, r3, #16
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d027      	beq.n	800b92c <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800b8e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8e2:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800b8e4:	f107 0310 	add.w	r3, r7, #16
 800b8e8:	2100      	movs	r1, #0
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fe fa0c 	bl	8009d08 <dir_sdi>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800b8f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d116      	bne.n	800b92c <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800b8fe:	f107 0310 	add.w	r3, r7, #16
 800b902:	2100      	movs	r1, #0
 800b904:	4618      	mov	r0, r3
 800b906:	f7fe fbe4 	bl	800a0d2 <dir_read>
 800b90a:	4603      	mov	r3, r0
 800b90c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800b910:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b914:	2b00      	cmp	r3, #0
 800b916:	d102      	bne.n	800b91e <f_unlink+0xec>
 800b918:	2307      	movs	r3, #7
 800b91a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800b91e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b922:	2b04      	cmp	r3, #4
 800b924:	d102      	bne.n	800b92c <f_unlink+0xfa>
 800b926:	2300      	movs	r3, #0
 800b928:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800b92c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b930:	2b00      	cmp	r3, #0
 800b932:	d123      	bne.n	800b97c <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800b934:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b938:	4618      	mov	r0, r3
 800b93a:	f7fe fcae 	bl	800a29a <dir_remove>
 800b93e:	4603      	mov	r3, r0
 800b940:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800b944:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10c      	bne.n	800b966 <f_unlink+0x134>
 800b94c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d009      	beq.n	800b966 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800b952:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b956:	2200      	movs	r2, #0
 800b958:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7fe f89f 	bl	8009a9e <remove_chain>
 800b960:	4603      	mov	r3, r0
 800b962:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800b966:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d106      	bne.n	800b97c <f_unlink+0x14a>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	4618      	mov	r0, r3
 800b972:	f7fd fe15 	bl	80095a0 <sync_fs>
 800b976:	4603      	mov	r3, r0
 800b978:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800b982:	4611      	mov	r1, r2
 800b984:	4618      	mov	r0, r3
 800b986:	f7fd fc11 	bl	80091ac <unlock_fs>
 800b98a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3778      	adds	r7, #120	; 0x78
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
	...

0800b998 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b998:	b480      	push	{r7}
 800b99a:	b087      	sub	sp, #28
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b9ae:	4b1f      	ldr	r3, [pc, #124]	; (800ba2c <FATFS_LinkDriverEx+0x94>)
 800b9b0:	7a5b      	ldrb	r3, [r3, #9]
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d131      	bne.n	800ba1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b9b8:	4b1c      	ldr	r3, [pc, #112]	; (800ba2c <FATFS_LinkDriverEx+0x94>)
 800b9ba:	7a5b      	ldrb	r3, [r3, #9]
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	461a      	mov	r2, r3
 800b9c0:	4b1a      	ldr	r3, [pc, #104]	; (800ba2c <FATFS_LinkDriverEx+0x94>)
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b9c6:	4b19      	ldr	r3, [pc, #100]	; (800ba2c <FATFS_LinkDriverEx+0x94>)
 800b9c8:	7a5b      	ldrb	r3, [r3, #9]
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	4a17      	ldr	r2, [pc, #92]	; (800ba2c <FATFS_LinkDriverEx+0x94>)
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	4413      	add	r3, r2
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b9d6:	4b15      	ldr	r3, [pc, #84]	; (800ba2c <FATFS_LinkDriverEx+0x94>)
 800b9d8:	7a5b      	ldrb	r3, [r3, #9]
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	461a      	mov	r2, r3
 800b9de:	4b13      	ldr	r3, [pc, #76]	; (800ba2c <FATFS_LinkDriverEx+0x94>)
 800b9e0:	4413      	add	r3, r2
 800b9e2:	79fa      	ldrb	r2, [r7, #7]
 800b9e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b9e6:	4b11      	ldr	r3, [pc, #68]	; (800ba2c <FATFS_LinkDriverEx+0x94>)
 800b9e8:	7a5b      	ldrb	r3, [r3, #9]
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	1c5a      	adds	r2, r3, #1
 800b9ee:	b2d1      	uxtb	r1, r2
 800b9f0:	4a0e      	ldr	r2, [pc, #56]	; (800ba2c <FATFS_LinkDriverEx+0x94>)
 800b9f2:	7251      	strb	r1, [r2, #9]
 800b9f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b9f6:	7dbb      	ldrb	r3, [r7, #22]
 800b9f8:	3330      	adds	r3, #48	; 0x30
 800b9fa:	b2da      	uxtb	r2, r3
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	3301      	adds	r3, #1
 800ba04:	223a      	movs	r2, #58	; 0x3a
 800ba06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	3302      	adds	r3, #2
 800ba0c:	222f      	movs	r2, #47	; 0x2f
 800ba0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	3303      	adds	r3, #3
 800ba14:	2200      	movs	r2, #0
 800ba16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ba1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	371c      	adds	r7, #28
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	200008b8 	.word	0x200008b8

0800ba30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	6839      	ldr	r1, [r7, #0]
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f7ff ffaa 	bl	800b998 <FATFS_LinkDriverEx>
 800ba44:	4603      	mov	r3, r0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b086      	sub	sp, #24
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	4603      	mov	r3, r0
 800ba56:	6039      	str	r1, [r7, #0]
 800ba58:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	60fb      	str	r3, [r7, #12]
 800ba5e:	2300      	movs	r3, #0
 800ba60:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800ba62:	f107 030c 	add.w	r3, r7, #12
 800ba66:	2101      	movs	r1, #1
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f000 f8cd 	bl	800bc08 <osSemaphoreCreate>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	bf14      	ite	ne
 800ba7c:	2301      	movne	r3, #1
 800ba7e:	2300      	moveq	r3, #0
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	617b      	str	r3, [r7, #20]

    return ret;
 800ba84:	697b      	ldr	r3, [r7, #20]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3718      	adds	r7, #24
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b082      	sub	sp, #8
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 f97a 	bl	800bd90 <osSemaphoreDelete>
#endif
    return 1;
 800ba9c:	2301      	movs	r3, #1
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3708      	adds	r7, #8
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b084      	sub	sp, #16
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800baae:	2300      	movs	r3, #0
 800bab0:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800bab2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 f8e6 	bl	800bc88 <osSemaphoreWait>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d101      	bne.n	800bac6 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800bac2:	2301      	movs	r3, #1
 800bac4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800bac6:	68fb      	ldr	r3, [r7, #12]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 f923 	bl	800bd24 <osSemaphoreRelease>
#endif
}
 800bade:	bf00      	nop
 800bae0:	3708      	adds	r7, #8
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bae6:	b480      	push	{r7}
 800bae8:	b085      	sub	sp, #20
 800baea:	af00      	add	r7, sp, #0
 800baec:	4603      	mov	r3, r0
 800baee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800baf0:	2300      	movs	r3, #0
 800baf2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800baf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800baf8:	2b84      	cmp	r3, #132	; 0x84
 800bafa:	d005      	beq.n	800bb08 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bafc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	4413      	add	r3, r2
 800bb04:	3303      	adds	r3, #3
 800bb06:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bb08:	68fb      	ldr	r3, [r7, #12]
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3714      	adds	r7, #20
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bb16:	b480      	push	{r7}
 800bb18:	b083      	sub	sp, #12
 800bb1a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb1c:	f3ef 8305 	mrs	r3, IPSR
 800bb20:	607b      	str	r3, [r7, #4]
  return(result);
 800bb22:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	bf14      	ite	ne
 800bb28:	2301      	movne	r3, #1
 800bb2a:	2300      	moveq	r3, #0
 800bb2c:	b2db      	uxtb	r3, r3
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	370c      	adds	r7, #12
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr

0800bb3a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bb3e:	f001 f9e9 	bl	800cf14 <vTaskStartScheduler>
  
  return osOK;
 800bb42:	2300      	movs	r3, #0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bb48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb4a:	b089      	sub	sp, #36	; 0x24
 800bb4c:	af04      	add	r7, sp, #16
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	695b      	ldr	r3, [r3, #20]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d020      	beq.n	800bb9c <osThreadCreate+0x54>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	699b      	ldr	r3, [r3, #24]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d01c      	beq.n	800bb9c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	685c      	ldr	r4, [r3, #4]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681d      	ldr	r5, [r3, #0]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	691e      	ldr	r6, [r3, #16]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7ff ffb6 	bl	800bae6 <makeFreeRtosPriority>
 800bb7a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	695b      	ldr	r3, [r3, #20]
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb84:	9202      	str	r2, [sp, #8]
 800bb86:	9301      	str	r3, [sp, #4]
 800bb88:	9100      	str	r1, [sp, #0]
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	4632      	mov	r2, r6
 800bb8e:	4629      	mov	r1, r5
 800bb90:	4620      	mov	r0, r4
 800bb92:	f000 fff7 	bl	800cb84 <xTaskCreateStatic>
 800bb96:	4603      	mov	r3, r0
 800bb98:	60fb      	str	r3, [r7, #12]
 800bb9a:	e01c      	b.n	800bbd6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	685c      	ldr	r4, [r3, #4]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bba8:	b29e      	uxth	r6, r3
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7ff ff98 	bl	800bae6 <makeFreeRtosPriority>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	f107 030c 	add.w	r3, r7, #12
 800bbbc:	9301      	str	r3, [sp, #4]
 800bbbe:	9200      	str	r2, [sp, #0]
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	4632      	mov	r2, r6
 800bbc4:	4629      	mov	r1, r5
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	f001 f839 	bl	800cc3e <xTaskCreate>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d001      	beq.n	800bbd6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	e000      	b.n	800bbd8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3714      	adds	r7, #20
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bbe0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d001      	beq.n	800bbf6 <osDelay+0x16>
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	e000      	b.n	800bbf8 <osDelay+0x18>
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f001 f957 	bl	800ceac <vTaskDelay>
  
  return osOK;
 800bbfe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3710      	adds	r7, #16
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af02      	add	r7, sp, #8
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d016      	beq.n	800bc48 <osSemaphoreCreate+0x40>
    if (count == 1) {
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d10a      	bne.n	800bc36 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	2203      	movs	r2, #3
 800bc26:	9200      	str	r2, [sp, #0]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	2001      	movs	r0, #1
 800bc2e:	f000 f9df 	bl	800bff0 <xQueueGenericCreateStatic>
 800bc32:	4603      	mov	r3, r0
 800bc34:	e023      	b.n	800bc7e <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800bc36:	6838      	ldr	r0, [r7, #0]
 800bc38:	6839      	ldr	r1, [r7, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	461a      	mov	r2, r3
 800bc40:	f000 faa7 	bl	800c192 <xQueueCreateCountingSemaphoreStatic>
 800bc44:	4603      	mov	r3, r0
 800bc46:	e01a      	b.n	800bc7e <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d110      	bne.n	800bc70 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 800bc4e:	2203      	movs	r2, #3
 800bc50:	2100      	movs	r1, #0
 800bc52:	2001      	movs	r0, #1
 800bc54:	f000 fa44 	bl	800c0e0 <xQueueGenericCreate>
 800bc58:	60f8      	str	r0, [r7, #12]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d005      	beq.n	800bc6c <osSemaphoreCreate+0x64>
 800bc60:	2300      	movs	r3, #0
 800bc62:	2200      	movs	r2, #0
 800bc64:	2100      	movs	r1, #0
 800bc66:	68f8      	ldr	r0, [r7, #12]
 800bc68:	f000 fafe 	bl	800c268 <xQueueGenericSend>
      return sema;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	e006      	b.n	800bc7e <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	683a      	ldr	r2, [r7, #0]
 800bc74:	4611      	mov	r1, r2
 800bc76:	4618      	mov	r0, r3
 800bc78:	f000 fac2 	bl	800c200 <xQueueCreateCountingSemaphore>
 800bc7c:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
	...

0800bc88 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bc92:	2300      	movs	r3, #0
 800bc94:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d101      	bne.n	800bca0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bc9c:	2380      	movs	r3, #128	; 0x80
 800bc9e:	e03a      	b.n	800bd16 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800bca0:	2300      	movs	r3, #0
 800bca2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcaa:	d103      	bne.n	800bcb4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bcac:	f04f 33ff 	mov.w	r3, #4294967295
 800bcb0:	60fb      	str	r3, [r7, #12]
 800bcb2:	e009      	b.n	800bcc8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d006      	beq.n	800bcc8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d101      	bne.n	800bcc8 <osSemaphoreWait+0x40>
      ticks = 1;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bcc8:	f7ff ff25 	bl	800bb16 <inHandlerMode>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d017      	beq.n	800bd02 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bcd2:	f107 0308 	add.w	r3, r7, #8
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	2100      	movs	r1, #0
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fd5c 	bl	800c798 <xQueueReceiveFromISR>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d001      	beq.n	800bcea <osSemaphoreWait+0x62>
      return osErrorOS;
 800bce6:	23ff      	movs	r3, #255	; 0xff
 800bce8:	e015      	b.n	800bd16 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d011      	beq.n	800bd14 <osSemaphoreWait+0x8c>
 800bcf0:	4b0b      	ldr	r3, [pc, #44]	; (800bd20 <osSemaphoreWait+0x98>)
 800bcf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcf6:	601a      	str	r2, [r3, #0]
 800bcf8:	f3bf 8f4f 	dsb	sy
 800bcfc:	f3bf 8f6f 	isb	sy
 800bd00:	e008      	b.n	800bd14 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bd02:	68f9      	ldr	r1, [r7, #12]
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 fc3b 	bl	800c580 <xQueueSemaphoreTake>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d001      	beq.n	800bd14 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800bd10:	23ff      	movs	r3, #255	; 0xff
 800bd12:	e000      	b.n	800bd16 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	e000ed04 	.word	0xe000ed04

0800bd24 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bd30:	2300      	movs	r3, #0
 800bd32:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800bd34:	f7ff feef 	bl	800bb16 <inHandlerMode>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d016      	beq.n	800bd6c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bd3e:	f107 0308 	add.w	r3, r7, #8
 800bd42:	4619      	mov	r1, r3
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 fb8d 	bl	800c464 <xQueueGiveFromISR>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d001      	beq.n	800bd54 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800bd50:	23ff      	movs	r3, #255	; 0xff
 800bd52:	e017      	b.n	800bd84 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d013      	beq.n	800bd82 <osSemaphoreRelease+0x5e>
 800bd5a:	4b0c      	ldr	r3, [pc, #48]	; (800bd8c <osSemaphoreRelease+0x68>)
 800bd5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd60:	601a      	str	r2, [r3, #0]
 800bd62:	f3bf 8f4f 	dsb	sy
 800bd66:	f3bf 8f6f 	isb	sy
 800bd6a:	e00a      	b.n	800bd82 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	2200      	movs	r2, #0
 800bd70:	2100      	movs	r1, #0
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 fa78 	bl	800c268 <xQueueGenericSend>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d001      	beq.n	800bd82 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800bd7e:	23ff      	movs	r3, #255	; 0xff
 800bd80:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800bd82:	68fb      	ldr	r3, [r7, #12]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3710      	adds	r7, #16
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	e000ed04 	.word	0xe000ed04

0800bd90 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800bd98:	f7ff febd 	bl	800bb16 <inHandlerMode>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d001      	beq.n	800bda6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800bda2:	2382      	movs	r3, #130	; 0x82
 800bda4:	e003      	b.n	800bdae <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 fd76 	bl	800c898 <vQueueDelete>

  return osOK; 
 800bdac:	2300      	movs	r3, #0
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3708      	adds	r7, #8
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bdb6:	b480      	push	{r7}
 800bdb8:	b083      	sub	sp, #12
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f103 0208 	add.w	r2, r3, #8
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f04f 32ff 	mov.w	r2, #4294967295
 800bdce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f103 0208 	add.w	r2, r3, #8
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f103 0208 	add.w	r2, r3, #8
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bdea:	bf00      	nop
 800bdec:	370c      	adds	r7, #12
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr

0800bdf6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bdf6:	b480      	push	{r7}
 800bdf8:	b083      	sub	sp, #12
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800be04:	bf00      	nop
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be10:	b480      	push	{r7}
 800be12:	b085      	sub	sp, #20
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	689a      	ldr	r2, [r3, #8]
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	683a      	ldr	r2, [r7, #0]
 800be34:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	1c5a      	adds	r2, r3, #1
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	601a      	str	r2, [r3, #0]
}
 800be4c:	bf00      	nop
 800be4e:	3714      	adds	r7, #20
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr

0800be58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be6e:	d103      	bne.n	800be78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	691b      	ldr	r3, [r3, #16]
 800be74:	60fb      	str	r3, [r7, #12]
 800be76:	e00c      	b.n	800be92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	3308      	adds	r3, #8
 800be7c:	60fb      	str	r3, [r7, #12]
 800be7e:	e002      	b.n	800be86 <vListInsert+0x2e>
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	60fb      	str	r3, [r7, #12]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	68ba      	ldr	r2, [r7, #8]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d2f6      	bcs.n	800be80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	685a      	ldr	r2, [r3, #4]
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	683a      	ldr	r2, [r7, #0]
 800bea0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	1c5a      	adds	r2, r3, #1
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	601a      	str	r2, [r3, #0]
}
 800bebe:	bf00      	nop
 800bec0:	3714      	adds	r7, #20
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr

0800beca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800beca:	b480      	push	{r7}
 800becc:	b085      	sub	sp, #20
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	691b      	ldr	r3, [r3, #16]
 800bed6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	6892      	ldr	r2, [r2, #8]
 800bee0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	6852      	ldr	r2, [r2, #4]
 800beea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d103      	bne.n	800befe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	689a      	ldr	r2, [r3, #8]
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	1e5a      	subs	r2, r3, #1
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3714      	adds	r7, #20
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr
	...

0800bf20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d10a      	bne.n	800bf4a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf38:	f383 8811 	msr	BASEPRI, r3
 800bf3c:	f3bf 8f6f 	isb	sy
 800bf40:	f3bf 8f4f 	dsb	sy
 800bf44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bf46:	bf00      	nop
 800bf48:	e7fe      	b.n	800bf48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bf4a:	f001 ff33 	bl	800ddb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf56:	68f9      	ldr	r1, [r7, #12]
 800bf58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bf5a:	fb01 f303 	mul.w	r3, r1, r3
 800bf5e:	441a      	add	r2, r3
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2200      	movs	r2, #0
 800bf68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	68f9      	ldr	r1, [r7, #12]
 800bf7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bf80:	fb01 f303 	mul.w	r3, r1, r3
 800bf84:	441a      	add	r2, r3
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	22ff      	movs	r2, #255	; 0xff
 800bf8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	22ff      	movs	r2, #255	; 0xff
 800bf96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d114      	bne.n	800bfca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	691b      	ldr	r3, [r3, #16]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d01a      	beq.n	800bfde <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	3310      	adds	r3, #16
 800bfac:	4618      	mov	r0, r3
 800bfae:	f001 f9f3 	bl	800d398 <xTaskRemoveFromEventList>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d012      	beq.n	800bfde <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bfb8:	4b0c      	ldr	r3, [pc, #48]	; (800bfec <xQueueGenericReset+0xcc>)
 800bfba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfbe:	601a      	str	r2, [r3, #0]
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	e009      	b.n	800bfde <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	3310      	adds	r3, #16
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7ff fef1 	bl	800bdb6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	3324      	adds	r3, #36	; 0x24
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7ff feec 	bl	800bdb6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bfde:	f001 ff19 	bl	800de14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bfe2:	2301      	movs	r3, #1
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3710      	adds	r7, #16
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	e000ed04 	.word	0xe000ed04

0800bff0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b08e      	sub	sp, #56	; 0x38
 800bff4:	af02      	add	r7, sp, #8
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	607a      	str	r2, [r7, #4]
 800bffc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10a      	bne.n	800c01a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c008:	f383 8811 	msr	BASEPRI, r3
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	f3bf 8f4f 	dsb	sy
 800c014:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c016:	bf00      	nop
 800c018:	e7fe      	b.n	800c018 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10a      	bne.n	800c036 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c032:	bf00      	nop
 800c034:	e7fe      	b.n	800c034 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d002      	beq.n	800c042 <xQueueGenericCreateStatic+0x52>
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d001      	beq.n	800c046 <xQueueGenericCreateStatic+0x56>
 800c042:	2301      	movs	r3, #1
 800c044:	e000      	b.n	800c048 <xQueueGenericCreateStatic+0x58>
 800c046:	2300      	movs	r3, #0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d10a      	bne.n	800c062 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c050:	f383 8811 	msr	BASEPRI, r3
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f3bf 8f4f 	dsb	sy
 800c05c:	623b      	str	r3, [r7, #32]
}
 800c05e:	bf00      	nop
 800c060:	e7fe      	b.n	800c060 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d102      	bne.n	800c06e <xQueueGenericCreateStatic+0x7e>
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d101      	bne.n	800c072 <xQueueGenericCreateStatic+0x82>
 800c06e:	2301      	movs	r3, #1
 800c070:	e000      	b.n	800c074 <xQueueGenericCreateStatic+0x84>
 800c072:	2300      	movs	r3, #0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d10a      	bne.n	800c08e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07c:	f383 8811 	msr	BASEPRI, r3
 800c080:	f3bf 8f6f 	isb	sy
 800c084:	f3bf 8f4f 	dsb	sy
 800c088:	61fb      	str	r3, [r7, #28]
}
 800c08a:	bf00      	nop
 800c08c:	e7fe      	b.n	800c08c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c08e:	2348      	movs	r3, #72	; 0x48
 800c090:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	2b48      	cmp	r3, #72	; 0x48
 800c096:	d00a      	beq.n	800c0ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09c:	f383 8811 	msr	BASEPRI, r3
 800c0a0:	f3bf 8f6f 	isb	sy
 800c0a4:	f3bf 8f4f 	dsb	sy
 800c0a8:	61bb      	str	r3, [r7, #24]
}
 800c0aa:	bf00      	nop
 800c0ac:	e7fe      	b.n	800c0ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c0ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00d      	beq.n	800c0d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0bc:	2201      	movs	r2, #1
 800c0be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c0c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	68b9      	ldr	r1, [r7, #8]
 800c0d0:	68f8      	ldr	r0, [r7, #12]
 800c0d2:	f000 f83f 	bl	800c154 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3730      	adds	r7, #48	; 0x30
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b08a      	sub	sp, #40	; 0x28
 800c0e4:	af02      	add	r7, sp, #8
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10a      	bne.n	800c10a <xQueueGenericCreate+0x2a>
	__asm volatile
 800c0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f8:	f383 8811 	msr	BASEPRI, r3
 800c0fc:	f3bf 8f6f 	isb	sy
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	613b      	str	r3, [r7, #16]
}
 800c106:	bf00      	nop
 800c108:	e7fe      	b.n	800c108 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	68ba      	ldr	r2, [r7, #8]
 800c10e:	fb02 f303 	mul.w	r3, r2, r3
 800c112:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	3348      	adds	r3, #72	; 0x48
 800c118:	4618      	mov	r0, r3
 800c11a:	f001 ff6d 	bl	800dff8 <pvPortMalloc>
 800c11e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d011      	beq.n	800c14a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	3348      	adds	r3, #72	; 0x48
 800c12e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	2200      	movs	r2, #0
 800c134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c138:	79fa      	ldrb	r2, [r7, #7]
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	9300      	str	r3, [sp, #0]
 800c13e:	4613      	mov	r3, r2
 800c140:	697a      	ldr	r2, [r7, #20]
 800c142:	68b9      	ldr	r1, [r7, #8]
 800c144:	68f8      	ldr	r0, [r7, #12]
 800c146:	f000 f805 	bl	800c154 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c14a:	69bb      	ldr	r3, [r7, #24]
	}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3720      	adds	r7, #32
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
 800c160:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d103      	bne.n	800c170 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	69ba      	ldr	r2, [r7, #24]
 800c16c:	601a      	str	r2, [r3, #0]
 800c16e:	e002      	b.n	800c176 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	68ba      	ldr	r2, [r7, #8]
 800c180:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c182:	2101      	movs	r1, #1
 800c184:	69b8      	ldr	r0, [r7, #24]
 800c186:	f7ff fecb 	bl	800bf20 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c18a:	bf00      	nop
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c192:	b580      	push	{r7, lr}
 800c194:	b08a      	sub	sp, #40	; 0x28
 800c196:	af02      	add	r7, sp, #8
 800c198:	60f8      	str	r0, [r7, #12]
 800c19a:	60b9      	str	r1, [r7, #8]
 800c19c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10a      	bne.n	800c1ba <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a8:	f383 8811 	msr	BASEPRI, r3
 800c1ac:	f3bf 8f6f 	isb	sy
 800c1b0:	f3bf 8f4f 	dsb	sy
 800c1b4:	61bb      	str	r3, [r7, #24]
}
 800c1b6:	bf00      	nop
 800c1b8:	e7fe      	b.n	800c1b8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d90a      	bls.n	800c1d8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c6:	f383 8811 	msr	BASEPRI, r3
 800c1ca:	f3bf 8f6f 	isb	sy
 800c1ce:	f3bf 8f4f 	dsb	sy
 800c1d2:	617b      	str	r3, [r7, #20]
}
 800c1d4:	bf00      	nop
 800c1d6:	e7fe      	b.n	800c1d6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c1d8:	2302      	movs	r3, #2
 800c1da:	9300      	str	r3, [sp, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	2100      	movs	r1, #0
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	f7ff ff04 	bl	800bff0 <xQueueGenericCreateStatic>
 800c1e8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c1ea:	69fb      	ldr	r3, [r7, #28]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d002      	beq.n	800c1f6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	68ba      	ldr	r2, [r7, #8]
 800c1f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c1f6:	69fb      	ldr	r3, [r7, #28]
	}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3720      	adds	r7, #32
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c200:	b580      	push	{r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d10a      	bne.n	800c226 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	613b      	str	r3, [r7, #16]
}
 800c222:	bf00      	nop
 800c224:	e7fe      	b.n	800c224 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c226:	683a      	ldr	r2, [r7, #0]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d90a      	bls.n	800c244 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c232:	f383 8811 	msr	BASEPRI, r3
 800c236:	f3bf 8f6f 	isb	sy
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	60fb      	str	r3, [r7, #12]
}
 800c240:	bf00      	nop
 800c242:	e7fe      	b.n	800c242 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c244:	2202      	movs	r2, #2
 800c246:	2100      	movs	r1, #0
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f7ff ff49 	bl	800c0e0 <xQueueGenericCreate>
 800c24e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d002      	beq.n	800c25c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	683a      	ldr	r2, [r7, #0]
 800c25a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c25c:	697b      	ldr	r3, [r7, #20]
	}
 800c25e:	4618      	mov	r0, r3
 800c260:	3718      	adds	r7, #24
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
	...

0800c268 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b08e      	sub	sp, #56	; 0x38
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
 800c274:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c276:	2300      	movs	r3, #0
 800c278:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c280:	2b00      	cmp	r3, #0
 800c282:	d10a      	bne.n	800c29a <xQueueGenericSend+0x32>
	__asm volatile
 800c284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c288:	f383 8811 	msr	BASEPRI, r3
 800c28c:	f3bf 8f6f 	isb	sy
 800c290:	f3bf 8f4f 	dsb	sy
 800c294:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c296:	bf00      	nop
 800c298:	e7fe      	b.n	800c298 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d103      	bne.n	800c2a8 <xQueueGenericSend+0x40>
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d101      	bne.n	800c2ac <xQueueGenericSend+0x44>
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e000      	b.n	800c2ae <xQueueGenericSend+0x46>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d10a      	bne.n	800c2c8 <xQueueGenericSend+0x60>
	__asm volatile
 800c2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b6:	f383 8811 	msr	BASEPRI, r3
 800c2ba:	f3bf 8f6f 	isb	sy
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c2c4:	bf00      	nop
 800c2c6:	e7fe      	b.n	800c2c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	2b02      	cmp	r3, #2
 800c2cc:	d103      	bne.n	800c2d6 <xQueueGenericSend+0x6e>
 800c2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	d101      	bne.n	800c2da <xQueueGenericSend+0x72>
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e000      	b.n	800c2dc <xQueueGenericSend+0x74>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d10a      	bne.n	800c2f6 <xQueueGenericSend+0x8e>
	__asm volatile
 800c2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e4:	f383 8811 	msr	BASEPRI, r3
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	623b      	str	r3, [r7, #32]
}
 800c2f2:	bf00      	nop
 800c2f4:	e7fe      	b.n	800c2f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2f6:	f001 fa0b 	bl	800d710 <xTaskGetSchedulerState>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d102      	bne.n	800c306 <xQueueGenericSend+0x9e>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d101      	bne.n	800c30a <xQueueGenericSend+0xa2>
 800c306:	2301      	movs	r3, #1
 800c308:	e000      	b.n	800c30c <xQueueGenericSend+0xa4>
 800c30a:	2300      	movs	r3, #0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d10a      	bne.n	800c326 <xQueueGenericSend+0xbe>
	__asm volatile
 800c310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c314:	f383 8811 	msr	BASEPRI, r3
 800c318:	f3bf 8f6f 	isb	sy
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	61fb      	str	r3, [r7, #28]
}
 800c322:	bf00      	nop
 800c324:	e7fe      	b.n	800c324 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c326:	f001 fd45 	bl	800ddb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c332:	429a      	cmp	r2, r3
 800c334:	d302      	bcc.n	800c33c <xQueueGenericSend+0xd4>
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d129      	bne.n	800c390 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c33c:	683a      	ldr	r2, [r7, #0]
 800c33e:	68b9      	ldr	r1, [r7, #8]
 800c340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c342:	f000 fae4 	bl	800c90e <prvCopyDataToQueue>
 800c346:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d010      	beq.n	800c372 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c352:	3324      	adds	r3, #36	; 0x24
 800c354:	4618      	mov	r0, r3
 800c356:	f001 f81f 	bl	800d398 <xTaskRemoveFromEventList>
 800c35a:	4603      	mov	r3, r0
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d013      	beq.n	800c388 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c360:	4b3f      	ldr	r3, [pc, #252]	; (800c460 <xQueueGenericSend+0x1f8>)
 800c362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c366:	601a      	str	r2, [r3, #0]
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	f3bf 8f6f 	isb	sy
 800c370:	e00a      	b.n	800c388 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c374:	2b00      	cmp	r3, #0
 800c376:	d007      	beq.n	800c388 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c378:	4b39      	ldr	r3, [pc, #228]	; (800c460 <xQueueGenericSend+0x1f8>)
 800c37a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c37e:	601a      	str	r2, [r3, #0]
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c388:	f001 fd44 	bl	800de14 <vPortExitCritical>
				return pdPASS;
 800c38c:	2301      	movs	r3, #1
 800c38e:	e063      	b.n	800c458 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d103      	bne.n	800c39e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c396:	f001 fd3d 	bl	800de14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c39a:	2300      	movs	r3, #0
 800c39c:	e05c      	b.n	800c458 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d106      	bne.n	800c3b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3a4:	f107 0314 	add.w	r3, r7, #20
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f001 f857 	bl	800d45c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3b2:	f001 fd2f 	bl	800de14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3b6:	f000 fe0d 	bl	800cfd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3ba:	f001 fcfb 	bl	800ddb4 <vPortEnterCritical>
 800c3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3c4:	b25b      	sxtb	r3, r3
 800c3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ca:	d103      	bne.n	800c3d4 <xQueueGenericSend+0x16c>
 800c3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3da:	b25b      	sxtb	r3, r3
 800c3dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3e0:	d103      	bne.n	800c3ea <xQueueGenericSend+0x182>
 800c3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3ea:	f001 fd13 	bl	800de14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3ee:	1d3a      	adds	r2, r7, #4
 800c3f0:	f107 0314 	add.w	r3, r7, #20
 800c3f4:	4611      	mov	r1, r2
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f001 f846 	bl	800d488 <xTaskCheckForTimeOut>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d124      	bne.n	800c44c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c402:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c404:	f000 fb7b 	bl	800cafe <prvIsQueueFull>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d018      	beq.n	800c440 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c410:	3310      	adds	r3, #16
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	4611      	mov	r1, r2
 800c416:	4618      	mov	r0, r3
 800c418:	f000 ff9a 	bl	800d350 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c41c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c41e:	f000 fb06 	bl	800ca2e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c422:	f000 fde5 	bl	800cff0 <xTaskResumeAll>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f47f af7c 	bne.w	800c326 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c42e:	4b0c      	ldr	r3, [pc, #48]	; (800c460 <xQueueGenericSend+0x1f8>)
 800c430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c434:	601a      	str	r2, [r3, #0]
 800c436:	f3bf 8f4f 	dsb	sy
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	e772      	b.n	800c326 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c442:	f000 faf4 	bl	800ca2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c446:	f000 fdd3 	bl	800cff0 <xTaskResumeAll>
 800c44a:	e76c      	b.n	800c326 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c44c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c44e:	f000 faee 	bl	800ca2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c452:	f000 fdcd 	bl	800cff0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c456:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3738      	adds	r7, #56	; 0x38
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	e000ed04 	.word	0xe000ed04

0800c464 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b08e      	sub	sp, #56	; 0x38
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10a      	bne.n	800c48e <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47c:	f383 8811 	msr	BASEPRI, r3
 800c480:	f3bf 8f6f 	isb	sy
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	623b      	str	r3, [r7, #32]
}
 800c48a:	bf00      	nop
 800c48c:	e7fe      	b.n	800c48c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c492:	2b00      	cmp	r3, #0
 800c494:	d00a      	beq.n	800c4ac <xQueueGiveFromISR+0x48>
	__asm volatile
 800c496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c49a:	f383 8811 	msr	BASEPRI, r3
 800c49e:	f3bf 8f6f 	isb	sy
 800c4a2:	f3bf 8f4f 	dsb	sy
 800c4a6:	61fb      	str	r3, [r7, #28]
}
 800c4a8:	bf00      	nop
 800c4aa:	e7fe      	b.n	800c4aa <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d103      	bne.n	800c4bc <xQueueGiveFromISR+0x58>
 800c4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d101      	bne.n	800c4c0 <xQueueGiveFromISR+0x5c>
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e000      	b.n	800c4c2 <xQueueGiveFromISR+0x5e>
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10a      	bne.n	800c4dc <xQueueGiveFromISR+0x78>
	__asm volatile
 800c4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ca:	f383 8811 	msr	BASEPRI, r3
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	61bb      	str	r3, [r7, #24]
}
 800c4d8:	bf00      	nop
 800c4da:	e7fe      	b.n	800c4da <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4dc:	f001 fd4c 	bl	800df78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c4e0:	f3ef 8211 	mrs	r2, BASEPRI
 800c4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e8:	f383 8811 	msr	BASEPRI, r3
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	f3bf 8f4f 	dsb	sy
 800c4f4:	617a      	str	r2, [r7, #20]
 800c4f6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c4f8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c500:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c508:	429a      	cmp	r2, r3
 800c50a:	d22b      	bcs.n	800c564 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c518:	1c5a      	adds	r2, r3, #1
 800c51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c51e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c526:	d112      	bne.n	800c54e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d016      	beq.n	800c55e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c532:	3324      	adds	r3, #36	; 0x24
 800c534:	4618      	mov	r0, r3
 800c536:	f000 ff2f 	bl	800d398 <xTaskRemoveFromEventList>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00e      	beq.n	800c55e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d00b      	beq.n	800c55e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	2201      	movs	r2, #1
 800c54a:	601a      	str	r2, [r3, #0]
 800c54c:	e007      	b.n	800c55e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c54e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c552:	3301      	adds	r3, #1
 800c554:	b2db      	uxtb	r3, r3
 800c556:	b25a      	sxtb	r2, r3
 800c558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c55e:	2301      	movs	r3, #1
 800c560:	637b      	str	r3, [r7, #52]	; 0x34
 800c562:	e001      	b.n	800c568 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c564:	2300      	movs	r3, #0
 800c566:	637b      	str	r3, [r7, #52]	; 0x34
 800c568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c572:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c576:	4618      	mov	r0, r3
 800c578:	3738      	adds	r7, #56	; 0x38
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
	...

0800c580 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b08e      	sub	sp, #56	; 0x38
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c58a:	2300      	movs	r3, #0
 800c58c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c592:	2300      	movs	r3, #0
 800c594:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d10a      	bne.n	800c5b2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a0:	f383 8811 	msr	BASEPRI, r3
 800c5a4:	f3bf 8f6f 	isb	sy
 800c5a8:	f3bf 8f4f 	dsb	sy
 800c5ac:	623b      	str	r3, [r7, #32]
}
 800c5ae:	bf00      	nop
 800c5b0:	e7fe      	b.n	800c5b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d00a      	beq.n	800c5d0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	61fb      	str	r3, [r7, #28]
}
 800c5cc:	bf00      	nop
 800c5ce:	e7fe      	b.n	800c5ce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5d0:	f001 f89e 	bl	800d710 <xTaskGetSchedulerState>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d102      	bne.n	800c5e0 <xQueueSemaphoreTake+0x60>
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d101      	bne.n	800c5e4 <xQueueSemaphoreTake+0x64>
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	e000      	b.n	800c5e6 <xQueueSemaphoreTake+0x66>
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d10a      	bne.n	800c600 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ee:	f383 8811 	msr	BASEPRI, r3
 800c5f2:	f3bf 8f6f 	isb	sy
 800c5f6:	f3bf 8f4f 	dsb	sy
 800c5fa:	61bb      	str	r3, [r7, #24]
}
 800c5fc:	bf00      	nop
 800c5fe:	e7fe      	b.n	800c5fe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c600:	f001 fbd8 	bl	800ddb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c608:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d024      	beq.n	800c65a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c612:	1e5a      	subs	r2, r3, #1
 800c614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c616:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d104      	bne.n	800c62a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c620:	f001 fa1e 	bl	800da60 <pvTaskIncrementMutexHeldCount>
 800c624:	4602      	mov	r2, r0
 800c626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c628:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62c:	691b      	ldr	r3, [r3, #16]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d00f      	beq.n	800c652 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c634:	3310      	adds	r3, #16
 800c636:	4618      	mov	r0, r3
 800c638:	f000 feae 	bl	800d398 <xTaskRemoveFromEventList>
 800c63c:	4603      	mov	r3, r0
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d007      	beq.n	800c652 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c642:	4b54      	ldr	r3, [pc, #336]	; (800c794 <xQueueSemaphoreTake+0x214>)
 800c644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c648:	601a      	str	r2, [r3, #0]
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c652:	f001 fbdf 	bl	800de14 <vPortExitCritical>
				return pdPASS;
 800c656:	2301      	movs	r3, #1
 800c658:	e097      	b.n	800c78a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d111      	bne.n	800c684 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00a      	beq.n	800c67c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66a:	f383 8811 	msr	BASEPRI, r3
 800c66e:	f3bf 8f6f 	isb	sy
 800c672:	f3bf 8f4f 	dsb	sy
 800c676:	617b      	str	r3, [r7, #20]
}
 800c678:	bf00      	nop
 800c67a:	e7fe      	b.n	800c67a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c67c:	f001 fbca 	bl	800de14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c680:	2300      	movs	r3, #0
 800c682:	e082      	b.n	800c78a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c686:	2b00      	cmp	r3, #0
 800c688:	d106      	bne.n	800c698 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c68a:	f107 030c 	add.w	r3, r7, #12
 800c68e:	4618      	mov	r0, r3
 800c690:	f000 fee4 	bl	800d45c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c694:	2301      	movs	r3, #1
 800c696:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c698:	f001 fbbc 	bl	800de14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c69c:	f000 fc9a 	bl	800cfd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6a0:	f001 fb88 	bl	800ddb4 <vPortEnterCritical>
 800c6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6aa:	b25b      	sxtb	r3, r3
 800c6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6b0:	d103      	bne.n	800c6ba <xQueueSemaphoreTake+0x13a>
 800c6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6c0:	b25b      	sxtb	r3, r3
 800c6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6c6:	d103      	bne.n	800c6d0 <xQueueSemaphoreTake+0x150>
 800c6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6d0:	f001 fba0 	bl	800de14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6d4:	463a      	mov	r2, r7
 800c6d6:	f107 030c 	add.w	r3, r7, #12
 800c6da:	4611      	mov	r1, r2
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f000 fed3 	bl	800d488 <xTaskCheckForTimeOut>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d132      	bne.n	800c74e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6ea:	f000 f9f2 	bl	800cad2 <prvIsQueueEmpty>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d026      	beq.n	800c742 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d109      	bne.n	800c710 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c6fc:	f001 fb5a 	bl	800ddb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	4618      	mov	r0, r3
 800c706:	f001 f821 	bl	800d74c <xTaskPriorityInherit>
 800c70a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c70c:	f001 fb82 	bl	800de14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c712:	3324      	adds	r3, #36	; 0x24
 800c714:	683a      	ldr	r2, [r7, #0]
 800c716:	4611      	mov	r1, r2
 800c718:	4618      	mov	r0, r3
 800c71a:	f000 fe19 	bl	800d350 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c71e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c720:	f000 f985 	bl	800ca2e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c724:	f000 fc64 	bl	800cff0 <xTaskResumeAll>
 800c728:	4603      	mov	r3, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f47f af68 	bne.w	800c600 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c730:	4b18      	ldr	r3, [pc, #96]	; (800c794 <xQueueSemaphoreTake+0x214>)
 800c732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c736:	601a      	str	r2, [r3, #0]
 800c738:	f3bf 8f4f 	dsb	sy
 800c73c:	f3bf 8f6f 	isb	sy
 800c740:	e75e      	b.n	800c600 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c744:	f000 f973 	bl	800ca2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c748:	f000 fc52 	bl	800cff0 <xTaskResumeAll>
 800c74c:	e758      	b.n	800c600 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c74e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c750:	f000 f96d 	bl	800ca2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c754:	f000 fc4c 	bl	800cff0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c758:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c75a:	f000 f9ba 	bl	800cad2 <prvIsQueueEmpty>
 800c75e:	4603      	mov	r3, r0
 800c760:	2b00      	cmp	r3, #0
 800c762:	f43f af4d 	beq.w	800c600 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d00d      	beq.n	800c788 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c76c:	f001 fb22 	bl	800ddb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c770:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c772:	f000 f8b4 	bl	800c8de <prvGetDisinheritPriorityAfterTimeout>
 800c776:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77a:	689b      	ldr	r3, [r3, #8]
 800c77c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c77e:	4618      	mov	r0, r3
 800c780:	f001 f8e0 	bl	800d944 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c784:	f001 fb46 	bl	800de14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c788:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3738      	adds	r7, #56	; 0x38
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	bf00      	nop
 800c794:	e000ed04 	.word	0xe000ed04

0800c798 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b08e      	sub	sp, #56	; 0x38
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d10a      	bne.n	800c7c4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b2:	f383 8811 	msr	BASEPRI, r3
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	623b      	str	r3, [r7, #32]
}
 800c7c0:	bf00      	nop
 800c7c2:	e7fe      	b.n	800c7c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d103      	bne.n	800c7d2 <xQueueReceiveFromISR+0x3a>
 800c7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d101      	bne.n	800c7d6 <xQueueReceiveFromISR+0x3e>
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	e000      	b.n	800c7d8 <xQueueReceiveFromISR+0x40>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d10a      	bne.n	800c7f2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e0:	f383 8811 	msr	BASEPRI, r3
 800c7e4:	f3bf 8f6f 	isb	sy
 800c7e8:	f3bf 8f4f 	dsb	sy
 800c7ec:	61fb      	str	r3, [r7, #28]
}
 800c7ee:	bf00      	nop
 800c7f0:	e7fe      	b.n	800c7f0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7f2:	f001 fbc1 	bl	800df78 <vPortValidateInterruptPriority>
	__asm volatile
 800c7f6:	f3ef 8211 	mrs	r2, BASEPRI
 800c7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fe:	f383 8811 	msr	BASEPRI, r3
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	61ba      	str	r2, [r7, #24]
 800c80c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c80e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c810:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c816:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d02f      	beq.n	800c87e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c820:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c828:	68b9      	ldr	r1, [r7, #8]
 800c82a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c82c:	f000 f8d9 	bl	800c9e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c832:	1e5a      	subs	r2, r3, #1
 800c834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c836:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c838:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c840:	d112      	bne.n	800c868 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c844:	691b      	ldr	r3, [r3, #16]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d016      	beq.n	800c878 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84c:	3310      	adds	r3, #16
 800c84e:	4618      	mov	r0, r3
 800c850:	f000 fda2 	bl	800d398 <xTaskRemoveFromEventList>
 800c854:	4603      	mov	r3, r0
 800c856:	2b00      	cmp	r3, #0
 800c858:	d00e      	beq.n	800c878 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00b      	beq.n	800c878 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	601a      	str	r2, [r3, #0]
 800c866:	e007      	b.n	800c878 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c86c:	3301      	adds	r3, #1
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	b25a      	sxtb	r2, r3
 800c872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c878:	2301      	movs	r3, #1
 800c87a:	637b      	str	r3, [r7, #52]	; 0x34
 800c87c:	e001      	b.n	800c882 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c87e:	2300      	movs	r3, #0
 800c880:	637b      	str	r3, [r7, #52]	; 0x34
 800c882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c884:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	f383 8811 	msr	BASEPRI, r3
}
 800c88c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c890:	4618      	mov	r0, r3
 800c892:	3738      	adds	r7, #56	; 0x38
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d10a      	bne.n	800c8c0 <vQueueDelete+0x28>
	__asm volatile
 800c8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ae:	f383 8811 	msr	BASEPRI, r3
 800c8b2:	f3bf 8f6f 	isb	sy
 800c8b6:	f3bf 8f4f 	dsb	sy
 800c8ba:	60bb      	str	r3, [r7, #8]
}
 800c8bc:	bf00      	nop
 800c8be:	e7fe      	b.n	800c8be <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c8c0:	68f8      	ldr	r0, [r7, #12]
 800c8c2:	f000 f935 	bl	800cb30 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d102      	bne.n	800c8d6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f001 fc5d 	bl	800e190 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c8d6:	bf00      	nop
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c8de:	b480      	push	{r7}
 800c8e0:	b085      	sub	sp, #20
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d006      	beq.n	800c8fc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f1c3 0307 	rsb	r3, r3, #7
 800c8f8:	60fb      	str	r3, [r7, #12]
 800c8fa:	e001      	b.n	800c900 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c900:	68fb      	ldr	r3, [r7, #12]
	}
 800c902:	4618      	mov	r0, r3
 800c904:	3714      	adds	r7, #20
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr

0800c90e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c90e:	b580      	push	{r7, lr}
 800c910:	b086      	sub	sp, #24
 800c912:	af00      	add	r7, sp, #0
 800c914:	60f8      	str	r0, [r7, #12]
 800c916:	60b9      	str	r1, [r7, #8]
 800c918:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c91a:	2300      	movs	r3, #0
 800c91c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c922:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d10d      	bne.n	800c948 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d14d      	bne.n	800c9d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	4618      	mov	r0, r3
 800c93a:	f000 ff7d 	bl	800d838 <xTaskPriorityDisinherit>
 800c93e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2200      	movs	r2, #0
 800c944:	609a      	str	r2, [r3, #8]
 800c946:	e043      	b.n	800c9d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d119      	bne.n	800c982 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	6858      	ldr	r0, [r3, #4]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c956:	461a      	mov	r2, r3
 800c958:	68b9      	ldr	r1, [r7, #8]
 800c95a:	f001 fd61 	bl	800e420 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	685a      	ldr	r2, [r3, #4]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c966:	441a      	add	r2, r3
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	685a      	ldr	r2, [r3, #4]
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	429a      	cmp	r2, r3
 800c976:	d32b      	bcc.n	800c9d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	605a      	str	r2, [r3, #4]
 800c980:	e026      	b.n	800c9d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	68d8      	ldr	r0, [r3, #12]
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c98a:	461a      	mov	r2, r3
 800c98c:	68b9      	ldr	r1, [r7, #8]
 800c98e:	f001 fd47 	bl	800e420 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	68da      	ldr	r2, [r3, #12]
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c99a:	425b      	negs	r3, r3
 800c99c:	441a      	add	r2, r3
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	68da      	ldr	r2, [r3, #12]
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d207      	bcs.n	800c9be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	689a      	ldr	r2, [r3, #8]
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b6:	425b      	negs	r3, r3
 800c9b8:	441a      	add	r2, r3
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2b02      	cmp	r3, #2
 800c9c2:	d105      	bne.n	800c9d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d002      	beq.n	800c9d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	1c5a      	adds	r2, r3, #1
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c9d8:	697b      	ldr	r3, [r7, #20]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3718      	adds	r7, #24
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b082      	sub	sp, #8
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d018      	beq.n	800ca26 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	68da      	ldr	r2, [r3, #12]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9fc:	441a      	add	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	68da      	ldr	r2, [r3, #12]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	689b      	ldr	r3, [r3, #8]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d303      	bcc.n	800ca16 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	68d9      	ldr	r1, [r3, #12]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca1e:	461a      	mov	r2, r3
 800ca20:	6838      	ldr	r0, [r7, #0]
 800ca22:	f001 fcfd 	bl	800e420 <memcpy>
	}
}
 800ca26:	bf00      	nop
 800ca28:	3708      	adds	r7, #8
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}

0800ca2e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ca2e:	b580      	push	{r7, lr}
 800ca30:	b084      	sub	sp, #16
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ca36:	f001 f9bd 	bl	800ddb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca40:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca42:	e011      	b.n	800ca68 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d012      	beq.n	800ca72 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	3324      	adds	r3, #36	; 0x24
 800ca50:	4618      	mov	r0, r3
 800ca52:	f000 fca1 	bl	800d398 <xTaskRemoveFromEventList>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d001      	beq.n	800ca60 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ca5c:	f000 fd76 	bl	800d54c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ca60:	7bfb      	ldrb	r3, [r7, #15]
 800ca62:	3b01      	subs	r3, #1
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	dce9      	bgt.n	800ca44 <prvUnlockQueue+0x16>
 800ca70:	e000      	b.n	800ca74 <prvUnlockQueue+0x46>
					break;
 800ca72:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	22ff      	movs	r2, #255	; 0xff
 800ca78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ca7c:	f001 f9ca 	bl	800de14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ca80:	f001 f998 	bl	800ddb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca8a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca8c:	e011      	b.n	800cab2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	691b      	ldr	r3, [r3, #16]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d012      	beq.n	800cabc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	3310      	adds	r3, #16
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f000 fc7c 	bl	800d398 <xTaskRemoveFromEventList>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d001      	beq.n	800caaa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800caa6:	f000 fd51 	bl	800d54c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800caaa:	7bbb      	ldrb	r3, [r7, #14]
 800caac:	3b01      	subs	r3, #1
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cab2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	dce9      	bgt.n	800ca8e <prvUnlockQueue+0x60>
 800caba:	e000      	b.n	800cabe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cabc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	22ff      	movs	r2, #255	; 0xff
 800cac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cac6:	f001 f9a5 	bl	800de14 <vPortExitCritical>
}
 800caca:	bf00      	nop
 800cacc:	3710      	adds	r7, #16
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}

0800cad2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cad2:	b580      	push	{r7, lr}
 800cad4:	b084      	sub	sp, #16
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cada:	f001 f96b 	bl	800ddb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d102      	bne.n	800caec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cae6:	2301      	movs	r3, #1
 800cae8:	60fb      	str	r3, [r7, #12]
 800caea:	e001      	b.n	800caf0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800caec:	2300      	movs	r3, #0
 800caee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800caf0:	f001 f990 	bl	800de14 <vPortExitCritical>

	return xReturn;
 800caf4:	68fb      	ldr	r3, [r7, #12]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cafe:	b580      	push	{r7, lr}
 800cb00:	b084      	sub	sp, #16
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb06:	f001 f955 	bl	800ddb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d102      	bne.n	800cb1c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cb16:	2301      	movs	r3, #1
 800cb18:	60fb      	str	r3, [r7, #12]
 800cb1a:	e001      	b.n	800cb20 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb20:	f001 f978 	bl	800de14 <vPortExitCritical>

	return xReturn;
 800cb24:	68fb      	ldr	r3, [r7, #12]
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
	...

0800cb30 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb38:	2300      	movs	r3, #0
 800cb3a:	60fb      	str	r3, [r7, #12]
 800cb3c:	e016      	b.n	800cb6c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cb3e:	4a10      	ldr	r2, [pc, #64]	; (800cb80 <vQueueUnregisterQueue+0x50>)
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	00db      	lsls	r3, r3, #3
 800cb44:	4413      	add	r3, r2
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d10b      	bne.n	800cb66 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cb4e:	4a0c      	ldr	r2, [pc, #48]	; (800cb80 <vQueueUnregisterQueue+0x50>)
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2100      	movs	r1, #0
 800cb54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cb58:	4a09      	ldr	r2, [pc, #36]	; (800cb80 <vQueueUnregisterQueue+0x50>)
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	00db      	lsls	r3, r3, #3
 800cb5e:	4413      	add	r3, r2
 800cb60:	2200      	movs	r2, #0
 800cb62:	605a      	str	r2, [r3, #4]
				break;
 800cb64:	e006      	b.n	800cb74 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	60fb      	str	r3, [r7, #12]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2b07      	cmp	r3, #7
 800cb70:	d9e5      	bls.n	800cb3e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cb72:	bf00      	nop
 800cb74:	bf00      	nop
 800cb76:	3714      	adds	r7, #20
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr
 800cb80:	20008af4 	.word	0x20008af4

0800cb84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b08e      	sub	sp, #56	; 0x38
 800cb88:	af04      	add	r7, sp, #16
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	607a      	str	r2, [r7, #4]
 800cb90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cb92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10a      	bne.n	800cbae <xTaskCreateStatic+0x2a>
	__asm volatile
 800cb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9c:	f383 8811 	msr	BASEPRI, r3
 800cba0:	f3bf 8f6f 	isb	sy
 800cba4:	f3bf 8f4f 	dsb	sy
 800cba8:	623b      	str	r3, [r7, #32]
}
 800cbaa:	bf00      	nop
 800cbac:	e7fe      	b.n	800cbac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d10a      	bne.n	800cbca <xTaskCreateStatic+0x46>
	__asm volatile
 800cbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	61fb      	str	r3, [r7, #28]
}
 800cbc6:	bf00      	nop
 800cbc8:	e7fe      	b.n	800cbc8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cbca:	2354      	movs	r3, #84	; 0x54
 800cbcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	2b54      	cmp	r3, #84	; 0x54
 800cbd2:	d00a      	beq.n	800cbea <xTaskCreateStatic+0x66>
	__asm volatile
 800cbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd8:	f383 8811 	msr	BASEPRI, r3
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	61bb      	str	r3, [r7, #24]
}
 800cbe6:	bf00      	nop
 800cbe8:	e7fe      	b.n	800cbe8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cbea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d01e      	beq.n	800cc30 <xTaskCreateStatic+0xac>
 800cbf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d01b      	beq.n	800cc30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc04:	2202      	movs	r2, #2
 800cc06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	9303      	str	r3, [sp, #12]
 800cc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc10:	9302      	str	r3, [sp, #8]
 800cc12:	f107 0314 	add.w	r3, r7, #20
 800cc16:	9301      	str	r3, [sp, #4]
 800cc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1a:	9300      	str	r3, [sp, #0]
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	68b9      	ldr	r1, [r7, #8]
 800cc22:	68f8      	ldr	r0, [r7, #12]
 800cc24:	f000 f850 	bl	800ccc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc2a:	f000 f8d5 	bl	800cdd8 <prvAddNewTaskToReadyList>
 800cc2e:	e001      	b.n	800cc34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cc30:	2300      	movs	r3, #0
 800cc32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc34:	697b      	ldr	r3, [r7, #20]
	}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3728      	adds	r7, #40	; 0x28
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b08c      	sub	sp, #48	; 0x30
 800cc42:	af04      	add	r7, sp, #16
 800cc44:	60f8      	str	r0, [r7, #12]
 800cc46:	60b9      	str	r1, [r7, #8]
 800cc48:	603b      	str	r3, [r7, #0]
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc4e:	88fb      	ldrh	r3, [r7, #6]
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	4618      	mov	r0, r3
 800cc54:	f001 f9d0 	bl	800dff8 <pvPortMalloc>
 800cc58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00e      	beq.n	800cc7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc60:	2054      	movs	r0, #84	; 0x54
 800cc62:	f001 f9c9 	bl	800dff8 <pvPortMalloc>
 800cc66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d003      	beq.n	800cc76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	697a      	ldr	r2, [r7, #20]
 800cc72:	631a      	str	r2, [r3, #48]	; 0x30
 800cc74:	e005      	b.n	800cc82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc76:	6978      	ldr	r0, [r7, #20]
 800cc78:	f001 fa8a 	bl	800e190 <vPortFree>
 800cc7c:	e001      	b.n	800cc82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc82:	69fb      	ldr	r3, [r7, #28]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d017      	beq.n	800ccb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc90:	88fa      	ldrh	r2, [r7, #6]
 800cc92:	2300      	movs	r3, #0
 800cc94:	9303      	str	r3, [sp, #12]
 800cc96:	69fb      	ldr	r3, [r7, #28]
 800cc98:	9302      	str	r3, [sp, #8]
 800cc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9c:	9301      	str	r3, [sp, #4]
 800cc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca0:	9300      	str	r3, [sp, #0]
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	68b9      	ldr	r1, [r7, #8]
 800cca6:	68f8      	ldr	r0, [r7, #12]
 800cca8:	f000 f80e 	bl	800ccc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ccac:	69f8      	ldr	r0, [r7, #28]
 800ccae:	f000 f893 	bl	800cdd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	61bb      	str	r3, [r7, #24]
 800ccb6:	e002      	b.n	800ccbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ccb8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ccbe:	69bb      	ldr	r3, [r7, #24]
	}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3720      	adds	r7, #32
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b088      	sub	sp, #32
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
 800ccd4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cce0:	3b01      	subs	r3, #1
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	4413      	add	r3, r2
 800cce6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	f023 0307 	bic.w	r3, r3, #7
 800ccee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ccf0:	69bb      	ldr	r3, [r7, #24]
 800ccf2:	f003 0307 	and.w	r3, r3, #7
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00a      	beq.n	800cd10 <prvInitialiseNewTask+0x48>
	__asm volatile
 800ccfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfe:	f383 8811 	msr	BASEPRI, r3
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	617b      	str	r3, [r7, #20]
}
 800cd0c:	bf00      	nop
 800cd0e:	e7fe      	b.n	800cd0e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d01f      	beq.n	800cd56 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd16:	2300      	movs	r3, #0
 800cd18:	61fb      	str	r3, [r7, #28]
 800cd1a:	e012      	b.n	800cd42 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd1c:	68ba      	ldr	r2, [r7, #8]
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	4413      	add	r3, r2
 800cd22:	7819      	ldrb	r1, [r3, #0]
 800cd24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd26:	69fb      	ldr	r3, [r7, #28]
 800cd28:	4413      	add	r3, r2
 800cd2a:	3334      	adds	r3, #52	; 0x34
 800cd2c:	460a      	mov	r2, r1
 800cd2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd30:	68ba      	ldr	r2, [r7, #8]
 800cd32:	69fb      	ldr	r3, [r7, #28]
 800cd34:	4413      	add	r3, r2
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d006      	beq.n	800cd4a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd3c:	69fb      	ldr	r3, [r7, #28]
 800cd3e:	3301      	adds	r3, #1
 800cd40:	61fb      	str	r3, [r7, #28]
 800cd42:	69fb      	ldr	r3, [r7, #28]
 800cd44:	2b0f      	cmp	r3, #15
 800cd46:	d9e9      	bls.n	800cd1c <prvInitialiseNewTask+0x54>
 800cd48:	e000      	b.n	800cd4c <prvInitialiseNewTask+0x84>
			{
				break;
 800cd4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd54:	e003      	b.n	800cd5e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd60:	2b06      	cmp	r3, #6
 800cd62:	d901      	bls.n	800cd68 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd64:	2306      	movs	r3, #6
 800cd66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd72:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd76:	2200      	movs	r2, #0
 800cd78:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7c:	3304      	adds	r3, #4
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7ff f839 	bl	800bdf6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd86:	3318      	adds	r3, #24
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7ff f834 	bl	800bdf6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd96:	f1c3 0207 	rsb	r2, r3, #7
 800cd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cda2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda6:	2200      	movs	r2, #0
 800cda8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdac:	2200      	movs	r2, #0
 800cdae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cdb2:	683a      	ldr	r2, [r7, #0]
 800cdb4:	68f9      	ldr	r1, [r7, #12]
 800cdb6:	69b8      	ldr	r0, [r7, #24]
 800cdb8:	f000 fecc 	bl	800db54 <pxPortInitialiseStack>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d002      	beq.n	800cdce <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdce:	bf00      	nop
 800cdd0:	3720      	adds	r7, #32
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
	...

0800cdd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cde0:	f000 ffe8 	bl	800ddb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cde4:	4b2a      	ldr	r3, [pc, #168]	; (800ce90 <prvAddNewTaskToReadyList+0xb8>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	3301      	adds	r3, #1
 800cdea:	4a29      	ldr	r2, [pc, #164]	; (800ce90 <prvAddNewTaskToReadyList+0xb8>)
 800cdec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cdee:	4b29      	ldr	r3, [pc, #164]	; (800ce94 <prvAddNewTaskToReadyList+0xbc>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d109      	bne.n	800ce0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cdf6:	4a27      	ldr	r2, [pc, #156]	; (800ce94 <prvAddNewTaskToReadyList+0xbc>)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cdfc:	4b24      	ldr	r3, [pc, #144]	; (800ce90 <prvAddNewTaskToReadyList+0xb8>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	d110      	bne.n	800ce26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ce04:	f000 fbc6 	bl	800d594 <prvInitialiseTaskLists>
 800ce08:	e00d      	b.n	800ce26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ce0a:	4b23      	ldr	r3, [pc, #140]	; (800ce98 <prvAddNewTaskToReadyList+0xc0>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d109      	bne.n	800ce26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce12:	4b20      	ldr	r3, [pc, #128]	; (800ce94 <prvAddNewTaskToReadyList+0xbc>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d802      	bhi.n	800ce26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ce20:	4a1c      	ldr	r2, [pc, #112]	; (800ce94 <prvAddNewTaskToReadyList+0xbc>)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ce26:	4b1d      	ldr	r3, [pc, #116]	; (800ce9c <prvAddNewTaskToReadyList+0xc4>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	4a1b      	ldr	r2, [pc, #108]	; (800ce9c <prvAddNewTaskToReadyList+0xc4>)
 800ce2e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce34:	2201      	movs	r2, #1
 800ce36:	409a      	lsls	r2, r3
 800ce38:	4b19      	ldr	r3, [pc, #100]	; (800cea0 <prvAddNewTaskToReadyList+0xc8>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	4a18      	ldr	r2, [pc, #96]	; (800cea0 <prvAddNewTaskToReadyList+0xc8>)
 800ce40:	6013      	str	r3, [r2, #0]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce46:	4613      	mov	r3, r2
 800ce48:	009b      	lsls	r3, r3, #2
 800ce4a:	4413      	add	r3, r2
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	4a15      	ldr	r2, [pc, #84]	; (800cea4 <prvAddNewTaskToReadyList+0xcc>)
 800ce50:	441a      	add	r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	3304      	adds	r3, #4
 800ce56:	4619      	mov	r1, r3
 800ce58:	4610      	mov	r0, r2
 800ce5a:	f7fe ffd9 	bl	800be10 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce5e:	f000 ffd9 	bl	800de14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce62:	4b0d      	ldr	r3, [pc, #52]	; (800ce98 <prvAddNewTaskToReadyList+0xc0>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00e      	beq.n	800ce88 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce6a:	4b0a      	ldr	r3, [pc, #40]	; (800ce94 <prvAddNewTaskToReadyList+0xbc>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d207      	bcs.n	800ce88 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce78:	4b0b      	ldr	r3, [pc, #44]	; (800cea8 <prvAddNewTaskToReadyList+0xd0>)
 800ce7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce7e:	601a      	str	r2, [r3, #0]
 800ce80:	f3bf 8f4f 	dsb	sy
 800ce84:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce88:	bf00      	nop
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}
 800ce90:	200009c4 	.word	0x200009c4
 800ce94:	200008c4 	.word	0x200008c4
 800ce98:	200009d0 	.word	0x200009d0
 800ce9c:	200009e0 	.word	0x200009e0
 800cea0:	200009cc 	.word	0x200009cc
 800cea4:	200008c8 	.word	0x200008c8
 800cea8:	e000ed04 	.word	0xe000ed04

0800ceac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d017      	beq.n	800ceee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cebe:	4b13      	ldr	r3, [pc, #76]	; (800cf0c <vTaskDelay+0x60>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00a      	beq.n	800cedc <vTaskDelay+0x30>
	__asm volatile
 800cec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceca:	f383 8811 	msr	BASEPRI, r3
 800cece:	f3bf 8f6f 	isb	sy
 800ced2:	f3bf 8f4f 	dsb	sy
 800ced6:	60bb      	str	r3, [r7, #8]
}
 800ced8:	bf00      	nop
 800ceda:	e7fe      	b.n	800ceda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cedc:	f000 f87a 	bl	800cfd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cee0:	2100      	movs	r1, #0
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 fdd0 	bl	800da88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cee8:	f000 f882 	bl	800cff0 <xTaskResumeAll>
 800ceec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d107      	bne.n	800cf04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cef4:	4b06      	ldr	r3, [pc, #24]	; (800cf10 <vTaskDelay+0x64>)
 800cef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cefa:	601a      	str	r2, [r3, #0]
 800cefc:	f3bf 8f4f 	dsb	sy
 800cf00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf04:	bf00      	nop
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	200009ec 	.word	0x200009ec
 800cf10:	e000ed04 	.word	0xe000ed04

0800cf14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b08a      	sub	sp, #40	; 0x28
 800cf18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cf22:	463a      	mov	r2, r7
 800cf24:	1d39      	adds	r1, r7, #4
 800cf26:	f107 0308 	add.w	r3, r7, #8
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7f5 f92e 	bl	800218c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cf30:	6839      	ldr	r1, [r7, #0]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	68ba      	ldr	r2, [r7, #8]
 800cf36:	9202      	str	r2, [sp, #8]
 800cf38:	9301      	str	r3, [sp, #4]
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	9300      	str	r3, [sp, #0]
 800cf3e:	2300      	movs	r3, #0
 800cf40:	460a      	mov	r2, r1
 800cf42:	491e      	ldr	r1, [pc, #120]	; (800cfbc <vTaskStartScheduler+0xa8>)
 800cf44:	481e      	ldr	r0, [pc, #120]	; (800cfc0 <vTaskStartScheduler+0xac>)
 800cf46:	f7ff fe1d 	bl	800cb84 <xTaskCreateStatic>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	4a1d      	ldr	r2, [pc, #116]	; (800cfc4 <vTaskStartScheduler+0xb0>)
 800cf4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf50:	4b1c      	ldr	r3, [pc, #112]	; (800cfc4 <vTaskStartScheduler+0xb0>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d002      	beq.n	800cf5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	617b      	str	r3, [r7, #20]
 800cf5c:	e001      	b.n	800cf62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d116      	bne.n	800cf96 <vTaskStartScheduler+0x82>
	__asm volatile
 800cf68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf6c:	f383 8811 	msr	BASEPRI, r3
 800cf70:	f3bf 8f6f 	isb	sy
 800cf74:	f3bf 8f4f 	dsb	sy
 800cf78:	613b      	str	r3, [r7, #16]
}
 800cf7a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cf7c:	4b12      	ldr	r3, [pc, #72]	; (800cfc8 <vTaskStartScheduler+0xb4>)
 800cf7e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cf84:	4b11      	ldr	r3, [pc, #68]	; (800cfcc <vTaskStartScheduler+0xb8>)
 800cf86:	2201      	movs	r2, #1
 800cf88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cf8a:	4b11      	ldr	r3, [pc, #68]	; (800cfd0 <vTaskStartScheduler+0xbc>)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cf90:	f000 fe6e 	bl	800dc70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cf94:	e00e      	b.n	800cfb4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf9c:	d10a      	bne.n	800cfb4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800cf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa2:	f383 8811 	msr	BASEPRI, r3
 800cfa6:	f3bf 8f6f 	isb	sy
 800cfaa:	f3bf 8f4f 	dsb	sy
 800cfae:	60fb      	str	r3, [r7, #12]
}
 800cfb0:	bf00      	nop
 800cfb2:	e7fe      	b.n	800cfb2 <vTaskStartScheduler+0x9e>
}
 800cfb4:	bf00      	nop
 800cfb6:	3718      	adds	r7, #24
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	080116f0 	.word	0x080116f0
 800cfc0:	0800d565 	.word	0x0800d565
 800cfc4:	200009e8 	.word	0x200009e8
 800cfc8:	200009e4 	.word	0x200009e4
 800cfcc:	200009d0 	.word	0x200009d0
 800cfd0:	200009c8 	.word	0x200009c8

0800cfd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cfd8:	4b04      	ldr	r3, [pc, #16]	; (800cfec <vTaskSuspendAll+0x18>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	3301      	adds	r3, #1
 800cfde:	4a03      	ldr	r2, [pc, #12]	; (800cfec <vTaskSuspendAll+0x18>)
 800cfe0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cfe2:	bf00      	nop
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr
 800cfec:	200009ec 	.word	0x200009ec

0800cff0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cff6:	2300      	movs	r3, #0
 800cff8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cffa:	2300      	movs	r3, #0
 800cffc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cffe:	4b41      	ldr	r3, [pc, #260]	; (800d104 <xTaskResumeAll+0x114>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d10a      	bne.n	800d01c <xTaskResumeAll+0x2c>
	__asm volatile
 800d006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d00a:	f383 8811 	msr	BASEPRI, r3
 800d00e:	f3bf 8f6f 	isb	sy
 800d012:	f3bf 8f4f 	dsb	sy
 800d016:	603b      	str	r3, [r7, #0]
}
 800d018:	bf00      	nop
 800d01a:	e7fe      	b.n	800d01a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d01c:	f000 feca 	bl	800ddb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d020:	4b38      	ldr	r3, [pc, #224]	; (800d104 <xTaskResumeAll+0x114>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	3b01      	subs	r3, #1
 800d026:	4a37      	ldr	r2, [pc, #220]	; (800d104 <xTaskResumeAll+0x114>)
 800d028:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d02a:	4b36      	ldr	r3, [pc, #216]	; (800d104 <xTaskResumeAll+0x114>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d161      	bne.n	800d0f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d032:	4b35      	ldr	r3, [pc, #212]	; (800d108 <xTaskResumeAll+0x118>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d05d      	beq.n	800d0f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d03a:	e02e      	b.n	800d09a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d03c:	4b33      	ldr	r3, [pc, #204]	; (800d10c <xTaskResumeAll+0x11c>)
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	68db      	ldr	r3, [r3, #12]
 800d042:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	3318      	adds	r3, #24
 800d048:	4618      	mov	r0, r3
 800d04a:	f7fe ff3e 	bl	800beca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	3304      	adds	r3, #4
 800d052:	4618      	mov	r0, r3
 800d054:	f7fe ff39 	bl	800beca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d05c:	2201      	movs	r2, #1
 800d05e:	409a      	lsls	r2, r3
 800d060:	4b2b      	ldr	r3, [pc, #172]	; (800d110 <xTaskResumeAll+0x120>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4313      	orrs	r3, r2
 800d066:	4a2a      	ldr	r2, [pc, #168]	; (800d110 <xTaskResumeAll+0x120>)
 800d068:	6013      	str	r3, [r2, #0]
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d06e:	4613      	mov	r3, r2
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	4413      	add	r3, r2
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	4a27      	ldr	r2, [pc, #156]	; (800d114 <xTaskResumeAll+0x124>)
 800d078:	441a      	add	r2, r3
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	3304      	adds	r3, #4
 800d07e:	4619      	mov	r1, r3
 800d080:	4610      	mov	r0, r2
 800d082:	f7fe fec5 	bl	800be10 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d08a:	4b23      	ldr	r3, [pc, #140]	; (800d118 <xTaskResumeAll+0x128>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d090:	429a      	cmp	r2, r3
 800d092:	d302      	bcc.n	800d09a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d094:	4b21      	ldr	r3, [pc, #132]	; (800d11c <xTaskResumeAll+0x12c>)
 800d096:	2201      	movs	r2, #1
 800d098:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d09a:	4b1c      	ldr	r3, [pc, #112]	; (800d10c <xTaskResumeAll+0x11c>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d1cc      	bne.n	800d03c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d001      	beq.n	800d0ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d0a8:	f000 fb12 	bl	800d6d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d0ac:	4b1c      	ldr	r3, [pc, #112]	; (800d120 <xTaskResumeAll+0x130>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d010      	beq.n	800d0da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d0b8:	f000 f836 	bl	800d128 <xTaskIncrementTick>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d002      	beq.n	800d0c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d0c2:	4b16      	ldr	r3, [pc, #88]	; (800d11c <xTaskResumeAll+0x12c>)
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	3b01      	subs	r3, #1
 800d0cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d1f1      	bne.n	800d0b8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d0d4:	4b12      	ldr	r3, [pc, #72]	; (800d120 <xTaskResumeAll+0x130>)
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d0da:	4b10      	ldr	r3, [pc, #64]	; (800d11c <xTaskResumeAll+0x12c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d009      	beq.n	800d0f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d0e6:	4b0f      	ldr	r3, [pc, #60]	; (800d124 <xTaskResumeAll+0x134>)
 800d0e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0ec:	601a      	str	r2, [r3, #0]
 800d0ee:	f3bf 8f4f 	dsb	sy
 800d0f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0f6:	f000 fe8d 	bl	800de14 <vPortExitCritical>

	return xAlreadyYielded;
 800d0fa:	68bb      	ldr	r3, [r7, #8]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3710      	adds	r7, #16
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	200009ec 	.word	0x200009ec
 800d108:	200009c4 	.word	0x200009c4
 800d10c:	20000984 	.word	0x20000984
 800d110:	200009cc 	.word	0x200009cc
 800d114:	200008c8 	.word	0x200008c8
 800d118:	200008c4 	.word	0x200008c4
 800d11c:	200009d8 	.word	0x200009d8
 800d120:	200009d4 	.word	0x200009d4
 800d124:	e000ed04 	.word	0xe000ed04

0800d128 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b086      	sub	sp, #24
 800d12c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d12e:	2300      	movs	r3, #0
 800d130:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d132:	4b4e      	ldr	r3, [pc, #312]	; (800d26c <xTaskIncrementTick+0x144>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	f040 808e 	bne.w	800d258 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d13c:	4b4c      	ldr	r3, [pc, #304]	; (800d270 <xTaskIncrementTick+0x148>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	3301      	adds	r3, #1
 800d142:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d144:	4a4a      	ldr	r2, [pc, #296]	; (800d270 <xTaskIncrementTick+0x148>)
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d120      	bne.n	800d192 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d150:	4b48      	ldr	r3, [pc, #288]	; (800d274 <xTaskIncrementTick+0x14c>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d00a      	beq.n	800d170 <xTaskIncrementTick+0x48>
	__asm volatile
 800d15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d15e:	f383 8811 	msr	BASEPRI, r3
 800d162:	f3bf 8f6f 	isb	sy
 800d166:	f3bf 8f4f 	dsb	sy
 800d16a:	603b      	str	r3, [r7, #0]
}
 800d16c:	bf00      	nop
 800d16e:	e7fe      	b.n	800d16e <xTaskIncrementTick+0x46>
 800d170:	4b40      	ldr	r3, [pc, #256]	; (800d274 <xTaskIncrementTick+0x14c>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	60fb      	str	r3, [r7, #12]
 800d176:	4b40      	ldr	r3, [pc, #256]	; (800d278 <xTaskIncrementTick+0x150>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4a3e      	ldr	r2, [pc, #248]	; (800d274 <xTaskIncrementTick+0x14c>)
 800d17c:	6013      	str	r3, [r2, #0]
 800d17e:	4a3e      	ldr	r2, [pc, #248]	; (800d278 <xTaskIncrementTick+0x150>)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	6013      	str	r3, [r2, #0]
 800d184:	4b3d      	ldr	r3, [pc, #244]	; (800d27c <xTaskIncrementTick+0x154>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	3301      	adds	r3, #1
 800d18a:	4a3c      	ldr	r2, [pc, #240]	; (800d27c <xTaskIncrementTick+0x154>)
 800d18c:	6013      	str	r3, [r2, #0]
 800d18e:	f000 fa9f 	bl	800d6d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d192:	4b3b      	ldr	r3, [pc, #236]	; (800d280 <xTaskIncrementTick+0x158>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	693a      	ldr	r2, [r7, #16]
 800d198:	429a      	cmp	r2, r3
 800d19a:	d348      	bcc.n	800d22e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d19c:	4b35      	ldr	r3, [pc, #212]	; (800d274 <xTaskIncrementTick+0x14c>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d104      	bne.n	800d1b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1a6:	4b36      	ldr	r3, [pc, #216]	; (800d280 <xTaskIncrementTick+0x158>)
 800d1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ac:	601a      	str	r2, [r3, #0]
					break;
 800d1ae:	e03e      	b.n	800d22e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1b0:	4b30      	ldr	r3, [pc, #192]	; (800d274 <xTaskIncrementTick+0x14c>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	68db      	ldr	r3, [r3, #12]
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	685b      	ldr	r3, [r3, #4]
 800d1be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d1c0:	693a      	ldr	r2, [r7, #16]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d203      	bcs.n	800d1d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d1c8:	4a2d      	ldr	r2, [pc, #180]	; (800d280 <xTaskIncrementTick+0x158>)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d1ce:	e02e      	b.n	800d22e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	3304      	adds	r3, #4
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7fe fe78 	bl	800beca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d004      	beq.n	800d1ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	3318      	adds	r3, #24
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7fe fe6f 	bl	800beca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	409a      	lsls	r2, r3
 800d1f4:	4b23      	ldr	r3, [pc, #140]	; (800d284 <xTaskIncrementTick+0x15c>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	4a22      	ldr	r2, [pc, #136]	; (800d284 <xTaskIncrementTick+0x15c>)
 800d1fc:	6013      	str	r3, [r2, #0]
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d202:	4613      	mov	r3, r2
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	4413      	add	r3, r2
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	4a1f      	ldr	r2, [pc, #124]	; (800d288 <xTaskIncrementTick+0x160>)
 800d20c:	441a      	add	r2, r3
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	3304      	adds	r3, #4
 800d212:	4619      	mov	r1, r3
 800d214:	4610      	mov	r0, r2
 800d216:	f7fe fdfb 	bl	800be10 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d21e:	4b1b      	ldr	r3, [pc, #108]	; (800d28c <xTaskIncrementTick+0x164>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d224:	429a      	cmp	r2, r3
 800d226:	d3b9      	bcc.n	800d19c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d228:	2301      	movs	r3, #1
 800d22a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d22c:	e7b6      	b.n	800d19c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d22e:	4b17      	ldr	r3, [pc, #92]	; (800d28c <xTaskIncrementTick+0x164>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d234:	4914      	ldr	r1, [pc, #80]	; (800d288 <xTaskIncrementTick+0x160>)
 800d236:	4613      	mov	r3, r2
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	4413      	add	r3, r2
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	440b      	add	r3, r1
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2b01      	cmp	r3, #1
 800d244:	d901      	bls.n	800d24a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d246:	2301      	movs	r3, #1
 800d248:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d24a:	4b11      	ldr	r3, [pc, #68]	; (800d290 <xTaskIncrementTick+0x168>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d007      	beq.n	800d262 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d252:	2301      	movs	r3, #1
 800d254:	617b      	str	r3, [r7, #20]
 800d256:	e004      	b.n	800d262 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d258:	4b0e      	ldr	r3, [pc, #56]	; (800d294 <xTaskIncrementTick+0x16c>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	3301      	adds	r3, #1
 800d25e:	4a0d      	ldr	r2, [pc, #52]	; (800d294 <xTaskIncrementTick+0x16c>)
 800d260:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d262:	697b      	ldr	r3, [r7, #20]
}
 800d264:	4618      	mov	r0, r3
 800d266:	3718      	adds	r7, #24
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	200009ec 	.word	0x200009ec
 800d270:	200009c8 	.word	0x200009c8
 800d274:	2000097c 	.word	0x2000097c
 800d278:	20000980 	.word	0x20000980
 800d27c:	200009dc 	.word	0x200009dc
 800d280:	200009e4 	.word	0x200009e4
 800d284:	200009cc 	.word	0x200009cc
 800d288:	200008c8 	.word	0x200008c8
 800d28c:	200008c4 	.word	0x200008c4
 800d290:	200009d8 	.word	0x200009d8
 800d294:	200009d4 	.word	0x200009d4

0800d298 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d298:	b480      	push	{r7}
 800d29a:	b087      	sub	sp, #28
 800d29c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d29e:	4b27      	ldr	r3, [pc, #156]	; (800d33c <vTaskSwitchContext+0xa4>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d003      	beq.n	800d2ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d2a6:	4b26      	ldr	r3, [pc, #152]	; (800d340 <vTaskSwitchContext+0xa8>)
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d2ac:	e03f      	b.n	800d32e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d2ae:	4b24      	ldr	r3, [pc, #144]	; (800d340 <vTaskSwitchContext+0xa8>)
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2b4:	4b23      	ldr	r3, [pc, #140]	; (800d344 <vTaskSwitchContext+0xac>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	fab3 f383 	clz	r3, r3
 800d2c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d2c2:	7afb      	ldrb	r3, [r7, #11]
 800d2c4:	f1c3 031f 	rsb	r3, r3, #31
 800d2c8:	617b      	str	r3, [r7, #20]
 800d2ca:	491f      	ldr	r1, [pc, #124]	; (800d348 <vTaskSwitchContext+0xb0>)
 800d2cc:	697a      	ldr	r2, [r7, #20]
 800d2ce:	4613      	mov	r3, r2
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	4413      	add	r3, r2
 800d2d4:	009b      	lsls	r3, r3, #2
 800d2d6:	440b      	add	r3, r1
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d10a      	bne.n	800d2f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e2:	f383 8811 	msr	BASEPRI, r3
 800d2e6:	f3bf 8f6f 	isb	sy
 800d2ea:	f3bf 8f4f 	dsb	sy
 800d2ee:	607b      	str	r3, [r7, #4]
}
 800d2f0:	bf00      	nop
 800d2f2:	e7fe      	b.n	800d2f2 <vTaskSwitchContext+0x5a>
 800d2f4:	697a      	ldr	r2, [r7, #20]
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	009b      	lsls	r3, r3, #2
 800d2fa:	4413      	add	r3, r2
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	4a12      	ldr	r2, [pc, #72]	; (800d348 <vTaskSwitchContext+0xb0>)
 800d300:	4413      	add	r3, r2
 800d302:	613b      	str	r3, [r7, #16]
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	685a      	ldr	r2, [r3, #4]
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	605a      	str	r2, [r3, #4]
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	685a      	ldr	r2, [r3, #4]
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	3308      	adds	r3, #8
 800d316:	429a      	cmp	r2, r3
 800d318:	d104      	bne.n	800d324 <vTaskSwitchContext+0x8c>
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	685a      	ldr	r2, [r3, #4]
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	605a      	str	r2, [r3, #4]
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	68db      	ldr	r3, [r3, #12]
 800d32a:	4a08      	ldr	r2, [pc, #32]	; (800d34c <vTaskSwitchContext+0xb4>)
 800d32c:	6013      	str	r3, [r2, #0]
}
 800d32e:	bf00      	nop
 800d330:	371c      	adds	r7, #28
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	200009ec 	.word	0x200009ec
 800d340:	200009d8 	.word	0x200009d8
 800d344:	200009cc 	.word	0x200009cc
 800d348:	200008c8 	.word	0x200008c8
 800d34c:	200008c4 	.word	0x200008c4

0800d350 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d10a      	bne.n	800d376 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	60fb      	str	r3, [r7, #12]
}
 800d372:	bf00      	nop
 800d374:	e7fe      	b.n	800d374 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d376:	4b07      	ldr	r3, [pc, #28]	; (800d394 <vTaskPlaceOnEventList+0x44>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	3318      	adds	r3, #24
 800d37c:	4619      	mov	r1, r3
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f7fe fd6a 	bl	800be58 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d384:	2101      	movs	r1, #1
 800d386:	6838      	ldr	r0, [r7, #0]
 800d388:	f000 fb7e 	bl	800da88 <prvAddCurrentTaskToDelayedList>
}
 800d38c:	bf00      	nop
 800d38e:	3710      	adds	r7, #16
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	200008c4 	.word	0x200008c4

0800d398 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b086      	sub	sp, #24
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d10a      	bne.n	800d3c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b2:	f383 8811 	msr	BASEPRI, r3
 800d3b6:	f3bf 8f6f 	isb	sy
 800d3ba:	f3bf 8f4f 	dsb	sy
 800d3be:	60fb      	str	r3, [r7, #12]
}
 800d3c0:	bf00      	nop
 800d3c2:	e7fe      	b.n	800d3c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	3318      	adds	r3, #24
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fe fd7e 	bl	800beca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3ce:	4b1d      	ldr	r3, [pc, #116]	; (800d444 <xTaskRemoveFromEventList+0xac>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d11c      	bne.n	800d410 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	3304      	adds	r3, #4
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7fe fd75 	bl	800beca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	409a      	lsls	r2, r3
 800d3e8:	4b17      	ldr	r3, [pc, #92]	; (800d448 <xTaskRemoveFromEventList+0xb0>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4313      	orrs	r3, r2
 800d3ee:	4a16      	ldr	r2, [pc, #88]	; (800d448 <xTaskRemoveFromEventList+0xb0>)
 800d3f0:	6013      	str	r3, [r2, #0]
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f6:	4613      	mov	r3, r2
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	4413      	add	r3, r2
 800d3fc:	009b      	lsls	r3, r3, #2
 800d3fe:	4a13      	ldr	r2, [pc, #76]	; (800d44c <xTaskRemoveFromEventList+0xb4>)
 800d400:	441a      	add	r2, r3
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	3304      	adds	r3, #4
 800d406:	4619      	mov	r1, r3
 800d408:	4610      	mov	r0, r2
 800d40a:	f7fe fd01 	bl	800be10 <vListInsertEnd>
 800d40e:	e005      	b.n	800d41c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	3318      	adds	r3, #24
 800d414:	4619      	mov	r1, r3
 800d416:	480e      	ldr	r0, [pc, #56]	; (800d450 <xTaskRemoveFromEventList+0xb8>)
 800d418:	f7fe fcfa 	bl	800be10 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d420:	4b0c      	ldr	r3, [pc, #48]	; (800d454 <xTaskRemoveFromEventList+0xbc>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d426:	429a      	cmp	r2, r3
 800d428:	d905      	bls.n	800d436 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d42a:	2301      	movs	r3, #1
 800d42c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d42e:	4b0a      	ldr	r3, [pc, #40]	; (800d458 <xTaskRemoveFromEventList+0xc0>)
 800d430:	2201      	movs	r2, #1
 800d432:	601a      	str	r2, [r3, #0]
 800d434:	e001      	b.n	800d43a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d436:	2300      	movs	r3, #0
 800d438:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d43a:	697b      	ldr	r3, [r7, #20]
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3718      	adds	r7, #24
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	200009ec 	.word	0x200009ec
 800d448:	200009cc 	.word	0x200009cc
 800d44c:	200008c8 	.word	0x200008c8
 800d450:	20000984 	.word	0x20000984
 800d454:	200008c4 	.word	0x200008c4
 800d458:	200009d8 	.word	0x200009d8

0800d45c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d464:	4b06      	ldr	r3, [pc, #24]	; (800d480 <vTaskInternalSetTimeOutState+0x24>)
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d46c:	4b05      	ldr	r3, [pc, #20]	; (800d484 <vTaskInternalSetTimeOutState+0x28>)
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	605a      	str	r2, [r3, #4]
}
 800d474:	bf00      	nop
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr
 800d480:	200009dc 	.word	0x200009dc
 800d484:	200009c8 	.word	0x200009c8

0800d488 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b088      	sub	sp, #32
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d10a      	bne.n	800d4ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49c:	f383 8811 	msr	BASEPRI, r3
 800d4a0:	f3bf 8f6f 	isb	sy
 800d4a4:	f3bf 8f4f 	dsb	sy
 800d4a8:	613b      	str	r3, [r7, #16]
}
 800d4aa:	bf00      	nop
 800d4ac:	e7fe      	b.n	800d4ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d10a      	bne.n	800d4ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b8:	f383 8811 	msr	BASEPRI, r3
 800d4bc:	f3bf 8f6f 	isb	sy
 800d4c0:	f3bf 8f4f 	dsb	sy
 800d4c4:	60fb      	str	r3, [r7, #12]
}
 800d4c6:	bf00      	nop
 800d4c8:	e7fe      	b.n	800d4c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d4ca:	f000 fc73 	bl	800ddb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d4ce:	4b1d      	ldr	r3, [pc, #116]	; (800d544 <xTaskCheckForTimeOut+0xbc>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	69ba      	ldr	r2, [r7, #24]
 800d4da:	1ad3      	subs	r3, r2, r3
 800d4dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e6:	d102      	bne.n	800d4ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	61fb      	str	r3, [r7, #28]
 800d4ec:	e023      	b.n	800d536 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	4b15      	ldr	r3, [pc, #84]	; (800d548 <xTaskCheckForTimeOut+0xc0>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d007      	beq.n	800d50a <xTaskCheckForTimeOut+0x82>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	69ba      	ldr	r2, [r7, #24]
 800d500:	429a      	cmp	r2, r3
 800d502:	d302      	bcc.n	800d50a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d504:	2301      	movs	r3, #1
 800d506:	61fb      	str	r3, [r7, #28]
 800d508:	e015      	b.n	800d536 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	697a      	ldr	r2, [r7, #20]
 800d510:	429a      	cmp	r2, r3
 800d512:	d20b      	bcs.n	800d52c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	1ad2      	subs	r2, r2, r3
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f7ff ff9b 	bl	800d45c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d526:	2300      	movs	r3, #0
 800d528:	61fb      	str	r3, [r7, #28]
 800d52a:	e004      	b.n	800d536 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	2200      	movs	r2, #0
 800d530:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d532:	2301      	movs	r3, #1
 800d534:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d536:	f000 fc6d 	bl	800de14 <vPortExitCritical>

	return xReturn;
 800d53a:	69fb      	ldr	r3, [r7, #28]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3720      	adds	r7, #32
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}
 800d544:	200009c8 	.word	0x200009c8
 800d548:	200009dc 	.word	0x200009dc

0800d54c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d54c:	b480      	push	{r7}
 800d54e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d550:	4b03      	ldr	r3, [pc, #12]	; (800d560 <vTaskMissedYield+0x14>)
 800d552:	2201      	movs	r2, #1
 800d554:	601a      	str	r2, [r3, #0]
}
 800d556:	bf00      	nop
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr
 800d560:	200009d8 	.word	0x200009d8

0800d564 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d56c:	f000 f852 	bl	800d614 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d570:	4b06      	ldr	r3, [pc, #24]	; (800d58c <prvIdleTask+0x28>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2b01      	cmp	r3, #1
 800d576:	d9f9      	bls.n	800d56c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d578:	4b05      	ldr	r3, [pc, #20]	; (800d590 <prvIdleTask+0x2c>)
 800d57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d57e:	601a      	str	r2, [r3, #0]
 800d580:	f3bf 8f4f 	dsb	sy
 800d584:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d588:	e7f0      	b.n	800d56c <prvIdleTask+0x8>
 800d58a:	bf00      	nop
 800d58c:	200008c8 	.word	0x200008c8
 800d590:	e000ed04 	.word	0xe000ed04

0800d594 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d59a:	2300      	movs	r3, #0
 800d59c:	607b      	str	r3, [r7, #4]
 800d59e:	e00c      	b.n	800d5ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	009b      	lsls	r3, r3, #2
 800d5a6:	4413      	add	r3, r2
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	4a12      	ldr	r2, [pc, #72]	; (800d5f4 <prvInitialiseTaskLists+0x60>)
 800d5ac:	4413      	add	r3, r2
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fe fc01 	bl	800bdb6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	607b      	str	r3, [r7, #4]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2b06      	cmp	r3, #6
 800d5be:	d9ef      	bls.n	800d5a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d5c0:	480d      	ldr	r0, [pc, #52]	; (800d5f8 <prvInitialiseTaskLists+0x64>)
 800d5c2:	f7fe fbf8 	bl	800bdb6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d5c6:	480d      	ldr	r0, [pc, #52]	; (800d5fc <prvInitialiseTaskLists+0x68>)
 800d5c8:	f7fe fbf5 	bl	800bdb6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d5cc:	480c      	ldr	r0, [pc, #48]	; (800d600 <prvInitialiseTaskLists+0x6c>)
 800d5ce:	f7fe fbf2 	bl	800bdb6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d5d2:	480c      	ldr	r0, [pc, #48]	; (800d604 <prvInitialiseTaskLists+0x70>)
 800d5d4:	f7fe fbef 	bl	800bdb6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d5d8:	480b      	ldr	r0, [pc, #44]	; (800d608 <prvInitialiseTaskLists+0x74>)
 800d5da:	f7fe fbec 	bl	800bdb6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d5de:	4b0b      	ldr	r3, [pc, #44]	; (800d60c <prvInitialiseTaskLists+0x78>)
 800d5e0:	4a05      	ldr	r2, [pc, #20]	; (800d5f8 <prvInitialiseTaskLists+0x64>)
 800d5e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d5e4:	4b0a      	ldr	r3, [pc, #40]	; (800d610 <prvInitialiseTaskLists+0x7c>)
 800d5e6:	4a05      	ldr	r2, [pc, #20]	; (800d5fc <prvInitialiseTaskLists+0x68>)
 800d5e8:	601a      	str	r2, [r3, #0]
}
 800d5ea:	bf00      	nop
 800d5ec:	3708      	adds	r7, #8
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
 800d5f2:	bf00      	nop
 800d5f4:	200008c8 	.word	0x200008c8
 800d5f8:	20000954 	.word	0x20000954
 800d5fc:	20000968 	.word	0x20000968
 800d600:	20000984 	.word	0x20000984
 800d604:	20000998 	.word	0x20000998
 800d608:	200009b0 	.word	0x200009b0
 800d60c:	2000097c 	.word	0x2000097c
 800d610:	20000980 	.word	0x20000980

0800d614 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d61a:	e019      	b.n	800d650 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d61c:	f000 fbca 	bl	800ddb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d620:	4b10      	ldr	r3, [pc, #64]	; (800d664 <prvCheckTasksWaitingTermination+0x50>)
 800d622:	68db      	ldr	r3, [r3, #12]
 800d624:	68db      	ldr	r3, [r3, #12]
 800d626:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	3304      	adds	r3, #4
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fe fc4c 	bl	800beca <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d632:	4b0d      	ldr	r3, [pc, #52]	; (800d668 <prvCheckTasksWaitingTermination+0x54>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	3b01      	subs	r3, #1
 800d638:	4a0b      	ldr	r2, [pc, #44]	; (800d668 <prvCheckTasksWaitingTermination+0x54>)
 800d63a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d63c:	4b0b      	ldr	r3, [pc, #44]	; (800d66c <prvCheckTasksWaitingTermination+0x58>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	3b01      	subs	r3, #1
 800d642:	4a0a      	ldr	r2, [pc, #40]	; (800d66c <prvCheckTasksWaitingTermination+0x58>)
 800d644:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d646:	f000 fbe5 	bl	800de14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 f810 	bl	800d670 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d650:	4b06      	ldr	r3, [pc, #24]	; (800d66c <prvCheckTasksWaitingTermination+0x58>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d1e1      	bne.n	800d61c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d658:	bf00      	nop
 800d65a:	bf00      	nop
 800d65c:	3708      	adds	r7, #8
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	20000998 	.word	0x20000998
 800d668:	200009c4 	.word	0x200009c4
 800d66c:	200009ac 	.word	0x200009ac

0800d670 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d108      	bne.n	800d694 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d686:	4618      	mov	r0, r3
 800d688:	f000 fd82 	bl	800e190 <vPortFree>
				vPortFree( pxTCB );
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f000 fd7f 	bl	800e190 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d692:	e018      	b.n	800d6c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d103      	bne.n	800d6a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 fd76 	bl	800e190 <vPortFree>
	}
 800d6a4:	e00f      	b.n	800d6c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d6ac:	2b02      	cmp	r3, #2
 800d6ae:	d00a      	beq.n	800d6c6 <prvDeleteTCB+0x56>
	__asm volatile
 800d6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b4:	f383 8811 	msr	BASEPRI, r3
 800d6b8:	f3bf 8f6f 	isb	sy
 800d6bc:	f3bf 8f4f 	dsb	sy
 800d6c0:	60fb      	str	r3, [r7, #12]
}
 800d6c2:	bf00      	nop
 800d6c4:	e7fe      	b.n	800d6c4 <prvDeleteTCB+0x54>
	}
 800d6c6:	bf00      	nop
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
	...

0800d6d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6d6:	4b0c      	ldr	r3, [pc, #48]	; (800d708 <prvResetNextTaskUnblockTime+0x38>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d104      	bne.n	800d6ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d6e0:	4b0a      	ldr	r3, [pc, #40]	; (800d70c <prvResetNextTaskUnblockTime+0x3c>)
 800d6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d6e8:	e008      	b.n	800d6fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ea:	4b07      	ldr	r3, [pc, #28]	; (800d708 <prvResetNextTaskUnblockTime+0x38>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	4a04      	ldr	r2, [pc, #16]	; (800d70c <prvResetNextTaskUnblockTime+0x3c>)
 800d6fa:	6013      	str	r3, [r2, #0]
}
 800d6fc:	bf00      	nop
 800d6fe:	370c      	adds	r7, #12
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr
 800d708:	2000097c 	.word	0x2000097c
 800d70c:	200009e4 	.word	0x200009e4

0800d710 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d710:	b480      	push	{r7}
 800d712:	b083      	sub	sp, #12
 800d714:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d716:	4b0b      	ldr	r3, [pc, #44]	; (800d744 <xTaskGetSchedulerState+0x34>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d102      	bne.n	800d724 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d71e:	2301      	movs	r3, #1
 800d720:	607b      	str	r3, [r7, #4]
 800d722:	e008      	b.n	800d736 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d724:	4b08      	ldr	r3, [pc, #32]	; (800d748 <xTaskGetSchedulerState+0x38>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d102      	bne.n	800d732 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d72c:	2302      	movs	r3, #2
 800d72e:	607b      	str	r3, [r7, #4]
 800d730:	e001      	b.n	800d736 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d732:	2300      	movs	r3, #0
 800d734:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d736:	687b      	ldr	r3, [r7, #4]
	}
 800d738:	4618      	mov	r0, r3
 800d73a:	370c      	adds	r7, #12
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr
 800d744:	200009d0 	.word	0x200009d0
 800d748:	200009ec 	.word	0x200009ec

0800d74c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d758:	2300      	movs	r3, #0
 800d75a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d05e      	beq.n	800d820 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d766:	4b31      	ldr	r3, [pc, #196]	; (800d82c <xTaskPriorityInherit+0xe0>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d24e      	bcs.n	800d80e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	699b      	ldr	r3, [r3, #24]
 800d774:	2b00      	cmp	r3, #0
 800d776:	db06      	blt.n	800d786 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d778:	4b2c      	ldr	r3, [pc, #176]	; (800d82c <xTaskPriorityInherit+0xe0>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d77e:	f1c3 0207 	rsb	r2, r3, #7
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	6959      	ldr	r1, [r3, #20]
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d78e:	4613      	mov	r3, r2
 800d790:	009b      	lsls	r3, r3, #2
 800d792:	4413      	add	r3, r2
 800d794:	009b      	lsls	r3, r3, #2
 800d796:	4a26      	ldr	r2, [pc, #152]	; (800d830 <xTaskPriorityInherit+0xe4>)
 800d798:	4413      	add	r3, r2
 800d79a:	4299      	cmp	r1, r3
 800d79c:	d12f      	bne.n	800d7fe <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	3304      	adds	r3, #4
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7fe fb91 	bl	800beca <uxListRemove>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d10a      	bne.n	800d7c4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d7b8:	43da      	mvns	r2, r3
 800d7ba:	4b1e      	ldr	r3, [pc, #120]	; (800d834 <xTaskPriorityInherit+0xe8>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4013      	ands	r3, r2
 800d7c0:	4a1c      	ldr	r2, [pc, #112]	; (800d834 <xTaskPriorityInherit+0xe8>)
 800d7c2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d7c4:	4b19      	ldr	r3, [pc, #100]	; (800d82c <xTaskPriorityInherit+0xe0>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	409a      	lsls	r2, r3
 800d7d6:	4b17      	ldr	r3, [pc, #92]	; (800d834 <xTaskPriorityInherit+0xe8>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	4a15      	ldr	r2, [pc, #84]	; (800d834 <xTaskPriorityInherit+0xe8>)
 800d7de:	6013      	str	r3, [r2, #0]
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7e4:	4613      	mov	r3, r2
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	4413      	add	r3, r2
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	4a10      	ldr	r2, [pc, #64]	; (800d830 <xTaskPriorityInherit+0xe4>)
 800d7ee:	441a      	add	r2, r3
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	3304      	adds	r3, #4
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	4610      	mov	r0, r2
 800d7f8:	f7fe fb0a 	bl	800be10 <vListInsertEnd>
 800d7fc:	e004      	b.n	800d808 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d7fe:	4b0b      	ldr	r3, [pc, #44]	; (800d82c <xTaskPriorityInherit+0xe0>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d808:	2301      	movs	r3, #1
 800d80a:	60fb      	str	r3, [r7, #12]
 800d80c:	e008      	b.n	800d820 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d812:	4b06      	ldr	r3, [pc, #24]	; (800d82c <xTaskPriorityInherit+0xe0>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d818:	429a      	cmp	r2, r3
 800d81a:	d201      	bcs.n	800d820 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d81c:	2301      	movs	r3, #1
 800d81e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d820:	68fb      	ldr	r3, [r7, #12]
	}
 800d822:	4618      	mov	r0, r3
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	200008c4 	.word	0x200008c4
 800d830:	200008c8 	.word	0x200008c8
 800d834:	200009cc 	.word	0x200009cc

0800d838 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b086      	sub	sp, #24
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d844:	2300      	movs	r3, #0
 800d846:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d06e      	beq.n	800d92c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d84e:	4b3a      	ldr	r3, [pc, #232]	; (800d938 <xTaskPriorityDisinherit+0x100>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	693a      	ldr	r2, [r7, #16]
 800d854:	429a      	cmp	r2, r3
 800d856:	d00a      	beq.n	800d86e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85c:	f383 8811 	msr	BASEPRI, r3
 800d860:	f3bf 8f6f 	isb	sy
 800d864:	f3bf 8f4f 	dsb	sy
 800d868:	60fb      	str	r3, [r7, #12]
}
 800d86a:	bf00      	nop
 800d86c:	e7fe      	b.n	800d86c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d872:	2b00      	cmp	r3, #0
 800d874:	d10a      	bne.n	800d88c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87a:	f383 8811 	msr	BASEPRI, r3
 800d87e:	f3bf 8f6f 	isb	sy
 800d882:	f3bf 8f4f 	dsb	sy
 800d886:	60bb      	str	r3, [r7, #8]
}
 800d888:	bf00      	nop
 800d88a:	e7fe      	b.n	800d88a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d890:	1e5a      	subs	r2, r3, #1
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d044      	beq.n	800d92c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d140      	bne.n	800d92c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	3304      	adds	r3, #4
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7fe fb0b 	bl	800beca <uxListRemove>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d115      	bne.n	800d8e6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8be:	491f      	ldr	r1, [pc, #124]	; (800d93c <xTaskPriorityDisinherit+0x104>)
 800d8c0:	4613      	mov	r3, r2
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	4413      	add	r3, r2
 800d8c6:	009b      	lsls	r3, r3, #2
 800d8c8:	440b      	add	r3, r1
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d10a      	bne.n	800d8e6 <xTaskPriorityDisinherit+0xae>
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d8da:	43da      	mvns	r2, r3
 800d8dc:	4b18      	ldr	r3, [pc, #96]	; (800d940 <xTaskPriorityDisinherit+0x108>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4013      	ands	r3, r2
 800d8e2:	4a17      	ldr	r2, [pc, #92]	; (800d940 <xTaskPriorityDisinherit+0x108>)
 800d8e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f2:	f1c3 0207 	rsb	r2, r3, #7
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8fe:	2201      	movs	r2, #1
 800d900:	409a      	lsls	r2, r3
 800d902:	4b0f      	ldr	r3, [pc, #60]	; (800d940 <xTaskPriorityDisinherit+0x108>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	4313      	orrs	r3, r2
 800d908:	4a0d      	ldr	r2, [pc, #52]	; (800d940 <xTaskPriorityDisinherit+0x108>)
 800d90a:	6013      	str	r3, [r2, #0]
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d910:	4613      	mov	r3, r2
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	4413      	add	r3, r2
 800d916:	009b      	lsls	r3, r3, #2
 800d918:	4a08      	ldr	r2, [pc, #32]	; (800d93c <xTaskPriorityDisinherit+0x104>)
 800d91a:	441a      	add	r2, r3
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	3304      	adds	r3, #4
 800d920:	4619      	mov	r1, r3
 800d922:	4610      	mov	r0, r2
 800d924:	f7fe fa74 	bl	800be10 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d928:	2301      	movs	r3, #1
 800d92a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d92c:	697b      	ldr	r3, [r7, #20]
	}
 800d92e:	4618      	mov	r0, r3
 800d930:	3718      	adds	r7, #24
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	200008c4 	.word	0x200008c4
 800d93c:	200008c8 	.word	0x200008c8
 800d940:	200009cc 	.word	0x200009cc

0800d944 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d944:	b580      	push	{r7, lr}
 800d946:	b088      	sub	sp, #32
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d952:	2301      	movs	r3, #1
 800d954:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d077      	beq.n	800da4c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d95c:	69bb      	ldr	r3, [r7, #24]
 800d95e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d960:	2b00      	cmp	r3, #0
 800d962:	d10a      	bne.n	800d97a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d968:	f383 8811 	msr	BASEPRI, r3
 800d96c:	f3bf 8f6f 	isb	sy
 800d970:	f3bf 8f4f 	dsb	sy
 800d974:	60fb      	str	r3, [r7, #12]
}
 800d976:	bf00      	nop
 800d978:	e7fe      	b.n	800d978 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d97a:	69bb      	ldr	r3, [r7, #24]
 800d97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d97e:	683a      	ldr	r2, [r7, #0]
 800d980:	429a      	cmp	r2, r3
 800d982:	d902      	bls.n	800d98a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	61fb      	str	r3, [r7, #28]
 800d988:	e002      	b.n	800d990 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d98e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d994:	69fa      	ldr	r2, [r7, #28]
 800d996:	429a      	cmp	r2, r3
 800d998:	d058      	beq.n	800da4c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d99a:	69bb      	ldr	r3, [r7, #24]
 800d99c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d99e:	697a      	ldr	r2, [r7, #20]
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d153      	bne.n	800da4c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d9a4:	4b2b      	ldr	r3, [pc, #172]	; (800da54 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	69ba      	ldr	r2, [r7, #24]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d10a      	bne.n	800d9c4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b2:	f383 8811 	msr	BASEPRI, r3
 800d9b6:	f3bf 8f6f 	isb	sy
 800d9ba:	f3bf 8f4f 	dsb	sy
 800d9be:	60bb      	str	r3, [r7, #8]
}
 800d9c0:	bf00      	nop
 800d9c2:	e7fe      	b.n	800d9c2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d9c4:	69bb      	ldr	r3, [r7, #24]
 800d9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d9ca:	69bb      	ldr	r3, [r7, #24]
 800d9cc:	69fa      	ldr	r2, [r7, #28]
 800d9ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	699b      	ldr	r3, [r3, #24]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	db04      	blt.n	800d9e2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	f1c3 0207 	rsb	r2, r3, #7
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d9e2:	69bb      	ldr	r3, [r7, #24]
 800d9e4:	6959      	ldr	r1, [r3, #20]
 800d9e6:	693a      	ldr	r2, [r7, #16]
 800d9e8:	4613      	mov	r3, r2
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	4413      	add	r3, r2
 800d9ee:	009b      	lsls	r3, r3, #2
 800d9f0:	4a19      	ldr	r2, [pc, #100]	; (800da58 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d9f2:	4413      	add	r3, r2
 800d9f4:	4299      	cmp	r1, r3
 800d9f6:	d129      	bne.n	800da4c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9f8:	69bb      	ldr	r3, [r7, #24]
 800d9fa:	3304      	adds	r3, #4
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7fe fa64 	bl	800beca <uxListRemove>
 800da02:	4603      	mov	r3, r0
 800da04:	2b00      	cmp	r3, #0
 800da06:	d10a      	bne.n	800da1e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da0c:	2201      	movs	r2, #1
 800da0e:	fa02 f303 	lsl.w	r3, r2, r3
 800da12:	43da      	mvns	r2, r3
 800da14:	4b11      	ldr	r3, [pc, #68]	; (800da5c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4013      	ands	r3, r2
 800da1a:	4a10      	ldr	r2, [pc, #64]	; (800da5c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800da1c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da22:	2201      	movs	r2, #1
 800da24:	409a      	lsls	r2, r3
 800da26:	4b0d      	ldr	r3, [pc, #52]	; (800da5c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	4313      	orrs	r3, r2
 800da2c:	4a0b      	ldr	r2, [pc, #44]	; (800da5c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800da2e:	6013      	str	r3, [r2, #0]
 800da30:	69bb      	ldr	r3, [r7, #24]
 800da32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da34:	4613      	mov	r3, r2
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	4413      	add	r3, r2
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	4a06      	ldr	r2, [pc, #24]	; (800da58 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800da3e:	441a      	add	r2, r3
 800da40:	69bb      	ldr	r3, [r7, #24]
 800da42:	3304      	adds	r3, #4
 800da44:	4619      	mov	r1, r3
 800da46:	4610      	mov	r0, r2
 800da48:	f7fe f9e2 	bl	800be10 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da4c:	bf00      	nop
 800da4e:	3720      	adds	r7, #32
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}
 800da54:	200008c4 	.word	0x200008c4
 800da58:	200008c8 	.word	0x200008c8
 800da5c:	200009cc 	.word	0x200009cc

0800da60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800da60:	b480      	push	{r7}
 800da62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800da64:	4b07      	ldr	r3, [pc, #28]	; (800da84 <pvTaskIncrementMutexHeldCount+0x24>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d004      	beq.n	800da76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800da6c:	4b05      	ldr	r3, [pc, #20]	; (800da84 <pvTaskIncrementMutexHeldCount+0x24>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da72:	3201      	adds	r2, #1
 800da74:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800da76:	4b03      	ldr	r3, [pc, #12]	; (800da84 <pvTaskIncrementMutexHeldCount+0x24>)
 800da78:	681b      	ldr	r3, [r3, #0]
	}
 800da7a:	4618      	mov	r0, r3
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr
 800da84:	200008c4 	.word	0x200008c4

0800da88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800da92:	4b29      	ldr	r3, [pc, #164]	; (800db38 <prvAddCurrentTaskToDelayedList+0xb0>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da98:	4b28      	ldr	r3, [pc, #160]	; (800db3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	3304      	adds	r3, #4
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7fe fa13 	bl	800beca <uxListRemove>
 800daa4:	4603      	mov	r3, r0
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d10b      	bne.n	800dac2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800daaa:	4b24      	ldr	r3, [pc, #144]	; (800db3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab0:	2201      	movs	r2, #1
 800dab2:	fa02 f303 	lsl.w	r3, r2, r3
 800dab6:	43da      	mvns	r2, r3
 800dab8:	4b21      	ldr	r3, [pc, #132]	; (800db40 <prvAddCurrentTaskToDelayedList+0xb8>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4013      	ands	r3, r2
 800dabe:	4a20      	ldr	r2, [pc, #128]	; (800db40 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dac0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dac8:	d10a      	bne.n	800dae0 <prvAddCurrentTaskToDelayedList+0x58>
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d007      	beq.n	800dae0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dad0:	4b1a      	ldr	r3, [pc, #104]	; (800db3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	3304      	adds	r3, #4
 800dad6:	4619      	mov	r1, r3
 800dad8:	481a      	ldr	r0, [pc, #104]	; (800db44 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dada:	f7fe f999 	bl	800be10 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dade:	e026      	b.n	800db2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dae0:	68fa      	ldr	r2, [r7, #12]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	4413      	add	r3, r2
 800dae6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dae8:	4b14      	ldr	r3, [pc, #80]	; (800db3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	68ba      	ldr	r2, [r7, #8]
 800daee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800daf0:	68ba      	ldr	r2, [r7, #8]
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d209      	bcs.n	800db0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800daf8:	4b13      	ldr	r3, [pc, #76]	; (800db48 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	4b0f      	ldr	r3, [pc, #60]	; (800db3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	3304      	adds	r3, #4
 800db02:	4619      	mov	r1, r3
 800db04:	4610      	mov	r0, r2
 800db06:	f7fe f9a7 	bl	800be58 <vListInsert>
}
 800db0a:	e010      	b.n	800db2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db0c:	4b0f      	ldr	r3, [pc, #60]	; (800db4c <prvAddCurrentTaskToDelayedList+0xc4>)
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	4b0a      	ldr	r3, [pc, #40]	; (800db3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	3304      	adds	r3, #4
 800db16:	4619      	mov	r1, r3
 800db18:	4610      	mov	r0, r2
 800db1a:	f7fe f99d 	bl	800be58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db1e:	4b0c      	ldr	r3, [pc, #48]	; (800db50 <prvAddCurrentTaskToDelayedList+0xc8>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	68ba      	ldr	r2, [r7, #8]
 800db24:	429a      	cmp	r2, r3
 800db26:	d202      	bcs.n	800db2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800db28:	4a09      	ldr	r2, [pc, #36]	; (800db50 <prvAddCurrentTaskToDelayedList+0xc8>)
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	6013      	str	r3, [r2, #0]
}
 800db2e:	bf00      	nop
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	200009c8 	.word	0x200009c8
 800db3c:	200008c4 	.word	0x200008c4
 800db40:	200009cc 	.word	0x200009cc
 800db44:	200009b0 	.word	0x200009b0
 800db48:	20000980 	.word	0x20000980
 800db4c:	2000097c 	.word	0x2000097c
 800db50:	200009e4 	.word	0x200009e4

0800db54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800db54:	b480      	push	{r7}
 800db56:	b085      	sub	sp, #20
 800db58:	af00      	add	r7, sp, #0
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	60b9      	str	r1, [r7, #8]
 800db5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	3b04      	subs	r3, #4
 800db64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800db6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	3b04      	subs	r3, #4
 800db72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	f023 0201 	bic.w	r2, r3, #1
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	3b04      	subs	r3, #4
 800db82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800db84:	4a0c      	ldr	r2, [pc, #48]	; (800dbb8 <pxPortInitialiseStack+0x64>)
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	3b14      	subs	r3, #20
 800db8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	3b04      	subs	r3, #4
 800db9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f06f 0202 	mvn.w	r2, #2
 800dba2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	3b20      	subs	r3, #32
 800dba8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3714      	adds	r7, #20
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr
 800dbb8:	0800dbbd 	.word	0x0800dbbd

0800dbbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b085      	sub	sp, #20
 800dbc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dbc6:	4b12      	ldr	r3, [pc, #72]	; (800dc10 <prvTaskExitError+0x54>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbce:	d00a      	beq.n	800dbe6 <prvTaskExitError+0x2a>
	__asm volatile
 800dbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd4:	f383 8811 	msr	BASEPRI, r3
 800dbd8:	f3bf 8f6f 	isb	sy
 800dbdc:	f3bf 8f4f 	dsb	sy
 800dbe0:	60fb      	str	r3, [r7, #12]
}
 800dbe2:	bf00      	nop
 800dbe4:	e7fe      	b.n	800dbe4 <prvTaskExitError+0x28>
	__asm volatile
 800dbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbea:	f383 8811 	msr	BASEPRI, r3
 800dbee:	f3bf 8f6f 	isb	sy
 800dbf2:	f3bf 8f4f 	dsb	sy
 800dbf6:	60bb      	str	r3, [r7, #8]
}
 800dbf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dbfa:	bf00      	nop
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d0fc      	beq.n	800dbfc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dc02:	bf00      	nop
 800dc04:	bf00      	nop
 800dc06:	3714      	adds	r7, #20
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr
 800dc10:	20000030 	.word	0x20000030
	...

0800dc20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dc20:	4b07      	ldr	r3, [pc, #28]	; (800dc40 <pxCurrentTCBConst2>)
 800dc22:	6819      	ldr	r1, [r3, #0]
 800dc24:	6808      	ldr	r0, [r1, #0]
 800dc26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc2a:	f380 8809 	msr	PSP, r0
 800dc2e:	f3bf 8f6f 	isb	sy
 800dc32:	f04f 0000 	mov.w	r0, #0
 800dc36:	f380 8811 	msr	BASEPRI, r0
 800dc3a:	4770      	bx	lr
 800dc3c:	f3af 8000 	nop.w

0800dc40 <pxCurrentTCBConst2>:
 800dc40:	200008c4 	.word	0x200008c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dc44:	bf00      	nop
 800dc46:	bf00      	nop

0800dc48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dc48:	4808      	ldr	r0, [pc, #32]	; (800dc6c <prvPortStartFirstTask+0x24>)
 800dc4a:	6800      	ldr	r0, [r0, #0]
 800dc4c:	6800      	ldr	r0, [r0, #0]
 800dc4e:	f380 8808 	msr	MSP, r0
 800dc52:	f04f 0000 	mov.w	r0, #0
 800dc56:	f380 8814 	msr	CONTROL, r0
 800dc5a:	b662      	cpsie	i
 800dc5c:	b661      	cpsie	f
 800dc5e:	f3bf 8f4f 	dsb	sy
 800dc62:	f3bf 8f6f 	isb	sy
 800dc66:	df00      	svc	0
 800dc68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dc6a:	bf00      	nop
 800dc6c:	e000ed08 	.word	0xe000ed08

0800dc70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b086      	sub	sp, #24
 800dc74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dc76:	4b46      	ldr	r3, [pc, #280]	; (800dd90 <xPortStartScheduler+0x120>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4a46      	ldr	r2, [pc, #280]	; (800dd94 <xPortStartScheduler+0x124>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d10a      	bne.n	800dc96 <xPortStartScheduler+0x26>
	__asm volatile
 800dc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc84:	f383 8811 	msr	BASEPRI, r3
 800dc88:	f3bf 8f6f 	isb	sy
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	613b      	str	r3, [r7, #16]
}
 800dc92:	bf00      	nop
 800dc94:	e7fe      	b.n	800dc94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dc96:	4b3e      	ldr	r3, [pc, #248]	; (800dd90 <xPortStartScheduler+0x120>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a3f      	ldr	r2, [pc, #252]	; (800dd98 <xPortStartScheduler+0x128>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d10a      	bne.n	800dcb6 <xPortStartScheduler+0x46>
	__asm volatile
 800dca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca4:	f383 8811 	msr	BASEPRI, r3
 800dca8:	f3bf 8f6f 	isb	sy
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	60fb      	str	r3, [r7, #12]
}
 800dcb2:	bf00      	nop
 800dcb4:	e7fe      	b.n	800dcb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dcb6:	4b39      	ldr	r3, [pc, #228]	; (800dd9c <xPortStartScheduler+0x12c>)
 800dcb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	22ff      	movs	r2, #255	; 0xff
 800dcc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	b2db      	uxtb	r3, r3
 800dcce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dcd0:	78fb      	ldrb	r3, [r7, #3]
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dcd8:	b2da      	uxtb	r2, r3
 800dcda:	4b31      	ldr	r3, [pc, #196]	; (800dda0 <xPortStartScheduler+0x130>)
 800dcdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dcde:	4b31      	ldr	r3, [pc, #196]	; (800dda4 <xPortStartScheduler+0x134>)
 800dce0:	2207      	movs	r2, #7
 800dce2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dce4:	e009      	b.n	800dcfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dce6:	4b2f      	ldr	r3, [pc, #188]	; (800dda4 <xPortStartScheduler+0x134>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	3b01      	subs	r3, #1
 800dcec:	4a2d      	ldr	r2, [pc, #180]	; (800dda4 <xPortStartScheduler+0x134>)
 800dcee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dcf0:	78fb      	ldrb	r3, [r7, #3]
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	005b      	lsls	r3, r3, #1
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dcfa:	78fb      	ldrb	r3, [r7, #3]
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd02:	2b80      	cmp	r3, #128	; 0x80
 800dd04:	d0ef      	beq.n	800dce6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dd06:	4b27      	ldr	r3, [pc, #156]	; (800dda4 <xPortStartScheduler+0x134>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f1c3 0307 	rsb	r3, r3, #7
 800dd0e:	2b04      	cmp	r3, #4
 800dd10:	d00a      	beq.n	800dd28 <xPortStartScheduler+0xb8>
	__asm volatile
 800dd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd16:	f383 8811 	msr	BASEPRI, r3
 800dd1a:	f3bf 8f6f 	isb	sy
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	60bb      	str	r3, [r7, #8]
}
 800dd24:	bf00      	nop
 800dd26:	e7fe      	b.n	800dd26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dd28:	4b1e      	ldr	r3, [pc, #120]	; (800dda4 <xPortStartScheduler+0x134>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	021b      	lsls	r3, r3, #8
 800dd2e:	4a1d      	ldr	r2, [pc, #116]	; (800dda4 <xPortStartScheduler+0x134>)
 800dd30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dd32:	4b1c      	ldr	r3, [pc, #112]	; (800dda4 <xPortStartScheduler+0x134>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dd3a:	4a1a      	ldr	r2, [pc, #104]	; (800dda4 <xPortStartScheduler+0x134>)
 800dd3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	b2da      	uxtb	r2, r3
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dd46:	4b18      	ldr	r3, [pc, #96]	; (800dda8 <xPortStartScheduler+0x138>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	4a17      	ldr	r2, [pc, #92]	; (800dda8 <xPortStartScheduler+0x138>)
 800dd4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dd50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dd52:	4b15      	ldr	r3, [pc, #84]	; (800dda8 <xPortStartScheduler+0x138>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4a14      	ldr	r2, [pc, #80]	; (800dda8 <xPortStartScheduler+0x138>)
 800dd58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dd5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dd5e:	f000 f8dd 	bl	800df1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dd62:	4b12      	ldr	r3, [pc, #72]	; (800ddac <xPortStartScheduler+0x13c>)
 800dd64:	2200      	movs	r2, #0
 800dd66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dd68:	f000 f8fc 	bl	800df64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dd6c:	4b10      	ldr	r3, [pc, #64]	; (800ddb0 <xPortStartScheduler+0x140>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	4a0f      	ldr	r2, [pc, #60]	; (800ddb0 <xPortStartScheduler+0x140>)
 800dd72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dd76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dd78:	f7ff ff66 	bl	800dc48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dd7c:	f7ff fa8c 	bl	800d298 <vTaskSwitchContext>
	prvTaskExitError();
 800dd80:	f7ff ff1c 	bl	800dbbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dd84:	2300      	movs	r3, #0
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3718      	adds	r7, #24
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	e000ed00 	.word	0xe000ed00
 800dd94:	410fc271 	.word	0x410fc271
 800dd98:	410fc270 	.word	0x410fc270
 800dd9c:	e000e400 	.word	0xe000e400
 800dda0:	200009f0 	.word	0x200009f0
 800dda4:	200009f4 	.word	0x200009f4
 800dda8:	e000ed20 	.word	0xe000ed20
 800ddac:	20000030 	.word	0x20000030
 800ddb0:	e000ef34 	.word	0xe000ef34

0800ddb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
	__asm volatile
 800ddba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddbe:	f383 8811 	msr	BASEPRI, r3
 800ddc2:	f3bf 8f6f 	isb	sy
 800ddc6:	f3bf 8f4f 	dsb	sy
 800ddca:	607b      	str	r3, [r7, #4]
}
 800ddcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ddce:	4b0f      	ldr	r3, [pc, #60]	; (800de0c <vPortEnterCritical+0x58>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	4a0d      	ldr	r2, [pc, #52]	; (800de0c <vPortEnterCritical+0x58>)
 800ddd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ddd8:	4b0c      	ldr	r3, [pc, #48]	; (800de0c <vPortEnterCritical+0x58>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	d10f      	bne.n	800de00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dde0:	4b0b      	ldr	r3, [pc, #44]	; (800de10 <vPortEnterCritical+0x5c>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d00a      	beq.n	800de00 <vPortEnterCritical+0x4c>
	__asm volatile
 800ddea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddee:	f383 8811 	msr	BASEPRI, r3
 800ddf2:	f3bf 8f6f 	isb	sy
 800ddf6:	f3bf 8f4f 	dsb	sy
 800ddfa:	603b      	str	r3, [r7, #0]
}
 800ddfc:	bf00      	nop
 800ddfe:	e7fe      	b.n	800ddfe <vPortEnterCritical+0x4a>
	}
}
 800de00:	bf00      	nop
 800de02:	370c      	adds	r7, #12
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr
 800de0c:	20000030 	.word	0x20000030
 800de10:	e000ed04 	.word	0xe000ed04

0800de14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800de14:	b480      	push	{r7}
 800de16:	b083      	sub	sp, #12
 800de18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800de1a:	4b12      	ldr	r3, [pc, #72]	; (800de64 <vPortExitCritical+0x50>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d10a      	bne.n	800de38 <vPortExitCritical+0x24>
	__asm volatile
 800de22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de26:	f383 8811 	msr	BASEPRI, r3
 800de2a:	f3bf 8f6f 	isb	sy
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	607b      	str	r3, [r7, #4]
}
 800de34:	bf00      	nop
 800de36:	e7fe      	b.n	800de36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800de38:	4b0a      	ldr	r3, [pc, #40]	; (800de64 <vPortExitCritical+0x50>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	3b01      	subs	r3, #1
 800de3e:	4a09      	ldr	r2, [pc, #36]	; (800de64 <vPortExitCritical+0x50>)
 800de40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800de42:	4b08      	ldr	r3, [pc, #32]	; (800de64 <vPortExitCritical+0x50>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d105      	bne.n	800de56 <vPortExitCritical+0x42>
 800de4a:	2300      	movs	r3, #0
 800de4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	f383 8811 	msr	BASEPRI, r3
}
 800de54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800de56:	bf00      	nop
 800de58:	370c      	adds	r7, #12
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	20000030 	.word	0x20000030
	...

0800de70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800de70:	f3ef 8009 	mrs	r0, PSP
 800de74:	f3bf 8f6f 	isb	sy
 800de78:	4b15      	ldr	r3, [pc, #84]	; (800ded0 <pxCurrentTCBConst>)
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	f01e 0f10 	tst.w	lr, #16
 800de80:	bf08      	it	eq
 800de82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800de86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de8a:	6010      	str	r0, [r2, #0]
 800de8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800de90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800de94:	f380 8811 	msr	BASEPRI, r0
 800de98:	f3bf 8f4f 	dsb	sy
 800de9c:	f3bf 8f6f 	isb	sy
 800dea0:	f7ff f9fa 	bl	800d298 <vTaskSwitchContext>
 800dea4:	f04f 0000 	mov.w	r0, #0
 800dea8:	f380 8811 	msr	BASEPRI, r0
 800deac:	bc09      	pop	{r0, r3}
 800deae:	6819      	ldr	r1, [r3, #0]
 800deb0:	6808      	ldr	r0, [r1, #0]
 800deb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb6:	f01e 0f10 	tst.w	lr, #16
 800deba:	bf08      	it	eq
 800debc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dec0:	f380 8809 	msr	PSP, r0
 800dec4:	f3bf 8f6f 	isb	sy
 800dec8:	4770      	bx	lr
 800deca:	bf00      	nop
 800decc:	f3af 8000 	nop.w

0800ded0 <pxCurrentTCBConst>:
 800ded0:	200008c4 	.word	0x200008c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ded4:	bf00      	nop
 800ded6:	bf00      	nop

0800ded8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
	__asm volatile
 800dede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee2:	f383 8811 	msr	BASEPRI, r3
 800dee6:	f3bf 8f6f 	isb	sy
 800deea:	f3bf 8f4f 	dsb	sy
 800deee:	607b      	str	r3, [r7, #4]
}
 800def0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800def2:	f7ff f919 	bl	800d128 <xTaskIncrementTick>
 800def6:	4603      	mov	r3, r0
 800def8:	2b00      	cmp	r3, #0
 800defa:	d003      	beq.n	800df04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800defc:	4b06      	ldr	r3, [pc, #24]	; (800df18 <SysTick_Handler+0x40>)
 800defe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df02:	601a      	str	r2, [r3, #0]
 800df04:	2300      	movs	r3, #0
 800df06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	f383 8811 	msr	BASEPRI, r3
}
 800df0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800df10:	bf00      	nop
 800df12:	3708      	adds	r7, #8
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}
 800df18:	e000ed04 	.word	0xe000ed04

0800df1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800df1c:	b480      	push	{r7}
 800df1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800df20:	4b0b      	ldr	r3, [pc, #44]	; (800df50 <vPortSetupTimerInterrupt+0x34>)
 800df22:	2200      	movs	r2, #0
 800df24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800df26:	4b0b      	ldr	r3, [pc, #44]	; (800df54 <vPortSetupTimerInterrupt+0x38>)
 800df28:	2200      	movs	r2, #0
 800df2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800df2c:	4b0a      	ldr	r3, [pc, #40]	; (800df58 <vPortSetupTimerInterrupt+0x3c>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4a0a      	ldr	r2, [pc, #40]	; (800df5c <vPortSetupTimerInterrupt+0x40>)
 800df32:	fba2 2303 	umull	r2, r3, r2, r3
 800df36:	099b      	lsrs	r3, r3, #6
 800df38:	4a09      	ldr	r2, [pc, #36]	; (800df60 <vPortSetupTimerInterrupt+0x44>)
 800df3a:	3b01      	subs	r3, #1
 800df3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800df3e:	4b04      	ldr	r3, [pc, #16]	; (800df50 <vPortSetupTimerInterrupt+0x34>)
 800df40:	2207      	movs	r2, #7
 800df42:	601a      	str	r2, [r3, #0]
}
 800df44:	bf00      	nop
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop
 800df50:	e000e010 	.word	0xe000e010
 800df54:	e000e018 	.word	0xe000e018
 800df58:	20000010 	.word	0x20000010
 800df5c:	10624dd3 	.word	0x10624dd3
 800df60:	e000e014 	.word	0xe000e014

0800df64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800df64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800df74 <vPortEnableVFP+0x10>
 800df68:	6801      	ldr	r1, [r0, #0]
 800df6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800df6e:	6001      	str	r1, [r0, #0]
 800df70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800df72:	bf00      	nop
 800df74:	e000ed88 	.word	0xe000ed88

0800df78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800df78:	b480      	push	{r7}
 800df7a:	b085      	sub	sp, #20
 800df7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800df7e:	f3ef 8305 	mrs	r3, IPSR
 800df82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2b0f      	cmp	r3, #15
 800df88:	d914      	bls.n	800dfb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800df8a:	4a17      	ldr	r2, [pc, #92]	; (800dfe8 <vPortValidateInterruptPriority+0x70>)
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	4413      	add	r3, r2
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800df94:	4b15      	ldr	r3, [pc, #84]	; (800dfec <vPortValidateInterruptPriority+0x74>)
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	7afa      	ldrb	r2, [r7, #11]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d20a      	bcs.n	800dfb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800df9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa2:	f383 8811 	msr	BASEPRI, r3
 800dfa6:	f3bf 8f6f 	isb	sy
 800dfaa:	f3bf 8f4f 	dsb	sy
 800dfae:	607b      	str	r3, [r7, #4]
}
 800dfb0:	bf00      	nop
 800dfb2:	e7fe      	b.n	800dfb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dfb4:	4b0e      	ldr	r3, [pc, #56]	; (800dff0 <vPortValidateInterruptPriority+0x78>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dfbc:	4b0d      	ldr	r3, [pc, #52]	; (800dff4 <vPortValidateInterruptPriority+0x7c>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d90a      	bls.n	800dfda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc8:	f383 8811 	msr	BASEPRI, r3
 800dfcc:	f3bf 8f6f 	isb	sy
 800dfd0:	f3bf 8f4f 	dsb	sy
 800dfd4:	603b      	str	r3, [r7, #0]
}
 800dfd6:	bf00      	nop
 800dfd8:	e7fe      	b.n	800dfd8 <vPortValidateInterruptPriority+0x60>
	}
 800dfda:	bf00      	nop
 800dfdc:	3714      	adds	r7, #20
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop
 800dfe8:	e000e3f0 	.word	0xe000e3f0
 800dfec:	200009f0 	.word	0x200009f0
 800dff0:	e000ed0c 	.word	0xe000ed0c
 800dff4:	200009f4 	.word	0x200009f4

0800dff8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b08a      	sub	sp, #40	; 0x28
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e000:	2300      	movs	r3, #0
 800e002:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e004:	f7fe ffe6 	bl	800cfd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e008:	4b5b      	ldr	r3, [pc, #364]	; (800e178 <pvPortMalloc+0x180>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d101      	bne.n	800e014 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e010:	f000 f920 	bl	800e254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e014:	4b59      	ldr	r3, [pc, #356]	; (800e17c <pvPortMalloc+0x184>)
 800e016:	681a      	ldr	r2, [r3, #0]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	4013      	ands	r3, r2
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	f040 8093 	bne.w	800e148 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d01d      	beq.n	800e064 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e028:	2208      	movs	r2, #8
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	4413      	add	r3, r2
 800e02e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f003 0307 	and.w	r3, r3, #7
 800e036:	2b00      	cmp	r3, #0
 800e038:	d014      	beq.n	800e064 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f023 0307 	bic.w	r3, r3, #7
 800e040:	3308      	adds	r3, #8
 800e042:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f003 0307 	and.w	r3, r3, #7
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d00a      	beq.n	800e064 <pvPortMalloc+0x6c>
	__asm volatile
 800e04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e052:	f383 8811 	msr	BASEPRI, r3
 800e056:	f3bf 8f6f 	isb	sy
 800e05a:	f3bf 8f4f 	dsb	sy
 800e05e:	617b      	str	r3, [r7, #20]
}
 800e060:	bf00      	nop
 800e062:	e7fe      	b.n	800e062 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d06e      	beq.n	800e148 <pvPortMalloc+0x150>
 800e06a:	4b45      	ldr	r3, [pc, #276]	; (800e180 <pvPortMalloc+0x188>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	429a      	cmp	r2, r3
 800e072:	d869      	bhi.n	800e148 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e074:	4b43      	ldr	r3, [pc, #268]	; (800e184 <pvPortMalloc+0x18c>)
 800e076:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e078:	4b42      	ldr	r3, [pc, #264]	; (800e184 <pvPortMalloc+0x18c>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e07e:	e004      	b.n	800e08a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e082:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	687a      	ldr	r2, [r7, #4]
 800e090:	429a      	cmp	r2, r3
 800e092:	d903      	bls.n	800e09c <pvPortMalloc+0xa4>
 800e094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d1f1      	bne.n	800e080 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e09c:	4b36      	ldr	r3, [pc, #216]	; (800e178 <pvPortMalloc+0x180>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d050      	beq.n	800e148 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e0a6:	6a3b      	ldr	r3, [r7, #32]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	2208      	movs	r2, #8
 800e0ac:	4413      	add	r3, r2
 800e0ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	6a3b      	ldr	r3, [r7, #32]
 800e0b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ba:	685a      	ldr	r2, [r3, #4]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	1ad2      	subs	r2, r2, r3
 800e0c0:	2308      	movs	r3, #8
 800e0c2:	005b      	lsls	r3, r3, #1
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d91f      	bls.n	800e108 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e0c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	4413      	add	r3, r2
 800e0ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0d0:	69bb      	ldr	r3, [r7, #24]
 800e0d2:	f003 0307 	and.w	r3, r3, #7
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d00a      	beq.n	800e0f0 <pvPortMalloc+0xf8>
	__asm volatile
 800e0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0de:	f383 8811 	msr	BASEPRI, r3
 800e0e2:	f3bf 8f6f 	isb	sy
 800e0e6:	f3bf 8f4f 	dsb	sy
 800e0ea:	613b      	str	r3, [r7, #16]
}
 800e0ec:	bf00      	nop
 800e0ee:	e7fe      	b.n	800e0ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f2:	685a      	ldr	r2, [r3, #4]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	1ad2      	subs	r2, r2, r3
 800e0f8:	69bb      	ldr	r3, [r7, #24]
 800e0fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fe:	687a      	ldr	r2, [r7, #4]
 800e100:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e102:	69b8      	ldr	r0, [r7, #24]
 800e104:	f000 f908 	bl	800e318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e108:	4b1d      	ldr	r3, [pc, #116]	; (800e180 <pvPortMalloc+0x188>)
 800e10a:	681a      	ldr	r2, [r3, #0]
 800e10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	1ad3      	subs	r3, r2, r3
 800e112:	4a1b      	ldr	r2, [pc, #108]	; (800e180 <pvPortMalloc+0x188>)
 800e114:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e116:	4b1a      	ldr	r3, [pc, #104]	; (800e180 <pvPortMalloc+0x188>)
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	4b1b      	ldr	r3, [pc, #108]	; (800e188 <pvPortMalloc+0x190>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	429a      	cmp	r2, r3
 800e120:	d203      	bcs.n	800e12a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e122:	4b17      	ldr	r3, [pc, #92]	; (800e180 <pvPortMalloc+0x188>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	4a18      	ldr	r2, [pc, #96]	; (800e188 <pvPortMalloc+0x190>)
 800e128:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12c:	685a      	ldr	r2, [r3, #4]
 800e12e:	4b13      	ldr	r3, [pc, #76]	; (800e17c <pvPortMalloc+0x184>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	431a      	orrs	r2, r3
 800e134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e136:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13a:	2200      	movs	r2, #0
 800e13c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e13e:	4b13      	ldr	r3, [pc, #76]	; (800e18c <pvPortMalloc+0x194>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	3301      	adds	r3, #1
 800e144:	4a11      	ldr	r2, [pc, #68]	; (800e18c <pvPortMalloc+0x194>)
 800e146:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e148:	f7fe ff52 	bl	800cff0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	f003 0307 	and.w	r3, r3, #7
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00a      	beq.n	800e16c <pvPortMalloc+0x174>
	__asm volatile
 800e156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15a:	f383 8811 	msr	BASEPRI, r3
 800e15e:	f3bf 8f6f 	isb	sy
 800e162:	f3bf 8f4f 	dsb	sy
 800e166:	60fb      	str	r3, [r7, #12]
}
 800e168:	bf00      	nop
 800e16a:	e7fe      	b.n	800e16a <pvPortMalloc+0x172>
	return pvReturn;
 800e16c:	69fb      	ldr	r3, [r7, #28]
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3728      	adds	r7, #40	; 0x28
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	20004600 	.word	0x20004600
 800e17c:	20004614 	.word	0x20004614
 800e180:	20004604 	.word	0x20004604
 800e184:	200045f8 	.word	0x200045f8
 800e188:	20004608 	.word	0x20004608
 800e18c:	2000460c 	.word	0x2000460c

0800e190 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b086      	sub	sp, #24
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d04d      	beq.n	800e23e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e1a2:	2308      	movs	r3, #8
 800e1a4:	425b      	negs	r3, r3
 800e1a6:	697a      	ldr	r2, [r7, #20]
 800e1a8:	4413      	add	r3, r2
 800e1aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	685a      	ldr	r2, [r3, #4]
 800e1b4:	4b24      	ldr	r3, [pc, #144]	; (800e248 <vPortFree+0xb8>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	4013      	ands	r3, r2
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d10a      	bne.n	800e1d4 <vPortFree+0x44>
	__asm volatile
 800e1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c2:	f383 8811 	msr	BASEPRI, r3
 800e1c6:	f3bf 8f6f 	isb	sy
 800e1ca:	f3bf 8f4f 	dsb	sy
 800e1ce:	60fb      	str	r3, [r7, #12]
}
 800e1d0:	bf00      	nop
 800e1d2:	e7fe      	b.n	800e1d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d00a      	beq.n	800e1f2 <vPortFree+0x62>
	__asm volatile
 800e1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e0:	f383 8811 	msr	BASEPRI, r3
 800e1e4:	f3bf 8f6f 	isb	sy
 800e1e8:	f3bf 8f4f 	dsb	sy
 800e1ec:	60bb      	str	r3, [r7, #8]
}
 800e1ee:	bf00      	nop
 800e1f0:	e7fe      	b.n	800e1f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	685a      	ldr	r2, [r3, #4]
 800e1f6:	4b14      	ldr	r3, [pc, #80]	; (800e248 <vPortFree+0xb8>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	4013      	ands	r3, r2
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d01e      	beq.n	800e23e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d11a      	bne.n	800e23e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	685a      	ldr	r2, [r3, #4]
 800e20c:	4b0e      	ldr	r3, [pc, #56]	; (800e248 <vPortFree+0xb8>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	43db      	mvns	r3, r3
 800e212:	401a      	ands	r2, r3
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e218:	f7fe fedc 	bl	800cfd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	685a      	ldr	r2, [r3, #4]
 800e220:	4b0a      	ldr	r3, [pc, #40]	; (800e24c <vPortFree+0xbc>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4413      	add	r3, r2
 800e226:	4a09      	ldr	r2, [pc, #36]	; (800e24c <vPortFree+0xbc>)
 800e228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e22a:	6938      	ldr	r0, [r7, #16]
 800e22c:	f000 f874 	bl	800e318 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e230:	4b07      	ldr	r3, [pc, #28]	; (800e250 <vPortFree+0xc0>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	3301      	adds	r3, #1
 800e236:	4a06      	ldr	r2, [pc, #24]	; (800e250 <vPortFree+0xc0>)
 800e238:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e23a:	f7fe fed9 	bl	800cff0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e23e:	bf00      	nop
 800e240:	3718      	adds	r7, #24
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	20004614 	.word	0x20004614
 800e24c:	20004604 	.word	0x20004604
 800e250:	20004610 	.word	0x20004610

0800e254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e254:	b480      	push	{r7}
 800e256:	b085      	sub	sp, #20
 800e258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e25a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e25e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e260:	4b27      	ldr	r3, [pc, #156]	; (800e300 <prvHeapInit+0xac>)
 800e262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	f003 0307 	and.w	r3, r3, #7
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d00c      	beq.n	800e288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	3307      	adds	r3, #7
 800e272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f023 0307 	bic.w	r3, r3, #7
 800e27a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e27c:	68ba      	ldr	r2, [r7, #8]
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	1ad3      	subs	r3, r2, r3
 800e282:	4a1f      	ldr	r2, [pc, #124]	; (800e300 <prvHeapInit+0xac>)
 800e284:	4413      	add	r3, r2
 800e286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e28c:	4a1d      	ldr	r2, [pc, #116]	; (800e304 <prvHeapInit+0xb0>)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e292:	4b1c      	ldr	r3, [pc, #112]	; (800e304 <prvHeapInit+0xb0>)
 800e294:	2200      	movs	r2, #0
 800e296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	68ba      	ldr	r2, [r7, #8]
 800e29c:	4413      	add	r3, r2
 800e29e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e2a0:	2208      	movs	r2, #8
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	1a9b      	subs	r3, r3, r2
 800e2a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f023 0307 	bic.w	r3, r3, #7
 800e2ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	4a15      	ldr	r2, [pc, #84]	; (800e308 <prvHeapInit+0xb4>)
 800e2b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e2b6:	4b14      	ldr	r3, [pc, #80]	; (800e308 <prvHeapInit+0xb4>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e2be:	4b12      	ldr	r3, [pc, #72]	; (800e308 <prvHeapInit+0xb4>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	1ad2      	subs	r2, r2, r3
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e2d4:	4b0c      	ldr	r3, [pc, #48]	; (800e308 <prvHeapInit+0xb4>)
 800e2d6:	681a      	ldr	r2, [r3, #0]
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	4a0a      	ldr	r2, [pc, #40]	; (800e30c <prvHeapInit+0xb8>)
 800e2e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	4a09      	ldr	r2, [pc, #36]	; (800e310 <prvHeapInit+0xbc>)
 800e2ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e2ec:	4b09      	ldr	r3, [pc, #36]	; (800e314 <prvHeapInit+0xc0>)
 800e2ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e2f2:	601a      	str	r2, [r3, #0]
}
 800e2f4:	bf00      	nop
 800e2f6:	3714      	adds	r7, #20
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr
 800e300:	200009f8 	.word	0x200009f8
 800e304:	200045f8 	.word	0x200045f8
 800e308:	20004600 	.word	0x20004600
 800e30c:	20004608 	.word	0x20004608
 800e310:	20004604 	.word	0x20004604
 800e314:	20004614 	.word	0x20004614

0800e318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e318:	b480      	push	{r7}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e320:	4b28      	ldr	r3, [pc, #160]	; (800e3c4 <prvInsertBlockIntoFreeList+0xac>)
 800e322:	60fb      	str	r3, [r7, #12]
 800e324:	e002      	b.n	800e32c <prvInsertBlockIntoFreeList+0x14>
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	60fb      	str	r3, [r7, #12]
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	687a      	ldr	r2, [r7, #4]
 800e332:	429a      	cmp	r2, r3
 800e334:	d8f7      	bhi.n	800e326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	68ba      	ldr	r2, [r7, #8]
 800e340:	4413      	add	r3, r2
 800e342:	687a      	ldr	r2, [r7, #4]
 800e344:	429a      	cmp	r2, r3
 800e346:	d108      	bne.n	800e35a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	685a      	ldr	r2, [r3, #4]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	441a      	add	r2, r3
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	68ba      	ldr	r2, [r7, #8]
 800e364:	441a      	add	r2, r3
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d118      	bne.n	800e3a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	4b15      	ldr	r3, [pc, #84]	; (800e3c8 <prvInsertBlockIntoFreeList+0xb0>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	429a      	cmp	r2, r3
 800e378:	d00d      	beq.n	800e396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	685a      	ldr	r2, [r3, #4]
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	441a      	add	r2, r3
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	681a      	ldr	r2, [r3, #0]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	601a      	str	r2, [r3, #0]
 800e394:	e008      	b.n	800e3a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e396:	4b0c      	ldr	r3, [pc, #48]	; (800e3c8 <prvInsertBlockIntoFreeList+0xb0>)
 800e398:	681a      	ldr	r2, [r3, #0]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	601a      	str	r2, [r3, #0]
 800e39e:	e003      	b.n	800e3a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681a      	ldr	r2, [r3, #0]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e3a8:	68fa      	ldr	r2, [r7, #12]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d002      	beq.n	800e3b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3b6:	bf00      	nop
 800e3b8:	3714      	adds	r7, #20
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr
 800e3c2:	bf00      	nop
 800e3c4:	200045f8 	.word	0x200045f8
 800e3c8:	20004600 	.word	0x20004600

0800e3cc <__errno>:
 800e3cc:	4b01      	ldr	r3, [pc, #4]	; (800e3d4 <__errno+0x8>)
 800e3ce:	6818      	ldr	r0, [r3, #0]
 800e3d0:	4770      	bx	lr
 800e3d2:	bf00      	nop
 800e3d4:	20000034 	.word	0x20000034

0800e3d8 <__libc_init_array>:
 800e3d8:	b570      	push	{r4, r5, r6, lr}
 800e3da:	4d0d      	ldr	r5, [pc, #52]	; (800e410 <__libc_init_array+0x38>)
 800e3dc:	4c0d      	ldr	r4, [pc, #52]	; (800e414 <__libc_init_array+0x3c>)
 800e3de:	1b64      	subs	r4, r4, r5
 800e3e0:	10a4      	asrs	r4, r4, #2
 800e3e2:	2600      	movs	r6, #0
 800e3e4:	42a6      	cmp	r6, r4
 800e3e6:	d109      	bne.n	800e3fc <__libc_init_array+0x24>
 800e3e8:	4d0b      	ldr	r5, [pc, #44]	; (800e418 <__libc_init_array+0x40>)
 800e3ea:	4c0c      	ldr	r4, [pc, #48]	; (800e41c <__libc_init_array+0x44>)
 800e3ec:	f002 feb4 	bl	8011158 <_init>
 800e3f0:	1b64      	subs	r4, r4, r5
 800e3f2:	10a4      	asrs	r4, r4, #2
 800e3f4:	2600      	movs	r6, #0
 800e3f6:	42a6      	cmp	r6, r4
 800e3f8:	d105      	bne.n	800e406 <__libc_init_array+0x2e>
 800e3fa:	bd70      	pop	{r4, r5, r6, pc}
 800e3fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e400:	4798      	blx	r3
 800e402:	3601      	adds	r6, #1
 800e404:	e7ee      	b.n	800e3e4 <__libc_init_array+0xc>
 800e406:	f855 3b04 	ldr.w	r3, [r5], #4
 800e40a:	4798      	blx	r3
 800e40c:	3601      	adds	r6, #1
 800e40e:	e7f2      	b.n	800e3f6 <__libc_init_array+0x1e>
 800e410:	0801306c 	.word	0x0801306c
 800e414:	0801306c 	.word	0x0801306c
 800e418:	0801306c 	.word	0x0801306c
 800e41c:	08013070 	.word	0x08013070

0800e420 <memcpy>:
 800e420:	440a      	add	r2, r1
 800e422:	4291      	cmp	r1, r2
 800e424:	f100 33ff 	add.w	r3, r0, #4294967295
 800e428:	d100      	bne.n	800e42c <memcpy+0xc>
 800e42a:	4770      	bx	lr
 800e42c:	b510      	push	{r4, lr}
 800e42e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e432:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e436:	4291      	cmp	r1, r2
 800e438:	d1f9      	bne.n	800e42e <memcpy+0xe>
 800e43a:	bd10      	pop	{r4, pc}

0800e43c <memset>:
 800e43c:	4402      	add	r2, r0
 800e43e:	4603      	mov	r3, r0
 800e440:	4293      	cmp	r3, r2
 800e442:	d100      	bne.n	800e446 <memset+0xa>
 800e444:	4770      	bx	lr
 800e446:	f803 1b01 	strb.w	r1, [r3], #1
 800e44a:	e7f9      	b.n	800e440 <memset+0x4>

0800e44c <__cvt>:
 800e44c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e450:	ec55 4b10 	vmov	r4, r5, d0
 800e454:	2d00      	cmp	r5, #0
 800e456:	460e      	mov	r6, r1
 800e458:	4619      	mov	r1, r3
 800e45a:	462b      	mov	r3, r5
 800e45c:	bfbb      	ittet	lt
 800e45e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e462:	461d      	movlt	r5, r3
 800e464:	2300      	movge	r3, #0
 800e466:	232d      	movlt	r3, #45	; 0x2d
 800e468:	700b      	strb	r3, [r1, #0]
 800e46a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e46c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e470:	4691      	mov	r9, r2
 800e472:	f023 0820 	bic.w	r8, r3, #32
 800e476:	bfbc      	itt	lt
 800e478:	4622      	movlt	r2, r4
 800e47a:	4614      	movlt	r4, r2
 800e47c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e480:	d005      	beq.n	800e48e <__cvt+0x42>
 800e482:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e486:	d100      	bne.n	800e48a <__cvt+0x3e>
 800e488:	3601      	adds	r6, #1
 800e48a:	2102      	movs	r1, #2
 800e48c:	e000      	b.n	800e490 <__cvt+0x44>
 800e48e:	2103      	movs	r1, #3
 800e490:	ab03      	add	r3, sp, #12
 800e492:	9301      	str	r3, [sp, #4]
 800e494:	ab02      	add	r3, sp, #8
 800e496:	9300      	str	r3, [sp, #0]
 800e498:	ec45 4b10 	vmov	d0, r4, r5
 800e49c:	4653      	mov	r3, sl
 800e49e:	4632      	mov	r2, r6
 800e4a0:	f000 fcea 	bl	800ee78 <_dtoa_r>
 800e4a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e4a8:	4607      	mov	r7, r0
 800e4aa:	d102      	bne.n	800e4b2 <__cvt+0x66>
 800e4ac:	f019 0f01 	tst.w	r9, #1
 800e4b0:	d022      	beq.n	800e4f8 <__cvt+0xac>
 800e4b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e4b6:	eb07 0906 	add.w	r9, r7, r6
 800e4ba:	d110      	bne.n	800e4de <__cvt+0x92>
 800e4bc:	783b      	ldrb	r3, [r7, #0]
 800e4be:	2b30      	cmp	r3, #48	; 0x30
 800e4c0:	d10a      	bne.n	800e4d8 <__cvt+0x8c>
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	4629      	mov	r1, r5
 800e4ca:	f7f2 fb15 	bl	8000af8 <__aeabi_dcmpeq>
 800e4ce:	b918      	cbnz	r0, 800e4d8 <__cvt+0x8c>
 800e4d0:	f1c6 0601 	rsb	r6, r6, #1
 800e4d4:	f8ca 6000 	str.w	r6, [sl]
 800e4d8:	f8da 3000 	ldr.w	r3, [sl]
 800e4dc:	4499      	add	r9, r3
 800e4de:	2200      	movs	r2, #0
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	4629      	mov	r1, r5
 800e4e6:	f7f2 fb07 	bl	8000af8 <__aeabi_dcmpeq>
 800e4ea:	b108      	cbz	r0, 800e4f0 <__cvt+0xa4>
 800e4ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800e4f0:	2230      	movs	r2, #48	; 0x30
 800e4f2:	9b03      	ldr	r3, [sp, #12]
 800e4f4:	454b      	cmp	r3, r9
 800e4f6:	d307      	bcc.n	800e508 <__cvt+0xbc>
 800e4f8:	9b03      	ldr	r3, [sp, #12]
 800e4fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4fc:	1bdb      	subs	r3, r3, r7
 800e4fe:	4638      	mov	r0, r7
 800e500:	6013      	str	r3, [r2, #0]
 800e502:	b004      	add	sp, #16
 800e504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e508:	1c59      	adds	r1, r3, #1
 800e50a:	9103      	str	r1, [sp, #12]
 800e50c:	701a      	strb	r2, [r3, #0]
 800e50e:	e7f0      	b.n	800e4f2 <__cvt+0xa6>

0800e510 <__exponent>:
 800e510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e512:	4603      	mov	r3, r0
 800e514:	2900      	cmp	r1, #0
 800e516:	bfb8      	it	lt
 800e518:	4249      	neglt	r1, r1
 800e51a:	f803 2b02 	strb.w	r2, [r3], #2
 800e51e:	bfb4      	ite	lt
 800e520:	222d      	movlt	r2, #45	; 0x2d
 800e522:	222b      	movge	r2, #43	; 0x2b
 800e524:	2909      	cmp	r1, #9
 800e526:	7042      	strb	r2, [r0, #1]
 800e528:	dd2a      	ble.n	800e580 <__exponent+0x70>
 800e52a:	f10d 0407 	add.w	r4, sp, #7
 800e52e:	46a4      	mov	ip, r4
 800e530:	270a      	movs	r7, #10
 800e532:	46a6      	mov	lr, r4
 800e534:	460a      	mov	r2, r1
 800e536:	fb91 f6f7 	sdiv	r6, r1, r7
 800e53a:	fb07 1516 	mls	r5, r7, r6, r1
 800e53e:	3530      	adds	r5, #48	; 0x30
 800e540:	2a63      	cmp	r2, #99	; 0x63
 800e542:	f104 34ff 	add.w	r4, r4, #4294967295
 800e546:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e54a:	4631      	mov	r1, r6
 800e54c:	dcf1      	bgt.n	800e532 <__exponent+0x22>
 800e54e:	3130      	adds	r1, #48	; 0x30
 800e550:	f1ae 0502 	sub.w	r5, lr, #2
 800e554:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e558:	1c44      	adds	r4, r0, #1
 800e55a:	4629      	mov	r1, r5
 800e55c:	4561      	cmp	r1, ip
 800e55e:	d30a      	bcc.n	800e576 <__exponent+0x66>
 800e560:	f10d 0209 	add.w	r2, sp, #9
 800e564:	eba2 020e 	sub.w	r2, r2, lr
 800e568:	4565      	cmp	r5, ip
 800e56a:	bf88      	it	hi
 800e56c:	2200      	movhi	r2, #0
 800e56e:	4413      	add	r3, r2
 800e570:	1a18      	subs	r0, r3, r0
 800e572:	b003      	add	sp, #12
 800e574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e576:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e57a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e57e:	e7ed      	b.n	800e55c <__exponent+0x4c>
 800e580:	2330      	movs	r3, #48	; 0x30
 800e582:	3130      	adds	r1, #48	; 0x30
 800e584:	7083      	strb	r3, [r0, #2]
 800e586:	70c1      	strb	r1, [r0, #3]
 800e588:	1d03      	adds	r3, r0, #4
 800e58a:	e7f1      	b.n	800e570 <__exponent+0x60>

0800e58c <_printf_float>:
 800e58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e590:	ed2d 8b02 	vpush	{d8}
 800e594:	b08d      	sub	sp, #52	; 0x34
 800e596:	460c      	mov	r4, r1
 800e598:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e59c:	4616      	mov	r6, r2
 800e59e:	461f      	mov	r7, r3
 800e5a0:	4605      	mov	r5, r0
 800e5a2:	f001 fa55 	bl	800fa50 <_localeconv_r>
 800e5a6:	f8d0 a000 	ldr.w	sl, [r0]
 800e5aa:	4650      	mov	r0, sl
 800e5ac:	f7f1 fe22 	bl	80001f4 <strlen>
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	930a      	str	r3, [sp, #40]	; 0x28
 800e5b4:	6823      	ldr	r3, [r4, #0]
 800e5b6:	9305      	str	r3, [sp, #20]
 800e5b8:	f8d8 3000 	ldr.w	r3, [r8]
 800e5bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e5c0:	3307      	adds	r3, #7
 800e5c2:	f023 0307 	bic.w	r3, r3, #7
 800e5c6:	f103 0208 	add.w	r2, r3, #8
 800e5ca:	f8c8 2000 	str.w	r2, [r8]
 800e5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e5d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e5da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e5de:	9307      	str	r3, [sp, #28]
 800e5e0:	f8cd 8018 	str.w	r8, [sp, #24]
 800e5e4:	ee08 0a10 	vmov	s16, r0
 800e5e8:	4b9f      	ldr	r3, [pc, #636]	; (800e868 <_printf_float+0x2dc>)
 800e5ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e5f2:	f7f2 fab3 	bl	8000b5c <__aeabi_dcmpun>
 800e5f6:	bb88      	cbnz	r0, 800e65c <_printf_float+0xd0>
 800e5f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5fc:	4b9a      	ldr	r3, [pc, #616]	; (800e868 <_printf_float+0x2dc>)
 800e5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800e602:	f7f2 fa8d 	bl	8000b20 <__aeabi_dcmple>
 800e606:	bb48      	cbnz	r0, 800e65c <_printf_float+0xd0>
 800e608:	2200      	movs	r2, #0
 800e60a:	2300      	movs	r3, #0
 800e60c:	4640      	mov	r0, r8
 800e60e:	4649      	mov	r1, r9
 800e610:	f7f2 fa7c 	bl	8000b0c <__aeabi_dcmplt>
 800e614:	b110      	cbz	r0, 800e61c <_printf_float+0x90>
 800e616:	232d      	movs	r3, #45	; 0x2d
 800e618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e61c:	4b93      	ldr	r3, [pc, #588]	; (800e86c <_printf_float+0x2e0>)
 800e61e:	4894      	ldr	r0, [pc, #592]	; (800e870 <_printf_float+0x2e4>)
 800e620:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e624:	bf94      	ite	ls
 800e626:	4698      	movls	r8, r3
 800e628:	4680      	movhi	r8, r0
 800e62a:	2303      	movs	r3, #3
 800e62c:	6123      	str	r3, [r4, #16]
 800e62e:	9b05      	ldr	r3, [sp, #20]
 800e630:	f023 0204 	bic.w	r2, r3, #4
 800e634:	6022      	str	r2, [r4, #0]
 800e636:	f04f 0900 	mov.w	r9, #0
 800e63a:	9700      	str	r7, [sp, #0]
 800e63c:	4633      	mov	r3, r6
 800e63e:	aa0b      	add	r2, sp, #44	; 0x2c
 800e640:	4621      	mov	r1, r4
 800e642:	4628      	mov	r0, r5
 800e644:	f000 f9d8 	bl	800e9f8 <_printf_common>
 800e648:	3001      	adds	r0, #1
 800e64a:	f040 8090 	bne.w	800e76e <_printf_float+0x1e2>
 800e64e:	f04f 30ff 	mov.w	r0, #4294967295
 800e652:	b00d      	add	sp, #52	; 0x34
 800e654:	ecbd 8b02 	vpop	{d8}
 800e658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e65c:	4642      	mov	r2, r8
 800e65e:	464b      	mov	r3, r9
 800e660:	4640      	mov	r0, r8
 800e662:	4649      	mov	r1, r9
 800e664:	f7f2 fa7a 	bl	8000b5c <__aeabi_dcmpun>
 800e668:	b140      	cbz	r0, 800e67c <_printf_float+0xf0>
 800e66a:	464b      	mov	r3, r9
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	bfbc      	itt	lt
 800e670:	232d      	movlt	r3, #45	; 0x2d
 800e672:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e676:	487f      	ldr	r0, [pc, #508]	; (800e874 <_printf_float+0x2e8>)
 800e678:	4b7f      	ldr	r3, [pc, #508]	; (800e878 <_printf_float+0x2ec>)
 800e67a:	e7d1      	b.n	800e620 <_printf_float+0x94>
 800e67c:	6863      	ldr	r3, [r4, #4]
 800e67e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e682:	9206      	str	r2, [sp, #24]
 800e684:	1c5a      	adds	r2, r3, #1
 800e686:	d13f      	bne.n	800e708 <_printf_float+0x17c>
 800e688:	2306      	movs	r3, #6
 800e68a:	6063      	str	r3, [r4, #4]
 800e68c:	9b05      	ldr	r3, [sp, #20]
 800e68e:	6861      	ldr	r1, [r4, #4]
 800e690:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e694:	2300      	movs	r3, #0
 800e696:	9303      	str	r3, [sp, #12]
 800e698:	ab0a      	add	r3, sp, #40	; 0x28
 800e69a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e69e:	ab09      	add	r3, sp, #36	; 0x24
 800e6a0:	ec49 8b10 	vmov	d0, r8, r9
 800e6a4:	9300      	str	r3, [sp, #0]
 800e6a6:	6022      	str	r2, [r4, #0]
 800e6a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e6ac:	4628      	mov	r0, r5
 800e6ae:	f7ff fecd 	bl	800e44c <__cvt>
 800e6b2:	9b06      	ldr	r3, [sp, #24]
 800e6b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6b6:	2b47      	cmp	r3, #71	; 0x47
 800e6b8:	4680      	mov	r8, r0
 800e6ba:	d108      	bne.n	800e6ce <_printf_float+0x142>
 800e6bc:	1cc8      	adds	r0, r1, #3
 800e6be:	db02      	blt.n	800e6c6 <_printf_float+0x13a>
 800e6c0:	6863      	ldr	r3, [r4, #4]
 800e6c2:	4299      	cmp	r1, r3
 800e6c4:	dd41      	ble.n	800e74a <_printf_float+0x1be>
 800e6c6:	f1ab 0b02 	sub.w	fp, fp, #2
 800e6ca:	fa5f fb8b 	uxtb.w	fp, fp
 800e6ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e6d2:	d820      	bhi.n	800e716 <_printf_float+0x18a>
 800e6d4:	3901      	subs	r1, #1
 800e6d6:	465a      	mov	r2, fp
 800e6d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e6dc:	9109      	str	r1, [sp, #36]	; 0x24
 800e6de:	f7ff ff17 	bl	800e510 <__exponent>
 800e6e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6e4:	1813      	adds	r3, r2, r0
 800e6e6:	2a01      	cmp	r2, #1
 800e6e8:	4681      	mov	r9, r0
 800e6ea:	6123      	str	r3, [r4, #16]
 800e6ec:	dc02      	bgt.n	800e6f4 <_printf_float+0x168>
 800e6ee:	6822      	ldr	r2, [r4, #0]
 800e6f0:	07d2      	lsls	r2, r2, #31
 800e6f2:	d501      	bpl.n	800e6f8 <_printf_float+0x16c>
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	6123      	str	r3, [r4, #16]
 800e6f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d09c      	beq.n	800e63a <_printf_float+0xae>
 800e700:	232d      	movs	r3, #45	; 0x2d
 800e702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e706:	e798      	b.n	800e63a <_printf_float+0xae>
 800e708:	9a06      	ldr	r2, [sp, #24]
 800e70a:	2a47      	cmp	r2, #71	; 0x47
 800e70c:	d1be      	bne.n	800e68c <_printf_float+0x100>
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d1bc      	bne.n	800e68c <_printf_float+0x100>
 800e712:	2301      	movs	r3, #1
 800e714:	e7b9      	b.n	800e68a <_printf_float+0xfe>
 800e716:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e71a:	d118      	bne.n	800e74e <_printf_float+0x1c2>
 800e71c:	2900      	cmp	r1, #0
 800e71e:	6863      	ldr	r3, [r4, #4]
 800e720:	dd0b      	ble.n	800e73a <_printf_float+0x1ae>
 800e722:	6121      	str	r1, [r4, #16]
 800e724:	b913      	cbnz	r3, 800e72c <_printf_float+0x1a0>
 800e726:	6822      	ldr	r2, [r4, #0]
 800e728:	07d0      	lsls	r0, r2, #31
 800e72a:	d502      	bpl.n	800e732 <_printf_float+0x1a6>
 800e72c:	3301      	adds	r3, #1
 800e72e:	440b      	add	r3, r1
 800e730:	6123      	str	r3, [r4, #16]
 800e732:	65a1      	str	r1, [r4, #88]	; 0x58
 800e734:	f04f 0900 	mov.w	r9, #0
 800e738:	e7de      	b.n	800e6f8 <_printf_float+0x16c>
 800e73a:	b913      	cbnz	r3, 800e742 <_printf_float+0x1b6>
 800e73c:	6822      	ldr	r2, [r4, #0]
 800e73e:	07d2      	lsls	r2, r2, #31
 800e740:	d501      	bpl.n	800e746 <_printf_float+0x1ba>
 800e742:	3302      	adds	r3, #2
 800e744:	e7f4      	b.n	800e730 <_printf_float+0x1a4>
 800e746:	2301      	movs	r3, #1
 800e748:	e7f2      	b.n	800e730 <_printf_float+0x1a4>
 800e74a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e74e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e750:	4299      	cmp	r1, r3
 800e752:	db05      	blt.n	800e760 <_printf_float+0x1d4>
 800e754:	6823      	ldr	r3, [r4, #0]
 800e756:	6121      	str	r1, [r4, #16]
 800e758:	07d8      	lsls	r0, r3, #31
 800e75a:	d5ea      	bpl.n	800e732 <_printf_float+0x1a6>
 800e75c:	1c4b      	adds	r3, r1, #1
 800e75e:	e7e7      	b.n	800e730 <_printf_float+0x1a4>
 800e760:	2900      	cmp	r1, #0
 800e762:	bfd4      	ite	le
 800e764:	f1c1 0202 	rsble	r2, r1, #2
 800e768:	2201      	movgt	r2, #1
 800e76a:	4413      	add	r3, r2
 800e76c:	e7e0      	b.n	800e730 <_printf_float+0x1a4>
 800e76e:	6823      	ldr	r3, [r4, #0]
 800e770:	055a      	lsls	r2, r3, #21
 800e772:	d407      	bmi.n	800e784 <_printf_float+0x1f8>
 800e774:	6923      	ldr	r3, [r4, #16]
 800e776:	4642      	mov	r2, r8
 800e778:	4631      	mov	r1, r6
 800e77a:	4628      	mov	r0, r5
 800e77c:	47b8      	blx	r7
 800e77e:	3001      	adds	r0, #1
 800e780:	d12c      	bne.n	800e7dc <_printf_float+0x250>
 800e782:	e764      	b.n	800e64e <_printf_float+0xc2>
 800e784:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e788:	f240 80e0 	bls.w	800e94c <_printf_float+0x3c0>
 800e78c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e790:	2200      	movs	r2, #0
 800e792:	2300      	movs	r3, #0
 800e794:	f7f2 f9b0 	bl	8000af8 <__aeabi_dcmpeq>
 800e798:	2800      	cmp	r0, #0
 800e79a:	d034      	beq.n	800e806 <_printf_float+0x27a>
 800e79c:	4a37      	ldr	r2, [pc, #220]	; (800e87c <_printf_float+0x2f0>)
 800e79e:	2301      	movs	r3, #1
 800e7a0:	4631      	mov	r1, r6
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	47b8      	blx	r7
 800e7a6:	3001      	adds	r0, #1
 800e7a8:	f43f af51 	beq.w	800e64e <_printf_float+0xc2>
 800e7ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	db02      	blt.n	800e7ba <_printf_float+0x22e>
 800e7b4:	6823      	ldr	r3, [r4, #0]
 800e7b6:	07d8      	lsls	r0, r3, #31
 800e7b8:	d510      	bpl.n	800e7dc <_printf_float+0x250>
 800e7ba:	ee18 3a10 	vmov	r3, s16
 800e7be:	4652      	mov	r2, sl
 800e7c0:	4631      	mov	r1, r6
 800e7c2:	4628      	mov	r0, r5
 800e7c4:	47b8      	blx	r7
 800e7c6:	3001      	adds	r0, #1
 800e7c8:	f43f af41 	beq.w	800e64e <_printf_float+0xc2>
 800e7cc:	f04f 0800 	mov.w	r8, #0
 800e7d0:	f104 091a 	add.w	r9, r4, #26
 800e7d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7d6:	3b01      	subs	r3, #1
 800e7d8:	4543      	cmp	r3, r8
 800e7da:	dc09      	bgt.n	800e7f0 <_printf_float+0x264>
 800e7dc:	6823      	ldr	r3, [r4, #0]
 800e7de:	079b      	lsls	r3, r3, #30
 800e7e0:	f100 8105 	bmi.w	800e9ee <_printf_float+0x462>
 800e7e4:	68e0      	ldr	r0, [r4, #12]
 800e7e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7e8:	4298      	cmp	r0, r3
 800e7ea:	bfb8      	it	lt
 800e7ec:	4618      	movlt	r0, r3
 800e7ee:	e730      	b.n	800e652 <_printf_float+0xc6>
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	464a      	mov	r2, r9
 800e7f4:	4631      	mov	r1, r6
 800e7f6:	4628      	mov	r0, r5
 800e7f8:	47b8      	blx	r7
 800e7fa:	3001      	adds	r0, #1
 800e7fc:	f43f af27 	beq.w	800e64e <_printf_float+0xc2>
 800e800:	f108 0801 	add.w	r8, r8, #1
 800e804:	e7e6      	b.n	800e7d4 <_printf_float+0x248>
 800e806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e808:	2b00      	cmp	r3, #0
 800e80a:	dc39      	bgt.n	800e880 <_printf_float+0x2f4>
 800e80c:	4a1b      	ldr	r2, [pc, #108]	; (800e87c <_printf_float+0x2f0>)
 800e80e:	2301      	movs	r3, #1
 800e810:	4631      	mov	r1, r6
 800e812:	4628      	mov	r0, r5
 800e814:	47b8      	blx	r7
 800e816:	3001      	adds	r0, #1
 800e818:	f43f af19 	beq.w	800e64e <_printf_float+0xc2>
 800e81c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e820:	4313      	orrs	r3, r2
 800e822:	d102      	bne.n	800e82a <_printf_float+0x29e>
 800e824:	6823      	ldr	r3, [r4, #0]
 800e826:	07d9      	lsls	r1, r3, #31
 800e828:	d5d8      	bpl.n	800e7dc <_printf_float+0x250>
 800e82a:	ee18 3a10 	vmov	r3, s16
 800e82e:	4652      	mov	r2, sl
 800e830:	4631      	mov	r1, r6
 800e832:	4628      	mov	r0, r5
 800e834:	47b8      	blx	r7
 800e836:	3001      	adds	r0, #1
 800e838:	f43f af09 	beq.w	800e64e <_printf_float+0xc2>
 800e83c:	f04f 0900 	mov.w	r9, #0
 800e840:	f104 0a1a 	add.w	sl, r4, #26
 800e844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e846:	425b      	negs	r3, r3
 800e848:	454b      	cmp	r3, r9
 800e84a:	dc01      	bgt.n	800e850 <_printf_float+0x2c4>
 800e84c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e84e:	e792      	b.n	800e776 <_printf_float+0x1ea>
 800e850:	2301      	movs	r3, #1
 800e852:	4652      	mov	r2, sl
 800e854:	4631      	mov	r1, r6
 800e856:	4628      	mov	r0, r5
 800e858:	47b8      	blx	r7
 800e85a:	3001      	adds	r0, #1
 800e85c:	f43f aef7 	beq.w	800e64e <_printf_float+0xc2>
 800e860:	f109 0901 	add.w	r9, r9, #1
 800e864:	e7ee      	b.n	800e844 <_printf_float+0x2b8>
 800e866:	bf00      	nop
 800e868:	7fefffff 	.word	0x7fefffff
 800e86c:	08012c84 	.word	0x08012c84
 800e870:	08012c88 	.word	0x08012c88
 800e874:	08012c90 	.word	0x08012c90
 800e878:	08012c8c 	.word	0x08012c8c
 800e87c:	08012c94 	.word	0x08012c94
 800e880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e882:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e884:	429a      	cmp	r2, r3
 800e886:	bfa8      	it	ge
 800e888:	461a      	movge	r2, r3
 800e88a:	2a00      	cmp	r2, #0
 800e88c:	4691      	mov	r9, r2
 800e88e:	dc37      	bgt.n	800e900 <_printf_float+0x374>
 800e890:	f04f 0b00 	mov.w	fp, #0
 800e894:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e898:	f104 021a 	add.w	r2, r4, #26
 800e89c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e89e:	9305      	str	r3, [sp, #20]
 800e8a0:	eba3 0309 	sub.w	r3, r3, r9
 800e8a4:	455b      	cmp	r3, fp
 800e8a6:	dc33      	bgt.n	800e910 <_printf_float+0x384>
 800e8a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	db3b      	blt.n	800e928 <_printf_float+0x39c>
 800e8b0:	6823      	ldr	r3, [r4, #0]
 800e8b2:	07da      	lsls	r2, r3, #31
 800e8b4:	d438      	bmi.n	800e928 <_printf_float+0x39c>
 800e8b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8b8:	9b05      	ldr	r3, [sp, #20]
 800e8ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e8bc:	1ad3      	subs	r3, r2, r3
 800e8be:	eba2 0901 	sub.w	r9, r2, r1
 800e8c2:	4599      	cmp	r9, r3
 800e8c4:	bfa8      	it	ge
 800e8c6:	4699      	movge	r9, r3
 800e8c8:	f1b9 0f00 	cmp.w	r9, #0
 800e8cc:	dc35      	bgt.n	800e93a <_printf_float+0x3ae>
 800e8ce:	f04f 0800 	mov.w	r8, #0
 800e8d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e8d6:	f104 0a1a 	add.w	sl, r4, #26
 800e8da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e8de:	1a9b      	subs	r3, r3, r2
 800e8e0:	eba3 0309 	sub.w	r3, r3, r9
 800e8e4:	4543      	cmp	r3, r8
 800e8e6:	f77f af79 	ble.w	800e7dc <_printf_float+0x250>
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	4652      	mov	r2, sl
 800e8ee:	4631      	mov	r1, r6
 800e8f0:	4628      	mov	r0, r5
 800e8f2:	47b8      	blx	r7
 800e8f4:	3001      	adds	r0, #1
 800e8f6:	f43f aeaa 	beq.w	800e64e <_printf_float+0xc2>
 800e8fa:	f108 0801 	add.w	r8, r8, #1
 800e8fe:	e7ec      	b.n	800e8da <_printf_float+0x34e>
 800e900:	4613      	mov	r3, r2
 800e902:	4631      	mov	r1, r6
 800e904:	4642      	mov	r2, r8
 800e906:	4628      	mov	r0, r5
 800e908:	47b8      	blx	r7
 800e90a:	3001      	adds	r0, #1
 800e90c:	d1c0      	bne.n	800e890 <_printf_float+0x304>
 800e90e:	e69e      	b.n	800e64e <_printf_float+0xc2>
 800e910:	2301      	movs	r3, #1
 800e912:	4631      	mov	r1, r6
 800e914:	4628      	mov	r0, r5
 800e916:	9205      	str	r2, [sp, #20]
 800e918:	47b8      	blx	r7
 800e91a:	3001      	adds	r0, #1
 800e91c:	f43f ae97 	beq.w	800e64e <_printf_float+0xc2>
 800e920:	9a05      	ldr	r2, [sp, #20]
 800e922:	f10b 0b01 	add.w	fp, fp, #1
 800e926:	e7b9      	b.n	800e89c <_printf_float+0x310>
 800e928:	ee18 3a10 	vmov	r3, s16
 800e92c:	4652      	mov	r2, sl
 800e92e:	4631      	mov	r1, r6
 800e930:	4628      	mov	r0, r5
 800e932:	47b8      	blx	r7
 800e934:	3001      	adds	r0, #1
 800e936:	d1be      	bne.n	800e8b6 <_printf_float+0x32a>
 800e938:	e689      	b.n	800e64e <_printf_float+0xc2>
 800e93a:	9a05      	ldr	r2, [sp, #20]
 800e93c:	464b      	mov	r3, r9
 800e93e:	4442      	add	r2, r8
 800e940:	4631      	mov	r1, r6
 800e942:	4628      	mov	r0, r5
 800e944:	47b8      	blx	r7
 800e946:	3001      	adds	r0, #1
 800e948:	d1c1      	bne.n	800e8ce <_printf_float+0x342>
 800e94a:	e680      	b.n	800e64e <_printf_float+0xc2>
 800e94c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e94e:	2a01      	cmp	r2, #1
 800e950:	dc01      	bgt.n	800e956 <_printf_float+0x3ca>
 800e952:	07db      	lsls	r3, r3, #31
 800e954:	d538      	bpl.n	800e9c8 <_printf_float+0x43c>
 800e956:	2301      	movs	r3, #1
 800e958:	4642      	mov	r2, r8
 800e95a:	4631      	mov	r1, r6
 800e95c:	4628      	mov	r0, r5
 800e95e:	47b8      	blx	r7
 800e960:	3001      	adds	r0, #1
 800e962:	f43f ae74 	beq.w	800e64e <_printf_float+0xc2>
 800e966:	ee18 3a10 	vmov	r3, s16
 800e96a:	4652      	mov	r2, sl
 800e96c:	4631      	mov	r1, r6
 800e96e:	4628      	mov	r0, r5
 800e970:	47b8      	blx	r7
 800e972:	3001      	adds	r0, #1
 800e974:	f43f ae6b 	beq.w	800e64e <_printf_float+0xc2>
 800e978:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e97c:	2200      	movs	r2, #0
 800e97e:	2300      	movs	r3, #0
 800e980:	f7f2 f8ba 	bl	8000af8 <__aeabi_dcmpeq>
 800e984:	b9d8      	cbnz	r0, 800e9be <_printf_float+0x432>
 800e986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e988:	f108 0201 	add.w	r2, r8, #1
 800e98c:	3b01      	subs	r3, #1
 800e98e:	4631      	mov	r1, r6
 800e990:	4628      	mov	r0, r5
 800e992:	47b8      	blx	r7
 800e994:	3001      	adds	r0, #1
 800e996:	d10e      	bne.n	800e9b6 <_printf_float+0x42a>
 800e998:	e659      	b.n	800e64e <_printf_float+0xc2>
 800e99a:	2301      	movs	r3, #1
 800e99c:	4652      	mov	r2, sl
 800e99e:	4631      	mov	r1, r6
 800e9a0:	4628      	mov	r0, r5
 800e9a2:	47b8      	blx	r7
 800e9a4:	3001      	adds	r0, #1
 800e9a6:	f43f ae52 	beq.w	800e64e <_printf_float+0xc2>
 800e9aa:	f108 0801 	add.w	r8, r8, #1
 800e9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	4543      	cmp	r3, r8
 800e9b4:	dcf1      	bgt.n	800e99a <_printf_float+0x40e>
 800e9b6:	464b      	mov	r3, r9
 800e9b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e9bc:	e6dc      	b.n	800e778 <_printf_float+0x1ec>
 800e9be:	f04f 0800 	mov.w	r8, #0
 800e9c2:	f104 0a1a 	add.w	sl, r4, #26
 800e9c6:	e7f2      	b.n	800e9ae <_printf_float+0x422>
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	4642      	mov	r2, r8
 800e9cc:	e7df      	b.n	800e98e <_printf_float+0x402>
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	464a      	mov	r2, r9
 800e9d2:	4631      	mov	r1, r6
 800e9d4:	4628      	mov	r0, r5
 800e9d6:	47b8      	blx	r7
 800e9d8:	3001      	adds	r0, #1
 800e9da:	f43f ae38 	beq.w	800e64e <_printf_float+0xc2>
 800e9de:	f108 0801 	add.w	r8, r8, #1
 800e9e2:	68e3      	ldr	r3, [r4, #12]
 800e9e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9e6:	1a5b      	subs	r3, r3, r1
 800e9e8:	4543      	cmp	r3, r8
 800e9ea:	dcf0      	bgt.n	800e9ce <_printf_float+0x442>
 800e9ec:	e6fa      	b.n	800e7e4 <_printf_float+0x258>
 800e9ee:	f04f 0800 	mov.w	r8, #0
 800e9f2:	f104 0919 	add.w	r9, r4, #25
 800e9f6:	e7f4      	b.n	800e9e2 <_printf_float+0x456>

0800e9f8 <_printf_common>:
 800e9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9fc:	4616      	mov	r6, r2
 800e9fe:	4699      	mov	r9, r3
 800ea00:	688a      	ldr	r2, [r1, #8]
 800ea02:	690b      	ldr	r3, [r1, #16]
 800ea04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	bfb8      	it	lt
 800ea0c:	4613      	movlt	r3, r2
 800ea0e:	6033      	str	r3, [r6, #0]
 800ea10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ea14:	4607      	mov	r7, r0
 800ea16:	460c      	mov	r4, r1
 800ea18:	b10a      	cbz	r2, 800ea1e <_printf_common+0x26>
 800ea1a:	3301      	adds	r3, #1
 800ea1c:	6033      	str	r3, [r6, #0]
 800ea1e:	6823      	ldr	r3, [r4, #0]
 800ea20:	0699      	lsls	r1, r3, #26
 800ea22:	bf42      	ittt	mi
 800ea24:	6833      	ldrmi	r3, [r6, #0]
 800ea26:	3302      	addmi	r3, #2
 800ea28:	6033      	strmi	r3, [r6, #0]
 800ea2a:	6825      	ldr	r5, [r4, #0]
 800ea2c:	f015 0506 	ands.w	r5, r5, #6
 800ea30:	d106      	bne.n	800ea40 <_printf_common+0x48>
 800ea32:	f104 0a19 	add.w	sl, r4, #25
 800ea36:	68e3      	ldr	r3, [r4, #12]
 800ea38:	6832      	ldr	r2, [r6, #0]
 800ea3a:	1a9b      	subs	r3, r3, r2
 800ea3c:	42ab      	cmp	r3, r5
 800ea3e:	dc26      	bgt.n	800ea8e <_printf_common+0x96>
 800ea40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ea44:	1e13      	subs	r3, r2, #0
 800ea46:	6822      	ldr	r2, [r4, #0]
 800ea48:	bf18      	it	ne
 800ea4a:	2301      	movne	r3, #1
 800ea4c:	0692      	lsls	r2, r2, #26
 800ea4e:	d42b      	bmi.n	800eaa8 <_printf_common+0xb0>
 800ea50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea54:	4649      	mov	r1, r9
 800ea56:	4638      	mov	r0, r7
 800ea58:	47c0      	blx	r8
 800ea5a:	3001      	adds	r0, #1
 800ea5c:	d01e      	beq.n	800ea9c <_printf_common+0xa4>
 800ea5e:	6823      	ldr	r3, [r4, #0]
 800ea60:	68e5      	ldr	r5, [r4, #12]
 800ea62:	6832      	ldr	r2, [r6, #0]
 800ea64:	f003 0306 	and.w	r3, r3, #6
 800ea68:	2b04      	cmp	r3, #4
 800ea6a:	bf08      	it	eq
 800ea6c:	1aad      	subeq	r5, r5, r2
 800ea6e:	68a3      	ldr	r3, [r4, #8]
 800ea70:	6922      	ldr	r2, [r4, #16]
 800ea72:	bf0c      	ite	eq
 800ea74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea78:	2500      	movne	r5, #0
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	bfc4      	itt	gt
 800ea7e:	1a9b      	subgt	r3, r3, r2
 800ea80:	18ed      	addgt	r5, r5, r3
 800ea82:	2600      	movs	r6, #0
 800ea84:	341a      	adds	r4, #26
 800ea86:	42b5      	cmp	r5, r6
 800ea88:	d11a      	bne.n	800eac0 <_printf_common+0xc8>
 800ea8a:	2000      	movs	r0, #0
 800ea8c:	e008      	b.n	800eaa0 <_printf_common+0xa8>
 800ea8e:	2301      	movs	r3, #1
 800ea90:	4652      	mov	r2, sl
 800ea92:	4649      	mov	r1, r9
 800ea94:	4638      	mov	r0, r7
 800ea96:	47c0      	blx	r8
 800ea98:	3001      	adds	r0, #1
 800ea9a:	d103      	bne.n	800eaa4 <_printf_common+0xac>
 800ea9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eaa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaa4:	3501      	adds	r5, #1
 800eaa6:	e7c6      	b.n	800ea36 <_printf_common+0x3e>
 800eaa8:	18e1      	adds	r1, r4, r3
 800eaaa:	1c5a      	adds	r2, r3, #1
 800eaac:	2030      	movs	r0, #48	; 0x30
 800eaae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eab2:	4422      	add	r2, r4
 800eab4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eab8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eabc:	3302      	adds	r3, #2
 800eabe:	e7c7      	b.n	800ea50 <_printf_common+0x58>
 800eac0:	2301      	movs	r3, #1
 800eac2:	4622      	mov	r2, r4
 800eac4:	4649      	mov	r1, r9
 800eac6:	4638      	mov	r0, r7
 800eac8:	47c0      	blx	r8
 800eaca:	3001      	adds	r0, #1
 800eacc:	d0e6      	beq.n	800ea9c <_printf_common+0xa4>
 800eace:	3601      	adds	r6, #1
 800ead0:	e7d9      	b.n	800ea86 <_printf_common+0x8e>
	...

0800ead4 <_printf_i>:
 800ead4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ead8:	460c      	mov	r4, r1
 800eada:	4691      	mov	r9, r2
 800eadc:	7e27      	ldrb	r7, [r4, #24]
 800eade:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eae0:	2f78      	cmp	r7, #120	; 0x78
 800eae2:	4680      	mov	r8, r0
 800eae4:	469a      	mov	sl, r3
 800eae6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eaea:	d807      	bhi.n	800eafc <_printf_i+0x28>
 800eaec:	2f62      	cmp	r7, #98	; 0x62
 800eaee:	d80a      	bhi.n	800eb06 <_printf_i+0x32>
 800eaf0:	2f00      	cmp	r7, #0
 800eaf2:	f000 80d8 	beq.w	800eca6 <_printf_i+0x1d2>
 800eaf6:	2f58      	cmp	r7, #88	; 0x58
 800eaf8:	f000 80a3 	beq.w	800ec42 <_printf_i+0x16e>
 800eafc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eb00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eb04:	e03a      	b.n	800eb7c <_printf_i+0xa8>
 800eb06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eb0a:	2b15      	cmp	r3, #21
 800eb0c:	d8f6      	bhi.n	800eafc <_printf_i+0x28>
 800eb0e:	a001      	add	r0, pc, #4	; (adr r0, 800eb14 <_printf_i+0x40>)
 800eb10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800eb14:	0800eb6d 	.word	0x0800eb6d
 800eb18:	0800eb81 	.word	0x0800eb81
 800eb1c:	0800eafd 	.word	0x0800eafd
 800eb20:	0800eafd 	.word	0x0800eafd
 800eb24:	0800eafd 	.word	0x0800eafd
 800eb28:	0800eafd 	.word	0x0800eafd
 800eb2c:	0800eb81 	.word	0x0800eb81
 800eb30:	0800eafd 	.word	0x0800eafd
 800eb34:	0800eafd 	.word	0x0800eafd
 800eb38:	0800eafd 	.word	0x0800eafd
 800eb3c:	0800eafd 	.word	0x0800eafd
 800eb40:	0800ec8d 	.word	0x0800ec8d
 800eb44:	0800ebb1 	.word	0x0800ebb1
 800eb48:	0800ec6f 	.word	0x0800ec6f
 800eb4c:	0800eafd 	.word	0x0800eafd
 800eb50:	0800eafd 	.word	0x0800eafd
 800eb54:	0800ecaf 	.word	0x0800ecaf
 800eb58:	0800eafd 	.word	0x0800eafd
 800eb5c:	0800ebb1 	.word	0x0800ebb1
 800eb60:	0800eafd 	.word	0x0800eafd
 800eb64:	0800eafd 	.word	0x0800eafd
 800eb68:	0800ec77 	.word	0x0800ec77
 800eb6c:	680b      	ldr	r3, [r1, #0]
 800eb6e:	1d1a      	adds	r2, r3, #4
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	600a      	str	r2, [r1, #0]
 800eb74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eb78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	e0a3      	b.n	800ecc8 <_printf_i+0x1f4>
 800eb80:	6825      	ldr	r5, [r4, #0]
 800eb82:	6808      	ldr	r0, [r1, #0]
 800eb84:	062e      	lsls	r6, r5, #24
 800eb86:	f100 0304 	add.w	r3, r0, #4
 800eb8a:	d50a      	bpl.n	800eba2 <_printf_i+0xce>
 800eb8c:	6805      	ldr	r5, [r0, #0]
 800eb8e:	600b      	str	r3, [r1, #0]
 800eb90:	2d00      	cmp	r5, #0
 800eb92:	da03      	bge.n	800eb9c <_printf_i+0xc8>
 800eb94:	232d      	movs	r3, #45	; 0x2d
 800eb96:	426d      	negs	r5, r5
 800eb98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb9c:	485e      	ldr	r0, [pc, #376]	; (800ed18 <_printf_i+0x244>)
 800eb9e:	230a      	movs	r3, #10
 800eba0:	e019      	b.n	800ebd6 <_printf_i+0x102>
 800eba2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800eba6:	6805      	ldr	r5, [r0, #0]
 800eba8:	600b      	str	r3, [r1, #0]
 800ebaa:	bf18      	it	ne
 800ebac:	b22d      	sxthne	r5, r5
 800ebae:	e7ef      	b.n	800eb90 <_printf_i+0xbc>
 800ebb0:	680b      	ldr	r3, [r1, #0]
 800ebb2:	6825      	ldr	r5, [r4, #0]
 800ebb4:	1d18      	adds	r0, r3, #4
 800ebb6:	6008      	str	r0, [r1, #0]
 800ebb8:	0628      	lsls	r0, r5, #24
 800ebba:	d501      	bpl.n	800ebc0 <_printf_i+0xec>
 800ebbc:	681d      	ldr	r5, [r3, #0]
 800ebbe:	e002      	b.n	800ebc6 <_printf_i+0xf2>
 800ebc0:	0669      	lsls	r1, r5, #25
 800ebc2:	d5fb      	bpl.n	800ebbc <_printf_i+0xe8>
 800ebc4:	881d      	ldrh	r5, [r3, #0]
 800ebc6:	4854      	ldr	r0, [pc, #336]	; (800ed18 <_printf_i+0x244>)
 800ebc8:	2f6f      	cmp	r7, #111	; 0x6f
 800ebca:	bf0c      	ite	eq
 800ebcc:	2308      	moveq	r3, #8
 800ebce:	230a      	movne	r3, #10
 800ebd0:	2100      	movs	r1, #0
 800ebd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ebd6:	6866      	ldr	r6, [r4, #4]
 800ebd8:	60a6      	str	r6, [r4, #8]
 800ebda:	2e00      	cmp	r6, #0
 800ebdc:	bfa2      	ittt	ge
 800ebde:	6821      	ldrge	r1, [r4, #0]
 800ebe0:	f021 0104 	bicge.w	r1, r1, #4
 800ebe4:	6021      	strge	r1, [r4, #0]
 800ebe6:	b90d      	cbnz	r5, 800ebec <_printf_i+0x118>
 800ebe8:	2e00      	cmp	r6, #0
 800ebea:	d04d      	beq.n	800ec88 <_printf_i+0x1b4>
 800ebec:	4616      	mov	r6, r2
 800ebee:	fbb5 f1f3 	udiv	r1, r5, r3
 800ebf2:	fb03 5711 	mls	r7, r3, r1, r5
 800ebf6:	5dc7      	ldrb	r7, [r0, r7]
 800ebf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ebfc:	462f      	mov	r7, r5
 800ebfe:	42bb      	cmp	r3, r7
 800ec00:	460d      	mov	r5, r1
 800ec02:	d9f4      	bls.n	800ebee <_printf_i+0x11a>
 800ec04:	2b08      	cmp	r3, #8
 800ec06:	d10b      	bne.n	800ec20 <_printf_i+0x14c>
 800ec08:	6823      	ldr	r3, [r4, #0]
 800ec0a:	07df      	lsls	r7, r3, #31
 800ec0c:	d508      	bpl.n	800ec20 <_printf_i+0x14c>
 800ec0e:	6923      	ldr	r3, [r4, #16]
 800ec10:	6861      	ldr	r1, [r4, #4]
 800ec12:	4299      	cmp	r1, r3
 800ec14:	bfde      	ittt	le
 800ec16:	2330      	movle	r3, #48	; 0x30
 800ec18:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ec20:	1b92      	subs	r2, r2, r6
 800ec22:	6122      	str	r2, [r4, #16]
 800ec24:	f8cd a000 	str.w	sl, [sp]
 800ec28:	464b      	mov	r3, r9
 800ec2a:	aa03      	add	r2, sp, #12
 800ec2c:	4621      	mov	r1, r4
 800ec2e:	4640      	mov	r0, r8
 800ec30:	f7ff fee2 	bl	800e9f8 <_printf_common>
 800ec34:	3001      	adds	r0, #1
 800ec36:	d14c      	bne.n	800ecd2 <_printf_i+0x1fe>
 800ec38:	f04f 30ff 	mov.w	r0, #4294967295
 800ec3c:	b004      	add	sp, #16
 800ec3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec42:	4835      	ldr	r0, [pc, #212]	; (800ed18 <_printf_i+0x244>)
 800ec44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ec48:	6823      	ldr	r3, [r4, #0]
 800ec4a:	680e      	ldr	r6, [r1, #0]
 800ec4c:	061f      	lsls	r7, r3, #24
 800ec4e:	f856 5b04 	ldr.w	r5, [r6], #4
 800ec52:	600e      	str	r6, [r1, #0]
 800ec54:	d514      	bpl.n	800ec80 <_printf_i+0x1ac>
 800ec56:	07d9      	lsls	r1, r3, #31
 800ec58:	bf44      	itt	mi
 800ec5a:	f043 0320 	orrmi.w	r3, r3, #32
 800ec5e:	6023      	strmi	r3, [r4, #0]
 800ec60:	b91d      	cbnz	r5, 800ec6a <_printf_i+0x196>
 800ec62:	6823      	ldr	r3, [r4, #0]
 800ec64:	f023 0320 	bic.w	r3, r3, #32
 800ec68:	6023      	str	r3, [r4, #0]
 800ec6a:	2310      	movs	r3, #16
 800ec6c:	e7b0      	b.n	800ebd0 <_printf_i+0xfc>
 800ec6e:	6823      	ldr	r3, [r4, #0]
 800ec70:	f043 0320 	orr.w	r3, r3, #32
 800ec74:	6023      	str	r3, [r4, #0]
 800ec76:	2378      	movs	r3, #120	; 0x78
 800ec78:	4828      	ldr	r0, [pc, #160]	; (800ed1c <_printf_i+0x248>)
 800ec7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ec7e:	e7e3      	b.n	800ec48 <_printf_i+0x174>
 800ec80:	065e      	lsls	r6, r3, #25
 800ec82:	bf48      	it	mi
 800ec84:	b2ad      	uxthmi	r5, r5
 800ec86:	e7e6      	b.n	800ec56 <_printf_i+0x182>
 800ec88:	4616      	mov	r6, r2
 800ec8a:	e7bb      	b.n	800ec04 <_printf_i+0x130>
 800ec8c:	680b      	ldr	r3, [r1, #0]
 800ec8e:	6826      	ldr	r6, [r4, #0]
 800ec90:	6960      	ldr	r0, [r4, #20]
 800ec92:	1d1d      	adds	r5, r3, #4
 800ec94:	600d      	str	r5, [r1, #0]
 800ec96:	0635      	lsls	r5, r6, #24
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	d501      	bpl.n	800eca0 <_printf_i+0x1cc>
 800ec9c:	6018      	str	r0, [r3, #0]
 800ec9e:	e002      	b.n	800eca6 <_printf_i+0x1d2>
 800eca0:	0671      	lsls	r1, r6, #25
 800eca2:	d5fb      	bpl.n	800ec9c <_printf_i+0x1c8>
 800eca4:	8018      	strh	r0, [r3, #0]
 800eca6:	2300      	movs	r3, #0
 800eca8:	6123      	str	r3, [r4, #16]
 800ecaa:	4616      	mov	r6, r2
 800ecac:	e7ba      	b.n	800ec24 <_printf_i+0x150>
 800ecae:	680b      	ldr	r3, [r1, #0]
 800ecb0:	1d1a      	adds	r2, r3, #4
 800ecb2:	600a      	str	r2, [r1, #0]
 800ecb4:	681e      	ldr	r6, [r3, #0]
 800ecb6:	6862      	ldr	r2, [r4, #4]
 800ecb8:	2100      	movs	r1, #0
 800ecba:	4630      	mov	r0, r6
 800ecbc:	f7f1 faa8 	bl	8000210 <memchr>
 800ecc0:	b108      	cbz	r0, 800ecc6 <_printf_i+0x1f2>
 800ecc2:	1b80      	subs	r0, r0, r6
 800ecc4:	6060      	str	r0, [r4, #4]
 800ecc6:	6863      	ldr	r3, [r4, #4]
 800ecc8:	6123      	str	r3, [r4, #16]
 800ecca:	2300      	movs	r3, #0
 800eccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ecd0:	e7a8      	b.n	800ec24 <_printf_i+0x150>
 800ecd2:	6923      	ldr	r3, [r4, #16]
 800ecd4:	4632      	mov	r2, r6
 800ecd6:	4649      	mov	r1, r9
 800ecd8:	4640      	mov	r0, r8
 800ecda:	47d0      	blx	sl
 800ecdc:	3001      	adds	r0, #1
 800ecde:	d0ab      	beq.n	800ec38 <_printf_i+0x164>
 800ece0:	6823      	ldr	r3, [r4, #0]
 800ece2:	079b      	lsls	r3, r3, #30
 800ece4:	d413      	bmi.n	800ed0e <_printf_i+0x23a>
 800ece6:	68e0      	ldr	r0, [r4, #12]
 800ece8:	9b03      	ldr	r3, [sp, #12]
 800ecea:	4298      	cmp	r0, r3
 800ecec:	bfb8      	it	lt
 800ecee:	4618      	movlt	r0, r3
 800ecf0:	e7a4      	b.n	800ec3c <_printf_i+0x168>
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	4632      	mov	r2, r6
 800ecf6:	4649      	mov	r1, r9
 800ecf8:	4640      	mov	r0, r8
 800ecfa:	47d0      	blx	sl
 800ecfc:	3001      	adds	r0, #1
 800ecfe:	d09b      	beq.n	800ec38 <_printf_i+0x164>
 800ed00:	3501      	adds	r5, #1
 800ed02:	68e3      	ldr	r3, [r4, #12]
 800ed04:	9903      	ldr	r1, [sp, #12]
 800ed06:	1a5b      	subs	r3, r3, r1
 800ed08:	42ab      	cmp	r3, r5
 800ed0a:	dcf2      	bgt.n	800ecf2 <_printf_i+0x21e>
 800ed0c:	e7eb      	b.n	800ece6 <_printf_i+0x212>
 800ed0e:	2500      	movs	r5, #0
 800ed10:	f104 0619 	add.w	r6, r4, #25
 800ed14:	e7f5      	b.n	800ed02 <_printf_i+0x22e>
 800ed16:	bf00      	nop
 800ed18:	08012c96 	.word	0x08012c96
 800ed1c:	08012ca7 	.word	0x08012ca7

0800ed20 <siprintf>:
 800ed20:	b40e      	push	{r1, r2, r3}
 800ed22:	b500      	push	{lr}
 800ed24:	b09c      	sub	sp, #112	; 0x70
 800ed26:	ab1d      	add	r3, sp, #116	; 0x74
 800ed28:	9002      	str	r0, [sp, #8]
 800ed2a:	9006      	str	r0, [sp, #24]
 800ed2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ed30:	4809      	ldr	r0, [pc, #36]	; (800ed58 <siprintf+0x38>)
 800ed32:	9107      	str	r1, [sp, #28]
 800ed34:	9104      	str	r1, [sp, #16]
 800ed36:	4909      	ldr	r1, [pc, #36]	; (800ed5c <siprintf+0x3c>)
 800ed38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed3c:	9105      	str	r1, [sp, #20]
 800ed3e:	6800      	ldr	r0, [r0, #0]
 800ed40:	9301      	str	r3, [sp, #4]
 800ed42:	a902      	add	r1, sp, #8
 800ed44:	f001 fb24 	bl	8010390 <_svfiprintf_r>
 800ed48:	9b02      	ldr	r3, [sp, #8]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	701a      	strb	r2, [r3, #0]
 800ed4e:	b01c      	add	sp, #112	; 0x70
 800ed50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed54:	b003      	add	sp, #12
 800ed56:	4770      	bx	lr
 800ed58:	20000034 	.word	0x20000034
 800ed5c:	ffff0208 	.word	0xffff0208

0800ed60 <quorem>:
 800ed60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed64:	6903      	ldr	r3, [r0, #16]
 800ed66:	690c      	ldr	r4, [r1, #16]
 800ed68:	42a3      	cmp	r3, r4
 800ed6a:	4607      	mov	r7, r0
 800ed6c:	f2c0 8081 	blt.w	800ee72 <quorem+0x112>
 800ed70:	3c01      	subs	r4, #1
 800ed72:	f101 0814 	add.w	r8, r1, #20
 800ed76:	f100 0514 	add.w	r5, r0, #20
 800ed7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed7e:	9301      	str	r3, [sp, #4]
 800ed80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ed84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed88:	3301      	adds	r3, #1
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ed90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ed94:	fbb2 f6f3 	udiv	r6, r2, r3
 800ed98:	d331      	bcc.n	800edfe <quorem+0x9e>
 800ed9a:	f04f 0e00 	mov.w	lr, #0
 800ed9e:	4640      	mov	r0, r8
 800eda0:	46ac      	mov	ip, r5
 800eda2:	46f2      	mov	sl, lr
 800eda4:	f850 2b04 	ldr.w	r2, [r0], #4
 800eda8:	b293      	uxth	r3, r2
 800edaa:	fb06 e303 	mla	r3, r6, r3, lr
 800edae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800edb2:	b29b      	uxth	r3, r3
 800edb4:	ebaa 0303 	sub.w	r3, sl, r3
 800edb8:	0c12      	lsrs	r2, r2, #16
 800edba:	f8dc a000 	ldr.w	sl, [ip]
 800edbe:	fb06 e202 	mla	r2, r6, r2, lr
 800edc2:	fa13 f38a 	uxtah	r3, r3, sl
 800edc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800edca:	fa1f fa82 	uxth.w	sl, r2
 800edce:	f8dc 2000 	ldr.w	r2, [ip]
 800edd2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800edd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800edda:	b29b      	uxth	r3, r3
 800eddc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ede0:	4581      	cmp	r9, r0
 800ede2:	f84c 3b04 	str.w	r3, [ip], #4
 800ede6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800edea:	d2db      	bcs.n	800eda4 <quorem+0x44>
 800edec:	f855 300b 	ldr.w	r3, [r5, fp]
 800edf0:	b92b      	cbnz	r3, 800edfe <quorem+0x9e>
 800edf2:	9b01      	ldr	r3, [sp, #4]
 800edf4:	3b04      	subs	r3, #4
 800edf6:	429d      	cmp	r5, r3
 800edf8:	461a      	mov	r2, r3
 800edfa:	d32e      	bcc.n	800ee5a <quorem+0xfa>
 800edfc:	613c      	str	r4, [r7, #16]
 800edfe:	4638      	mov	r0, r7
 800ee00:	f001 f8b0 	bl	800ff64 <__mcmp>
 800ee04:	2800      	cmp	r0, #0
 800ee06:	db24      	blt.n	800ee52 <quorem+0xf2>
 800ee08:	3601      	adds	r6, #1
 800ee0a:	4628      	mov	r0, r5
 800ee0c:	f04f 0c00 	mov.w	ip, #0
 800ee10:	f858 2b04 	ldr.w	r2, [r8], #4
 800ee14:	f8d0 e000 	ldr.w	lr, [r0]
 800ee18:	b293      	uxth	r3, r2
 800ee1a:	ebac 0303 	sub.w	r3, ip, r3
 800ee1e:	0c12      	lsrs	r2, r2, #16
 800ee20:	fa13 f38e 	uxtah	r3, r3, lr
 800ee24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ee28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee32:	45c1      	cmp	r9, r8
 800ee34:	f840 3b04 	str.w	r3, [r0], #4
 800ee38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ee3c:	d2e8      	bcs.n	800ee10 <quorem+0xb0>
 800ee3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee46:	b922      	cbnz	r2, 800ee52 <quorem+0xf2>
 800ee48:	3b04      	subs	r3, #4
 800ee4a:	429d      	cmp	r5, r3
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	d30a      	bcc.n	800ee66 <quorem+0x106>
 800ee50:	613c      	str	r4, [r7, #16]
 800ee52:	4630      	mov	r0, r6
 800ee54:	b003      	add	sp, #12
 800ee56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee5a:	6812      	ldr	r2, [r2, #0]
 800ee5c:	3b04      	subs	r3, #4
 800ee5e:	2a00      	cmp	r2, #0
 800ee60:	d1cc      	bne.n	800edfc <quorem+0x9c>
 800ee62:	3c01      	subs	r4, #1
 800ee64:	e7c7      	b.n	800edf6 <quorem+0x96>
 800ee66:	6812      	ldr	r2, [r2, #0]
 800ee68:	3b04      	subs	r3, #4
 800ee6a:	2a00      	cmp	r2, #0
 800ee6c:	d1f0      	bne.n	800ee50 <quorem+0xf0>
 800ee6e:	3c01      	subs	r4, #1
 800ee70:	e7eb      	b.n	800ee4a <quorem+0xea>
 800ee72:	2000      	movs	r0, #0
 800ee74:	e7ee      	b.n	800ee54 <quorem+0xf4>
	...

0800ee78 <_dtoa_r>:
 800ee78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee7c:	ed2d 8b02 	vpush	{d8}
 800ee80:	ec57 6b10 	vmov	r6, r7, d0
 800ee84:	b095      	sub	sp, #84	; 0x54
 800ee86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ee88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ee8c:	9105      	str	r1, [sp, #20]
 800ee8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ee92:	4604      	mov	r4, r0
 800ee94:	9209      	str	r2, [sp, #36]	; 0x24
 800ee96:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee98:	b975      	cbnz	r5, 800eeb8 <_dtoa_r+0x40>
 800ee9a:	2010      	movs	r0, #16
 800ee9c:	f000 fddc 	bl	800fa58 <malloc>
 800eea0:	4602      	mov	r2, r0
 800eea2:	6260      	str	r0, [r4, #36]	; 0x24
 800eea4:	b920      	cbnz	r0, 800eeb0 <_dtoa_r+0x38>
 800eea6:	4bb2      	ldr	r3, [pc, #712]	; (800f170 <_dtoa_r+0x2f8>)
 800eea8:	21ea      	movs	r1, #234	; 0xea
 800eeaa:	48b2      	ldr	r0, [pc, #712]	; (800f174 <_dtoa_r+0x2fc>)
 800eeac:	f001 fb80 	bl	80105b0 <__assert_func>
 800eeb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eeb4:	6005      	str	r5, [r0, #0]
 800eeb6:	60c5      	str	r5, [r0, #12]
 800eeb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eeba:	6819      	ldr	r1, [r3, #0]
 800eebc:	b151      	cbz	r1, 800eed4 <_dtoa_r+0x5c>
 800eebe:	685a      	ldr	r2, [r3, #4]
 800eec0:	604a      	str	r2, [r1, #4]
 800eec2:	2301      	movs	r3, #1
 800eec4:	4093      	lsls	r3, r2
 800eec6:	608b      	str	r3, [r1, #8]
 800eec8:	4620      	mov	r0, r4
 800eeca:	f000 fe0d 	bl	800fae8 <_Bfree>
 800eece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eed0:	2200      	movs	r2, #0
 800eed2:	601a      	str	r2, [r3, #0]
 800eed4:	1e3b      	subs	r3, r7, #0
 800eed6:	bfb9      	ittee	lt
 800eed8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eedc:	9303      	strlt	r3, [sp, #12]
 800eede:	2300      	movge	r3, #0
 800eee0:	f8c8 3000 	strge.w	r3, [r8]
 800eee4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800eee8:	4ba3      	ldr	r3, [pc, #652]	; (800f178 <_dtoa_r+0x300>)
 800eeea:	bfbc      	itt	lt
 800eeec:	2201      	movlt	r2, #1
 800eeee:	f8c8 2000 	strlt.w	r2, [r8]
 800eef2:	ea33 0309 	bics.w	r3, r3, r9
 800eef6:	d11b      	bne.n	800ef30 <_dtoa_r+0xb8>
 800eef8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eefa:	f242 730f 	movw	r3, #9999	; 0x270f
 800eefe:	6013      	str	r3, [r2, #0]
 800ef00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ef04:	4333      	orrs	r3, r6
 800ef06:	f000 857a 	beq.w	800f9fe <_dtoa_r+0xb86>
 800ef0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef0c:	b963      	cbnz	r3, 800ef28 <_dtoa_r+0xb0>
 800ef0e:	4b9b      	ldr	r3, [pc, #620]	; (800f17c <_dtoa_r+0x304>)
 800ef10:	e024      	b.n	800ef5c <_dtoa_r+0xe4>
 800ef12:	4b9b      	ldr	r3, [pc, #620]	; (800f180 <_dtoa_r+0x308>)
 800ef14:	9300      	str	r3, [sp, #0]
 800ef16:	3308      	adds	r3, #8
 800ef18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ef1a:	6013      	str	r3, [r2, #0]
 800ef1c:	9800      	ldr	r0, [sp, #0]
 800ef1e:	b015      	add	sp, #84	; 0x54
 800ef20:	ecbd 8b02 	vpop	{d8}
 800ef24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef28:	4b94      	ldr	r3, [pc, #592]	; (800f17c <_dtoa_r+0x304>)
 800ef2a:	9300      	str	r3, [sp, #0]
 800ef2c:	3303      	adds	r3, #3
 800ef2e:	e7f3      	b.n	800ef18 <_dtoa_r+0xa0>
 800ef30:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef34:	2200      	movs	r2, #0
 800ef36:	ec51 0b17 	vmov	r0, r1, d7
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ef40:	f7f1 fdda 	bl	8000af8 <__aeabi_dcmpeq>
 800ef44:	4680      	mov	r8, r0
 800ef46:	b158      	cbz	r0, 800ef60 <_dtoa_r+0xe8>
 800ef48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	6013      	str	r3, [r2, #0]
 800ef4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	f000 8551 	beq.w	800f9f8 <_dtoa_r+0xb80>
 800ef56:	488b      	ldr	r0, [pc, #556]	; (800f184 <_dtoa_r+0x30c>)
 800ef58:	6018      	str	r0, [r3, #0]
 800ef5a:	1e43      	subs	r3, r0, #1
 800ef5c:	9300      	str	r3, [sp, #0]
 800ef5e:	e7dd      	b.n	800ef1c <_dtoa_r+0xa4>
 800ef60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ef64:	aa12      	add	r2, sp, #72	; 0x48
 800ef66:	a913      	add	r1, sp, #76	; 0x4c
 800ef68:	4620      	mov	r0, r4
 800ef6a:	f001 f89f 	bl	80100ac <__d2b>
 800ef6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ef72:	4683      	mov	fp, r0
 800ef74:	2d00      	cmp	r5, #0
 800ef76:	d07c      	beq.n	800f072 <_dtoa_r+0x1fa>
 800ef78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ef7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ef86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ef8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ef8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ef92:	4b7d      	ldr	r3, [pc, #500]	; (800f188 <_dtoa_r+0x310>)
 800ef94:	2200      	movs	r2, #0
 800ef96:	4630      	mov	r0, r6
 800ef98:	4639      	mov	r1, r7
 800ef9a:	f7f1 f98d 	bl	80002b8 <__aeabi_dsub>
 800ef9e:	a36e      	add	r3, pc, #440	; (adr r3, 800f158 <_dtoa_r+0x2e0>)
 800efa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa4:	f7f1 fb40 	bl	8000628 <__aeabi_dmul>
 800efa8:	a36d      	add	r3, pc, #436	; (adr r3, 800f160 <_dtoa_r+0x2e8>)
 800efaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efae:	f7f1 f985 	bl	80002bc <__adddf3>
 800efb2:	4606      	mov	r6, r0
 800efb4:	4628      	mov	r0, r5
 800efb6:	460f      	mov	r7, r1
 800efb8:	f7f1 facc 	bl	8000554 <__aeabi_i2d>
 800efbc:	a36a      	add	r3, pc, #424	; (adr r3, 800f168 <_dtoa_r+0x2f0>)
 800efbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc2:	f7f1 fb31 	bl	8000628 <__aeabi_dmul>
 800efc6:	4602      	mov	r2, r0
 800efc8:	460b      	mov	r3, r1
 800efca:	4630      	mov	r0, r6
 800efcc:	4639      	mov	r1, r7
 800efce:	f7f1 f975 	bl	80002bc <__adddf3>
 800efd2:	4606      	mov	r6, r0
 800efd4:	460f      	mov	r7, r1
 800efd6:	f7f1 fdd7 	bl	8000b88 <__aeabi_d2iz>
 800efda:	2200      	movs	r2, #0
 800efdc:	4682      	mov	sl, r0
 800efde:	2300      	movs	r3, #0
 800efe0:	4630      	mov	r0, r6
 800efe2:	4639      	mov	r1, r7
 800efe4:	f7f1 fd92 	bl	8000b0c <__aeabi_dcmplt>
 800efe8:	b148      	cbz	r0, 800effe <_dtoa_r+0x186>
 800efea:	4650      	mov	r0, sl
 800efec:	f7f1 fab2 	bl	8000554 <__aeabi_i2d>
 800eff0:	4632      	mov	r2, r6
 800eff2:	463b      	mov	r3, r7
 800eff4:	f7f1 fd80 	bl	8000af8 <__aeabi_dcmpeq>
 800eff8:	b908      	cbnz	r0, 800effe <_dtoa_r+0x186>
 800effa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800effe:	f1ba 0f16 	cmp.w	sl, #22
 800f002:	d854      	bhi.n	800f0ae <_dtoa_r+0x236>
 800f004:	4b61      	ldr	r3, [pc, #388]	; (800f18c <_dtoa_r+0x314>)
 800f006:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f012:	f7f1 fd7b 	bl	8000b0c <__aeabi_dcmplt>
 800f016:	2800      	cmp	r0, #0
 800f018:	d04b      	beq.n	800f0b2 <_dtoa_r+0x23a>
 800f01a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f01e:	2300      	movs	r3, #0
 800f020:	930e      	str	r3, [sp, #56]	; 0x38
 800f022:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f024:	1b5d      	subs	r5, r3, r5
 800f026:	1e6b      	subs	r3, r5, #1
 800f028:	9304      	str	r3, [sp, #16]
 800f02a:	bf43      	ittte	mi
 800f02c:	2300      	movmi	r3, #0
 800f02e:	f1c5 0801 	rsbmi	r8, r5, #1
 800f032:	9304      	strmi	r3, [sp, #16]
 800f034:	f04f 0800 	movpl.w	r8, #0
 800f038:	f1ba 0f00 	cmp.w	sl, #0
 800f03c:	db3b      	blt.n	800f0b6 <_dtoa_r+0x23e>
 800f03e:	9b04      	ldr	r3, [sp, #16]
 800f040:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f044:	4453      	add	r3, sl
 800f046:	9304      	str	r3, [sp, #16]
 800f048:	2300      	movs	r3, #0
 800f04a:	9306      	str	r3, [sp, #24]
 800f04c:	9b05      	ldr	r3, [sp, #20]
 800f04e:	2b09      	cmp	r3, #9
 800f050:	d869      	bhi.n	800f126 <_dtoa_r+0x2ae>
 800f052:	2b05      	cmp	r3, #5
 800f054:	bfc4      	itt	gt
 800f056:	3b04      	subgt	r3, #4
 800f058:	9305      	strgt	r3, [sp, #20]
 800f05a:	9b05      	ldr	r3, [sp, #20]
 800f05c:	f1a3 0302 	sub.w	r3, r3, #2
 800f060:	bfcc      	ite	gt
 800f062:	2500      	movgt	r5, #0
 800f064:	2501      	movle	r5, #1
 800f066:	2b03      	cmp	r3, #3
 800f068:	d869      	bhi.n	800f13e <_dtoa_r+0x2c6>
 800f06a:	e8df f003 	tbb	[pc, r3]
 800f06e:	4e2c      	.short	0x4e2c
 800f070:	5a4c      	.short	0x5a4c
 800f072:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f076:	441d      	add	r5, r3
 800f078:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f07c:	2b20      	cmp	r3, #32
 800f07e:	bfc1      	itttt	gt
 800f080:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f084:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f088:	fa09 f303 	lslgt.w	r3, r9, r3
 800f08c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f090:	bfda      	itte	le
 800f092:	f1c3 0320 	rsble	r3, r3, #32
 800f096:	fa06 f003 	lslle.w	r0, r6, r3
 800f09a:	4318      	orrgt	r0, r3
 800f09c:	f7f1 fa4a 	bl	8000534 <__aeabi_ui2d>
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	4606      	mov	r6, r0
 800f0a4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f0a8:	3d01      	subs	r5, #1
 800f0aa:	9310      	str	r3, [sp, #64]	; 0x40
 800f0ac:	e771      	b.n	800ef92 <_dtoa_r+0x11a>
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	e7b6      	b.n	800f020 <_dtoa_r+0x1a8>
 800f0b2:	900e      	str	r0, [sp, #56]	; 0x38
 800f0b4:	e7b5      	b.n	800f022 <_dtoa_r+0x1aa>
 800f0b6:	f1ca 0300 	rsb	r3, sl, #0
 800f0ba:	9306      	str	r3, [sp, #24]
 800f0bc:	2300      	movs	r3, #0
 800f0be:	eba8 080a 	sub.w	r8, r8, sl
 800f0c2:	930d      	str	r3, [sp, #52]	; 0x34
 800f0c4:	e7c2      	b.n	800f04c <_dtoa_r+0x1d4>
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	9308      	str	r3, [sp, #32]
 800f0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	dc39      	bgt.n	800f144 <_dtoa_r+0x2cc>
 800f0d0:	f04f 0901 	mov.w	r9, #1
 800f0d4:	f8cd 9004 	str.w	r9, [sp, #4]
 800f0d8:	464b      	mov	r3, r9
 800f0da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f0de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	6042      	str	r2, [r0, #4]
 800f0e4:	2204      	movs	r2, #4
 800f0e6:	f102 0614 	add.w	r6, r2, #20
 800f0ea:	429e      	cmp	r6, r3
 800f0ec:	6841      	ldr	r1, [r0, #4]
 800f0ee:	d92f      	bls.n	800f150 <_dtoa_r+0x2d8>
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	f000 fcb9 	bl	800fa68 <_Balloc>
 800f0f6:	9000      	str	r0, [sp, #0]
 800f0f8:	2800      	cmp	r0, #0
 800f0fa:	d14b      	bne.n	800f194 <_dtoa_r+0x31c>
 800f0fc:	4b24      	ldr	r3, [pc, #144]	; (800f190 <_dtoa_r+0x318>)
 800f0fe:	4602      	mov	r2, r0
 800f100:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f104:	e6d1      	b.n	800eeaa <_dtoa_r+0x32>
 800f106:	2301      	movs	r3, #1
 800f108:	e7de      	b.n	800f0c8 <_dtoa_r+0x250>
 800f10a:	2300      	movs	r3, #0
 800f10c:	9308      	str	r3, [sp, #32]
 800f10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f110:	eb0a 0903 	add.w	r9, sl, r3
 800f114:	f109 0301 	add.w	r3, r9, #1
 800f118:	2b01      	cmp	r3, #1
 800f11a:	9301      	str	r3, [sp, #4]
 800f11c:	bfb8      	it	lt
 800f11e:	2301      	movlt	r3, #1
 800f120:	e7dd      	b.n	800f0de <_dtoa_r+0x266>
 800f122:	2301      	movs	r3, #1
 800f124:	e7f2      	b.n	800f10c <_dtoa_r+0x294>
 800f126:	2501      	movs	r5, #1
 800f128:	2300      	movs	r3, #0
 800f12a:	9305      	str	r3, [sp, #20]
 800f12c:	9508      	str	r5, [sp, #32]
 800f12e:	f04f 39ff 	mov.w	r9, #4294967295
 800f132:	2200      	movs	r2, #0
 800f134:	f8cd 9004 	str.w	r9, [sp, #4]
 800f138:	2312      	movs	r3, #18
 800f13a:	9209      	str	r2, [sp, #36]	; 0x24
 800f13c:	e7cf      	b.n	800f0de <_dtoa_r+0x266>
 800f13e:	2301      	movs	r3, #1
 800f140:	9308      	str	r3, [sp, #32]
 800f142:	e7f4      	b.n	800f12e <_dtoa_r+0x2b6>
 800f144:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f148:	f8cd 9004 	str.w	r9, [sp, #4]
 800f14c:	464b      	mov	r3, r9
 800f14e:	e7c6      	b.n	800f0de <_dtoa_r+0x266>
 800f150:	3101      	adds	r1, #1
 800f152:	6041      	str	r1, [r0, #4]
 800f154:	0052      	lsls	r2, r2, #1
 800f156:	e7c6      	b.n	800f0e6 <_dtoa_r+0x26e>
 800f158:	636f4361 	.word	0x636f4361
 800f15c:	3fd287a7 	.word	0x3fd287a7
 800f160:	8b60c8b3 	.word	0x8b60c8b3
 800f164:	3fc68a28 	.word	0x3fc68a28
 800f168:	509f79fb 	.word	0x509f79fb
 800f16c:	3fd34413 	.word	0x3fd34413
 800f170:	08012cc5 	.word	0x08012cc5
 800f174:	08012cdc 	.word	0x08012cdc
 800f178:	7ff00000 	.word	0x7ff00000
 800f17c:	08012cc1 	.word	0x08012cc1
 800f180:	08012cb8 	.word	0x08012cb8
 800f184:	08012c95 	.word	0x08012c95
 800f188:	3ff80000 	.word	0x3ff80000
 800f18c:	08012dd8 	.word	0x08012dd8
 800f190:	08012d3b 	.word	0x08012d3b
 800f194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f196:	9a00      	ldr	r2, [sp, #0]
 800f198:	601a      	str	r2, [r3, #0]
 800f19a:	9b01      	ldr	r3, [sp, #4]
 800f19c:	2b0e      	cmp	r3, #14
 800f19e:	f200 80ad 	bhi.w	800f2fc <_dtoa_r+0x484>
 800f1a2:	2d00      	cmp	r5, #0
 800f1a4:	f000 80aa 	beq.w	800f2fc <_dtoa_r+0x484>
 800f1a8:	f1ba 0f00 	cmp.w	sl, #0
 800f1ac:	dd36      	ble.n	800f21c <_dtoa_r+0x3a4>
 800f1ae:	4ac3      	ldr	r2, [pc, #780]	; (800f4bc <_dtoa_r+0x644>)
 800f1b0:	f00a 030f 	and.w	r3, sl, #15
 800f1b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f1b8:	ed93 7b00 	vldr	d7, [r3]
 800f1bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f1c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f1c4:	eeb0 8a47 	vmov.f32	s16, s14
 800f1c8:	eef0 8a67 	vmov.f32	s17, s15
 800f1cc:	d016      	beq.n	800f1fc <_dtoa_r+0x384>
 800f1ce:	4bbc      	ldr	r3, [pc, #752]	; (800f4c0 <_dtoa_r+0x648>)
 800f1d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f1d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f1d8:	f7f1 fb50 	bl	800087c <__aeabi_ddiv>
 800f1dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1e0:	f007 070f 	and.w	r7, r7, #15
 800f1e4:	2503      	movs	r5, #3
 800f1e6:	4eb6      	ldr	r6, [pc, #728]	; (800f4c0 <_dtoa_r+0x648>)
 800f1e8:	b957      	cbnz	r7, 800f200 <_dtoa_r+0x388>
 800f1ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1ee:	ec53 2b18 	vmov	r2, r3, d8
 800f1f2:	f7f1 fb43 	bl	800087c <__aeabi_ddiv>
 800f1f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1fa:	e029      	b.n	800f250 <_dtoa_r+0x3d8>
 800f1fc:	2502      	movs	r5, #2
 800f1fe:	e7f2      	b.n	800f1e6 <_dtoa_r+0x36e>
 800f200:	07f9      	lsls	r1, r7, #31
 800f202:	d508      	bpl.n	800f216 <_dtoa_r+0x39e>
 800f204:	ec51 0b18 	vmov	r0, r1, d8
 800f208:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f20c:	f7f1 fa0c 	bl	8000628 <__aeabi_dmul>
 800f210:	ec41 0b18 	vmov	d8, r0, r1
 800f214:	3501      	adds	r5, #1
 800f216:	107f      	asrs	r7, r7, #1
 800f218:	3608      	adds	r6, #8
 800f21a:	e7e5      	b.n	800f1e8 <_dtoa_r+0x370>
 800f21c:	f000 80a6 	beq.w	800f36c <_dtoa_r+0x4f4>
 800f220:	f1ca 0600 	rsb	r6, sl, #0
 800f224:	4ba5      	ldr	r3, [pc, #660]	; (800f4bc <_dtoa_r+0x644>)
 800f226:	4fa6      	ldr	r7, [pc, #664]	; (800f4c0 <_dtoa_r+0x648>)
 800f228:	f006 020f 	and.w	r2, r6, #15
 800f22c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f234:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f238:	f7f1 f9f6 	bl	8000628 <__aeabi_dmul>
 800f23c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f240:	1136      	asrs	r6, r6, #4
 800f242:	2300      	movs	r3, #0
 800f244:	2502      	movs	r5, #2
 800f246:	2e00      	cmp	r6, #0
 800f248:	f040 8085 	bne.w	800f356 <_dtoa_r+0x4de>
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d1d2      	bne.n	800f1f6 <_dtoa_r+0x37e>
 800f250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f252:	2b00      	cmp	r3, #0
 800f254:	f000 808c 	beq.w	800f370 <_dtoa_r+0x4f8>
 800f258:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f25c:	4b99      	ldr	r3, [pc, #612]	; (800f4c4 <_dtoa_r+0x64c>)
 800f25e:	2200      	movs	r2, #0
 800f260:	4630      	mov	r0, r6
 800f262:	4639      	mov	r1, r7
 800f264:	f7f1 fc52 	bl	8000b0c <__aeabi_dcmplt>
 800f268:	2800      	cmp	r0, #0
 800f26a:	f000 8081 	beq.w	800f370 <_dtoa_r+0x4f8>
 800f26e:	9b01      	ldr	r3, [sp, #4]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d07d      	beq.n	800f370 <_dtoa_r+0x4f8>
 800f274:	f1b9 0f00 	cmp.w	r9, #0
 800f278:	dd3c      	ble.n	800f2f4 <_dtoa_r+0x47c>
 800f27a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f27e:	9307      	str	r3, [sp, #28]
 800f280:	2200      	movs	r2, #0
 800f282:	4b91      	ldr	r3, [pc, #580]	; (800f4c8 <_dtoa_r+0x650>)
 800f284:	4630      	mov	r0, r6
 800f286:	4639      	mov	r1, r7
 800f288:	f7f1 f9ce 	bl	8000628 <__aeabi_dmul>
 800f28c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f290:	3501      	adds	r5, #1
 800f292:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f296:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f29a:	4628      	mov	r0, r5
 800f29c:	f7f1 f95a 	bl	8000554 <__aeabi_i2d>
 800f2a0:	4632      	mov	r2, r6
 800f2a2:	463b      	mov	r3, r7
 800f2a4:	f7f1 f9c0 	bl	8000628 <__aeabi_dmul>
 800f2a8:	4b88      	ldr	r3, [pc, #544]	; (800f4cc <_dtoa_r+0x654>)
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	f7f1 f806 	bl	80002bc <__adddf3>
 800f2b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f2b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2b8:	9303      	str	r3, [sp, #12]
 800f2ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d15c      	bne.n	800f37a <_dtoa_r+0x502>
 800f2c0:	4b83      	ldr	r3, [pc, #524]	; (800f4d0 <_dtoa_r+0x658>)
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	4630      	mov	r0, r6
 800f2c6:	4639      	mov	r1, r7
 800f2c8:	f7f0 fff6 	bl	80002b8 <__aeabi_dsub>
 800f2cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f2d0:	4606      	mov	r6, r0
 800f2d2:	460f      	mov	r7, r1
 800f2d4:	f7f1 fc38 	bl	8000b48 <__aeabi_dcmpgt>
 800f2d8:	2800      	cmp	r0, #0
 800f2da:	f040 8296 	bne.w	800f80a <_dtoa_r+0x992>
 800f2de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f2e8:	4639      	mov	r1, r7
 800f2ea:	f7f1 fc0f 	bl	8000b0c <__aeabi_dcmplt>
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	f040 8288 	bne.w	800f804 <_dtoa_r+0x98c>
 800f2f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f2f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f2fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	f2c0 8158 	blt.w	800f5b4 <_dtoa_r+0x73c>
 800f304:	f1ba 0f0e 	cmp.w	sl, #14
 800f308:	f300 8154 	bgt.w	800f5b4 <_dtoa_r+0x73c>
 800f30c:	4b6b      	ldr	r3, [pc, #428]	; (800f4bc <_dtoa_r+0x644>)
 800f30e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f312:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f318:	2b00      	cmp	r3, #0
 800f31a:	f280 80e3 	bge.w	800f4e4 <_dtoa_r+0x66c>
 800f31e:	9b01      	ldr	r3, [sp, #4]
 800f320:	2b00      	cmp	r3, #0
 800f322:	f300 80df 	bgt.w	800f4e4 <_dtoa_r+0x66c>
 800f326:	f040 826d 	bne.w	800f804 <_dtoa_r+0x98c>
 800f32a:	4b69      	ldr	r3, [pc, #420]	; (800f4d0 <_dtoa_r+0x658>)
 800f32c:	2200      	movs	r2, #0
 800f32e:	4640      	mov	r0, r8
 800f330:	4649      	mov	r1, r9
 800f332:	f7f1 f979 	bl	8000628 <__aeabi_dmul>
 800f336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f33a:	f7f1 fbfb 	bl	8000b34 <__aeabi_dcmpge>
 800f33e:	9e01      	ldr	r6, [sp, #4]
 800f340:	4637      	mov	r7, r6
 800f342:	2800      	cmp	r0, #0
 800f344:	f040 8243 	bne.w	800f7ce <_dtoa_r+0x956>
 800f348:	9d00      	ldr	r5, [sp, #0]
 800f34a:	2331      	movs	r3, #49	; 0x31
 800f34c:	f805 3b01 	strb.w	r3, [r5], #1
 800f350:	f10a 0a01 	add.w	sl, sl, #1
 800f354:	e23f      	b.n	800f7d6 <_dtoa_r+0x95e>
 800f356:	07f2      	lsls	r2, r6, #31
 800f358:	d505      	bpl.n	800f366 <_dtoa_r+0x4ee>
 800f35a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f35e:	f7f1 f963 	bl	8000628 <__aeabi_dmul>
 800f362:	3501      	adds	r5, #1
 800f364:	2301      	movs	r3, #1
 800f366:	1076      	asrs	r6, r6, #1
 800f368:	3708      	adds	r7, #8
 800f36a:	e76c      	b.n	800f246 <_dtoa_r+0x3ce>
 800f36c:	2502      	movs	r5, #2
 800f36e:	e76f      	b.n	800f250 <_dtoa_r+0x3d8>
 800f370:	9b01      	ldr	r3, [sp, #4]
 800f372:	f8cd a01c 	str.w	sl, [sp, #28]
 800f376:	930c      	str	r3, [sp, #48]	; 0x30
 800f378:	e78d      	b.n	800f296 <_dtoa_r+0x41e>
 800f37a:	9900      	ldr	r1, [sp, #0]
 800f37c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f37e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f380:	4b4e      	ldr	r3, [pc, #312]	; (800f4bc <_dtoa_r+0x644>)
 800f382:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f386:	4401      	add	r1, r0
 800f388:	9102      	str	r1, [sp, #8]
 800f38a:	9908      	ldr	r1, [sp, #32]
 800f38c:	eeb0 8a47 	vmov.f32	s16, s14
 800f390:	eef0 8a67 	vmov.f32	s17, s15
 800f394:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f398:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f39c:	2900      	cmp	r1, #0
 800f39e:	d045      	beq.n	800f42c <_dtoa_r+0x5b4>
 800f3a0:	494c      	ldr	r1, [pc, #304]	; (800f4d4 <_dtoa_r+0x65c>)
 800f3a2:	2000      	movs	r0, #0
 800f3a4:	f7f1 fa6a 	bl	800087c <__aeabi_ddiv>
 800f3a8:	ec53 2b18 	vmov	r2, r3, d8
 800f3ac:	f7f0 ff84 	bl	80002b8 <__aeabi_dsub>
 800f3b0:	9d00      	ldr	r5, [sp, #0]
 800f3b2:	ec41 0b18 	vmov	d8, r0, r1
 800f3b6:	4639      	mov	r1, r7
 800f3b8:	4630      	mov	r0, r6
 800f3ba:	f7f1 fbe5 	bl	8000b88 <__aeabi_d2iz>
 800f3be:	900c      	str	r0, [sp, #48]	; 0x30
 800f3c0:	f7f1 f8c8 	bl	8000554 <__aeabi_i2d>
 800f3c4:	4602      	mov	r2, r0
 800f3c6:	460b      	mov	r3, r1
 800f3c8:	4630      	mov	r0, r6
 800f3ca:	4639      	mov	r1, r7
 800f3cc:	f7f0 ff74 	bl	80002b8 <__aeabi_dsub>
 800f3d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f3d2:	3330      	adds	r3, #48	; 0x30
 800f3d4:	f805 3b01 	strb.w	r3, [r5], #1
 800f3d8:	ec53 2b18 	vmov	r2, r3, d8
 800f3dc:	4606      	mov	r6, r0
 800f3de:	460f      	mov	r7, r1
 800f3e0:	f7f1 fb94 	bl	8000b0c <__aeabi_dcmplt>
 800f3e4:	2800      	cmp	r0, #0
 800f3e6:	d165      	bne.n	800f4b4 <_dtoa_r+0x63c>
 800f3e8:	4632      	mov	r2, r6
 800f3ea:	463b      	mov	r3, r7
 800f3ec:	4935      	ldr	r1, [pc, #212]	; (800f4c4 <_dtoa_r+0x64c>)
 800f3ee:	2000      	movs	r0, #0
 800f3f0:	f7f0 ff62 	bl	80002b8 <__aeabi_dsub>
 800f3f4:	ec53 2b18 	vmov	r2, r3, d8
 800f3f8:	f7f1 fb88 	bl	8000b0c <__aeabi_dcmplt>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	f040 80b9 	bne.w	800f574 <_dtoa_r+0x6fc>
 800f402:	9b02      	ldr	r3, [sp, #8]
 800f404:	429d      	cmp	r5, r3
 800f406:	f43f af75 	beq.w	800f2f4 <_dtoa_r+0x47c>
 800f40a:	4b2f      	ldr	r3, [pc, #188]	; (800f4c8 <_dtoa_r+0x650>)
 800f40c:	ec51 0b18 	vmov	r0, r1, d8
 800f410:	2200      	movs	r2, #0
 800f412:	f7f1 f909 	bl	8000628 <__aeabi_dmul>
 800f416:	4b2c      	ldr	r3, [pc, #176]	; (800f4c8 <_dtoa_r+0x650>)
 800f418:	ec41 0b18 	vmov	d8, r0, r1
 800f41c:	2200      	movs	r2, #0
 800f41e:	4630      	mov	r0, r6
 800f420:	4639      	mov	r1, r7
 800f422:	f7f1 f901 	bl	8000628 <__aeabi_dmul>
 800f426:	4606      	mov	r6, r0
 800f428:	460f      	mov	r7, r1
 800f42a:	e7c4      	b.n	800f3b6 <_dtoa_r+0x53e>
 800f42c:	ec51 0b17 	vmov	r0, r1, d7
 800f430:	f7f1 f8fa 	bl	8000628 <__aeabi_dmul>
 800f434:	9b02      	ldr	r3, [sp, #8]
 800f436:	9d00      	ldr	r5, [sp, #0]
 800f438:	930c      	str	r3, [sp, #48]	; 0x30
 800f43a:	ec41 0b18 	vmov	d8, r0, r1
 800f43e:	4639      	mov	r1, r7
 800f440:	4630      	mov	r0, r6
 800f442:	f7f1 fba1 	bl	8000b88 <__aeabi_d2iz>
 800f446:	9011      	str	r0, [sp, #68]	; 0x44
 800f448:	f7f1 f884 	bl	8000554 <__aeabi_i2d>
 800f44c:	4602      	mov	r2, r0
 800f44e:	460b      	mov	r3, r1
 800f450:	4630      	mov	r0, r6
 800f452:	4639      	mov	r1, r7
 800f454:	f7f0 ff30 	bl	80002b8 <__aeabi_dsub>
 800f458:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f45a:	3330      	adds	r3, #48	; 0x30
 800f45c:	f805 3b01 	strb.w	r3, [r5], #1
 800f460:	9b02      	ldr	r3, [sp, #8]
 800f462:	429d      	cmp	r5, r3
 800f464:	4606      	mov	r6, r0
 800f466:	460f      	mov	r7, r1
 800f468:	f04f 0200 	mov.w	r2, #0
 800f46c:	d134      	bne.n	800f4d8 <_dtoa_r+0x660>
 800f46e:	4b19      	ldr	r3, [pc, #100]	; (800f4d4 <_dtoa_r+0x65c>)
 800f470:	ec51 0b18 	vmov	r0, r1, d8
 800f474:	f7f0 ff22 	bl	80002bc <__adddf3>
 800f478:	4602      	mov	r2, r0
 800f47a:	460b      	mov	r3, r1
 800f47c:	4630      	mov	r0, r6
 800f47e:	4639      	mov	r1, r7
 800f480:	f7f1 fb62 	bl	8000b48 <__aeabi_dcmpgt>
 800f484:	2800      	cmp	r0, #0
 800f486:	d175      	bne.n	800f574 <_dtoa_r+0x6fc>
 800f488:	ec53 2b18 	vmov	r2, r3, d8
 800f48c:	4911      	ldr	r1, [pc, #68]	; (800f4d4 <_dtoa_r+0x65c>)
 800f48e:	2000      	movs	r0, #0
 800f490:	f7f0 ff12 	bl	80002b8 <__aeabi_dsub>
 800f494:	4602      	mov	r2, r0
 800f496:	460b      	mov	r3, r1
 800f498:	4630      	mov	r0, r6
 800f49a:	4639      	mov	r1, r7
 800f49c:	f7f1 fb36 	bl	8000b0c <__aeabi_dcmplt>
 800f4a0:	2800      	cmp	r0, #0
 800f4a2:	f43f af27 	beq.w	800f2f4 <_dtoa_r+0x47c>
 800f4a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f4a8:	1e6b      	subs	r3, r5, #1
 800f4aa:	930c      	str	r3, [sp, #48]	; 0x30
 800f4ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f4b0:	2b30      	cmp	r3, #48	; 0x30
 800f4b2:	d0f8      	beq.n	800f4a6 <_dtoa_r+0x62e>
 800f4b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f4b8:	e04a      	b.n	800f550 <_dtoa_r+0x6d8>
 800f4ba:	bf00      	nop
 800f4bc:	08012dd8 	.word	0x08012dd8
 800f4c0:	08012db0 	.word	0x08012db0
 800f4c4:	3ff00000 	.word	0x3ff00000
 800f4c8:	40240000 	.word	0x40240000
 800f4cc:	401c0000 	.word	0x401c0000
 800f4d0:	40140000 	.word	0x40140000
 800f4d4:	3fe00000 	.word	0x3fe00000
 800f4d8:	4baf      	ldr	r3, [pc, #700]	; (800f798 <_dtoa_r+0x920>)
 800f4da:	f7f1 f8a5 	bl	8000628 <__aeabi_dmul>
 800f4de:	4606      	mov	r6, r0
 800f4e0:	460f      	mov	r7, r1
 800f4e2:	e7ac      	b.n	800f43e <_dtoa_r+0x5c6>
 800f4e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f4e8:	9d00      	ldr	r5, [sp, #0]
 800f4ea:	4642      	mov	r2, r8
 800f4ec:	464b      	mov	r3, r9
 800f4ee:	4630      	mov	r0, r6
 800f4f0:	4639      	mov	r1, r7
 800f4f2:	f7f1 f9c3 	bl	800087c <__aeabi_ddiv>
 800f4f6:	f7f1 fb47 	bl	8000b88 <__aeabi_d2iz>
 800f4fa:	9002      	str	r0, [sp, #8]
 800f4fc:	f7f1 f82a 	bl	8000554 <__aeabi_i2d>
 800f500:	4642      	mov	r2, r8
 800f502:	464b      	mov	r3, r9
 800f504:	f7f1 f890 	bl	8000628 <__aeabi_dmul>
 800f508:	4602      	mov	r2, r0
 800f50a:	460b      	mov	r3, r1
 800f50c:	4630      	mov	r0, r6
 800f50e:	4639      	mov	r1, r7
 800f510:	f7f0 fed2 	bl	80002b8 <__aeabi_dsub>
 800f514:	9e02      	ldr	r6, [sp, #8]
 800f516:	9f01      	ldr	r7, [sp, #4]
 800f518:	3630      	adds	r6, #48	; 0x30
 800f51a:	f805 6b01 	strb.w	r6, [r5], #1
 800f51e:	9e00      	ldr	r6, [sp, #0]
 800f520:	1bae      	subs	r6, r5, r6
 800f522:	42b7      	cmp	r7, r6
 800f524:	4602      	mov	r2, r0
 800f526:	460b      	mov	r3, r1
 800f528:	d137      	bne.n	800f59a <_dtoa_r+0x722>
 800f52a:	f7f0 fec7 	bl	80002bc <__adddf3>
 800f52e:	4642      	mov	r2, r8
 800f530:	464b      	mov	r3, r9
 800f532:	4606      	mov	r6, r0
 800f534:	460f      	mov	r7, r1
 800f536:	f7f1 fb07 	bl	8000b48 <__aeabi_dcmpgt>
 800f53a:	b9c8      	cbnz	r0, 800f570 <_dtoa_r+0x6f8>
 800f53c:	4642      	mov	r2, r8
 800f53e:	464b      	mov	r3, r9
 800f540:	4630      	mov	r0, r6
 800f542:	4639      	mov	r1, r7
 800f544:	f7f1 fad8 	bl	8000af8 <__aeabi_dcmpeq>
 800f548:	b110      	cbz	r0, 800f550 <_dtoa_r+0x6d8>
 800f54a:	9b02      	ldr	r3, [sp, #8]
 800f54c:	07d9      	lsls	r1, r3, #31
 800f54e:	d40f      	bmi.n	800f570 <_dtoa_r+0x6f8>
 800f550:	4620      	mov	r0, r4
 800f552:	4659      	mov	r1, fp
 800f554:	f000 fac8 	bl	800fae8 <_Bfree>
 800f558:	2300      	movs	r3, #0
 800f55a:	702b      	strb	r3, [r5, #0]
 800f55c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f55e:	f10a 0001 	add.w	r0, sl, #1
 800f562:	6018      	str	r0, [r3, #0]
 800f564:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f566:	2b00      	cmp	r3, #0
 800f568:	f43f acd8 	beq.w	800ef1c <_dtoa_r+0xa4>
 800f56c:	601d      	str	r5, [r3, #0]
 800f56e:	e4d5      	b.n	800ef1c <_dtoa_r+0xa4>
 800f570:	f8cd a01c 	str.w	sl, [sp, #28]
 800f574:	462b      	mov	r3, r5
 800f576:	461d      	mov	r5, r3
 800f578:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f57c:	2a39      	cmp	r2, #57	; 0x39
 800f57e:	d108      	bne.n	800f592 <_dtoa_r+0x71a>
 800f580:	9a00      	ldr	r2, [sp, #0]
 800f582:	429a      	cmp	r2, r3
 800f584:	d1f7      	bne.n	800f576 <_dtoa_r+0x6fe>
 800f586:	9a07      	ldr	r2, [sp, #28]
 800f588:	9900      	ldr	r1, [sp, #0]
 800f58a:	3201      	adds	r2, #1
 800f58c:	9207      	str	r2, [sp, #28]
 800f58e:	2230      	movs	r2, #48	; 0x30
 800f590:	700a      	strb	r2, [r1, #0]
 800f592:	781a      	ldrb	r2, [r3, #0]
 800f594:	3201      	adds	r2, #1
 800f596:	701a      	strb	r2, [r3, #0]
 800f598:	e78c      	b.n	800f4b4 <_dtoa_r+0x63c>
 800f59a:	4b7f      	ldr	r3, [pc, #508]	; (800f798 <_dtoa_r+0x920>)
 800f59c:	2200      	movs	r2, #0
 800f59e:	f7f1 f843 	bl	8000628 <__aeabi_dmul>
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	4606      	mov	r6, r0
 800f5a8:	460f      	mov	r7, r1
 800f5aa:	f7f1 faa5 	bl	8000af8 <__aeabi_dcmpeq>
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	d09b      	beq.n	800f4ea <_dtoa_r+0x672>
 800f5b2:	e7cd      	b.n	800f550 <_dtoa_r+0x6d8>
 800f5b4:	9a08      	ldr	r2, [sp, #32]
 800f5b6:	2a00      	cmp	r2, #0
 800f5b8:	f000 80c4 	beq.w	800f744 <_dtoa_r+0x8cc>
 800f5bc:	9a05      	ldr	r2, [sp, #20]
 800f5be:	2a01      	cmp	r2, #1
 800f5c0:	f300 80a8 	bgt.w	800f714 <_dtoa_r+0x89c>
 800f5c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f5c6:	2a00      	cmp	r2, #0
 800f5c8:	f000 80a0 	beq.w	800f70c <_dtoa_r+0x894>
 800f5cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f5d0:	9e06      	ldr	r6, [sp, #24]
 800f5d2:	4645      	mov	r5, r8
 800f5d4:	9a04      	ldr	r2, [sp, #16]
 800f5d6:	2101      	movs	r1, #1
 800f5d8:	441a      	add	r2, r3
 800f5da:	4620      	mov	r0, r4
 800f5dc:	4498      	add	r8, r3
 800f5de:	9204      	str	r2, [sp, #16]
 800f5e0:	f000 fb3e 	bl	800fc60 <__i2b>
 800f5e4:	4607      	mov	r7, r0
 800f5e6:	2d00      	cmp	r5, #0
 800f5e8:	dd0b      	ble.n	800f602 <_dtoa_r+0x78a>
 800f5ea:	9b04      	ldr	r3, [sp, #16]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	dd08      	ble.n	800f602 <_dtoa_r+0x78a>
 800f5f0:	42ab      	cmp	r3, r5
 800f5f2:	9a04      	ldr	r2, [sp, #16]
 800f5f4:	bfa8      	it	ge
 800f5f6:	462b      	movge	r3, r5
 800f5f8:	eba8 0803 	sub.w	r8, r8, r3
 800f5fc:	1aed      	subs	r5, r5, r3
 800f5fe:	1ad3      	subs	r3, r2, r3
 800f600:	9304      	str	r3, [sp, #16]
 800f602:	9b06      	ldr	r3, [sp, #24]
 800f604:	b1fb      	cbz	r3, 800f646 <_dtoa_r+0x7ce>
 800f606:	9b08      	ldr	r3, [sp, #32]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	f000 809f 	beq.w	800f74c <_dtoa_r+0x8d4>
 800f60e:	2e00      	cmp	r6, #0
 800f610:	dd11      	ble.n	800f636 <_dtoa_r+0x7be>
 800f612:	4639      	mov	r1, r7
 800f614:	4632      	mov	r2, r6
 800f616:	4620      	mov	r0, r4
 800f618:	f000 fbde 	bl	800fdd8 <__pow5mult>
 800f61c:	465a      	mov	r2, fp
 800f61e:	4601      	mov	r1, r0
 800f620:	4607      	mov	r7, r0
 800f622:	4620      	mov	r0, r4
 800f624:	f000 fb32 	bl	800fc8c <__multiply>
 800f628:	4659      	mov	r1, fp
 800f62a:	9007      	str	r0, [sp, #28]
 800f62c:	4620      	mov	r0, r4
 800f62e:	f000 fa5b 	bl	800fae8 <_Bfree>
 800f632:	9b07      	ldr	r3, [sp, #28]
 800f634:	469b      	mov	fp, r3
 800f636:	9b06      	ldr	r3, [sp, #24]
 800f638:	1b9a      	subs	r2, r3, r6
 800f63a:	d004      	beq.n	800f646 <_dtoa_r+0x7ce>
 800f63c:	4659      	mov	r1, fp
 800f63e:	4620      	mov	r0, r4
 800f640:	f000 fbca 	bl	800fdd8 <__pow5mult>
 800f644:	4683      	mov	fp, r0
 800f646:	2101      	movs	r1, #1
 800f648:	4620      	mov	r0, r4
 800f64a:	f000 fb09 	bl	800fc60 <__i2b>
 800f64e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f650:	2b00      	cmp	r3, #0
 800f652:	4606      	mov	r6, r0
 800f654:	dd7c      	ble.n	800f750 <_dtoa_r+0x8d8>
 800f656:	461a      	mov	r2, r3
 800f658:	4601      	mov	r1, r0
 800f65a:	4620      	mov	r0, r4
 800f65c:	f000 fbbc 	bl	800fdd8 <__pow5mult>
 800f660:	9b05      	ldr	r3, [sp, #20]
 800f662:	2b01      	cmp	r3, #1
 800f664:	4606      	mov	r6, r0
 800f666:	dd76      	ble.n	800f756 <_dtoa_r+0x8de>
 800f668:	2300      	movs	r3, #0
 800f66a:	9306      	str	r3, [sp, #24]
 800f66c:	6933      	ldr	r3, [r6, #16]
 800f66e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f672:	6918      	ldr	r0, [r3, #16]
 800f674:	f000 faa4 	bl	800fbc0 <__hi0bits>
 800f678:	f1c0 0020 	rsb	r0, r0, #32
 800f67c:	9b04      	ldr	r3, [sp, #16]
 800f67e:	4418      	add	r0, r3
 800f680:	f010 001f 	ands.w	r0, r0, #31
 800f684:	f000 8086 	beq.w	800f794 <_dtoa_r+0x91c>
 800f688:	f1c0 0320 	rsb	r3, r0, #32
 800f68c:	2b04      	cmp	r3, #4
 800f68e:	dd7f      	ble.n	800f790 <_dtoa_r+0x918>
 800f690:	f1c0 001c 	rsb	r0, r0, #28
 800f694:	9b04      	ldr	r3, [sp, #16]
 800f696:	4403      	add	r3, r0
 800f698:	4480      	add	r8, r0
 800f69a:	4405      	add	r5, r0
 800f69c:	9304      	str	r3, [sp, #16]
 800f69e:	f1b8 0f00 	cmp.w	r8, #0
 800f6a2:	dd05      	ble.n	800f6b0 <_dtoa_r+0x838>
 800f6a4:	4659      	mov	r1, fp
 800f6a6:	4642      	mov	r2, r8
 800f6a8:	4620      	mov	r0, r4
 800f6aa:	f000 fbef 	bl	800fe8c <__lshift>
 800f6ae:	4683      	mov	fp, r0
 800f6b0:	9b04      	ldr	r3, [sp, #16]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	dd05      	ble.n	800f6c2 <_dtoa_r+0x84a>
 800f6b6:	4631      	mov	r1, r6
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	f000 fbe6 	bl	800fe8c <__lshift>
 800f6c0:	4606      	mov	r6, r0
 800f6c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d069      	beq.n	800f79c <_dtoa_r+0x924>
 800f6c8:	4631      	mov	r1, r6
 800f6ca:	4658      	mov	r0, fp
 800f6cc:	f000 fc4a 	bl	800ff64 <__mcmp>
 800f6d0:	2800      	cmp	r0, #0
 800f6d2:	da63      	bge.n	800f79c <_dtoa_r+0x924>
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	4659      	mov	r1, fp
 800f6d8:	220a      	movs	r2, #10
 800f6da:	4620      	mov	r0, r4
 800f6dc:	f000 fa26 	bl	800fb2c <__multadd>
 800f6e0:	9b08      	ldr	r3, [sp, #32]
 800f6e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f6e6:	4683      	mov	fp, r0
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	f000 818f 	beq.w	800fa0c <_dtoa_r+0xb94>
 800f6ee:	4639      	mov	r1, r7
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	220a      	movs	r2, #10
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	f000 fa19 	bl	800fb2c <__multadd>
 800f6fa:	f1b9 0f00 	cmp.w	r9, #0
 800f6fe:	4607      	mov	r7, r0
 800f700:	f300 808e 	bgt.w	800f820 <_dtoa_r+0x9a8>
 800f704:	9b05      	ldr	r3, [sp, #20]
 800f706:	2b02      	cmp	r3, #2
 800f708:	dc50      	bgt.n	800f7ac <_dtoa_r+0x934>
 800f70a:	e089      	b.n	800f820 <_dtoa_r+0x9a8>
 800f70c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f70e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f712:	e75d      	b.n	800f5d0 <_dtoa_r+0x758>
 800f714:	9b01      	ldr	r3, [sp, #4]
 800f716:	1e5e      	subs	r6, r3, #1
 800f718:	9b06      	ldr	r3, [sp, #24]
 800f71a:	42b3      	cmp	r3, r6
 800f71c:	bfbf      	itttt	lt
 800f71e:	9b06      	ldrlt	r3, [sp, #24]
 800f720:	9606      	strlt	r6, [sp, #24]
 800f722:	1af2      	sublt	r2, r6, r3
 800f724:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f726:	bfb6      	itet	lt
 800f728:	189b      	addlt	r3, r3, r2
 800f72a:	1b9e      	subge	r6, r3, r6
 800f72c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f72e:	9b01      	ldr	r3, [sp, #4]
 800f730:	bfb8      	it	lt
 800f732:	2600      	movlt	r6, #0
 800f734:	2b00      	cmp	r3, #0
 800f736:	bfb5      	itete	lt
 800f738:	eba8 0503 	sublt.w	r5, r8, r3
 800f73c:	9b01      	ldrge	r3, [sp, #4]
 800f73e:	2300      	movlt	r3, #0
 800f740:	4645      	movge	r5, r8
 800f742:	e747      	b.n	800f5d4 <_dtoa_r+0x75c>
 800f744:	9e06      	ldr	r6, [sp, #24]
 800f746:	9f08      	ldr	r7, [sp, #32]
 800f748:	4645      	mov	r5, r8
 800f74a:	e74c      	b.n	800f5e6 <_dtoa_r+0x76e>
 800f74c:	9a06      	ldr	r2, [sp, #24]
 800f74e:	e775      	b.n	800f63c <_dtoa_r+0x7c4>
 800f750:	9b05      	ldr	r3, [sp, #20]
 800f752:	2b01      	cmp	r3, #1
 800f754:	dc18      	bgt.n	800f788 <_dtoa_r+0x910>
 800f756:	9b02      	ldr	r3, [sp, #8]
 800f758:	b9b3      	cbnz	r3, 800f788 <_dtoa_r+0x910>
 800f75a:	9b03      	ldr	r3, [sp, #12]
 800f75c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f760:	b9a3      	cbnz	r3, 800f78c <_dtoa_r+0x914>
 800f762:	9b03      	ldr	r3, [sp, #12]
 800f764:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f768:	0d1b      	lsrs	r3, r3, #20
 800f76a:	051b      	lsls	r3, r3, #20
 800f76c:	b12b      	cbz	r3, 800f77a <_dtoa_r+0x902>
 800f76e:	9b04      	ldr	r3, [sp, #16]
 800f770:	3301      	adds	r3, #1
 800f772:	9304      	str	r3, [sp, #16]
 800f774:	f108 0801 	add.w	r8, r8, #1
 800f778:	2301      	movs	r3, #1
 800f77a:	9306      	str	r3, [sp, #24]
 800f77c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f77e:	2b00      	cmp	r3, #0
 800f780:	f47f af74 	bne.w	800f66c <_dtoa_r+0x7f4>
 800f784:	2001      	movs	r0, #1
 800f786:	e779      	b.n	800f67c <_dtoa_r+0x804>
 800f788:	2300      	movs	r3, #0
 800f78a:	e7f6      	b.n	800f77a <_dtoa_r+0x902>
 800f78c:	9b02      	ldr	r3, [sp, #8]
 800f78e:	e7f4      	b.n	800f77a <_dtoa_r+0x902>
 800f790:	d085      	beq.n	800f69e <_dtoa_r+0x826>
 800f792:	4618      	mov	r0, r3
 800f794:	301c      	adds	r0, #28
 800f796:	e77d      	b.n	800f694 <_dtoa_r+0x81c>
 800f798:	40240000 	.word	0x40240000
 800f79c:	9b01      	ldr	r3, [sp, #4]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	dc38      	bgt.n	800f814 <_dtoa_r+0x99c>
 800f7a2:	9b05      	ldr	r3, [sp, #20]
 800f7a4:	2b02      	cmp	r3, #2
 800f7a6:	dd35      	ble.n	800f814 <_dtoa_r+0x99c>
 800f7a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f7ac:	f1b9 0f00 	cmp.w	r9, #0
 800f7b0:	d10d      	bne.n	800f7ce <_dtoa_r+0x956>
 800f7b2:	4631      	mov	r1, r6
 800f7b4:	464b      	mov	r3, r9
 800f7b6:	2205      	movs	r2, #5
 800f7b8:	4620      	mov	r0, r4
 800f7ba:	f000 f9b7 	bl	800fb2c <__multadd>
 800f7be:	4601      	mov	r1, r0
 800f7c0:	4606      	mov	r6, r0
 800f7c2:	4658      	mov	r0, fp
 800f7c4:	f000 fbce 	bl	800ff64 <__mcmp>
 800f7c8:	2800      	cmp	r0, #0
 800f7ca:	f73f adbd 	bgt.w	800f348 <_dtoa_r+0x4d0>
 800f7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7d0:	9d00      	ldr	r5, [sp, #0]
 800f7d2:	ea6f 0a03 	mvn.w	sl, r3
 800f7d6:	f04f 0800 	mov.w	r8, #0
 800f7da:	4631      	mov	r1, r6
 800f7dc:	4620      	mov	r0, r4
 800f7de:	f000 f983 	bl	800fae8 <_Bfree>
 800f7e2:	2f00      	cmp	r7, #0
 800f7e4:	f43f aeb4 	beq.w	800f550 <_dtoa_r+0x6d8>
 800f7e8:	f1b8 0f00 	cmp.w	r8, #0
 800f7ec:	d005      	beq.n	800f7fa <_dtoa_r+0x982>
 800f7ee:	45b8      	cmp	r8, r7
 800f7f0:	d003      	beq.n	800f7fa <_dtoa_r+0x982>
 800f7f2:	4641      	mov	r1, r8
 800f7f4:	4620      	mov	r0, r4
 800f7f6:	f000 f977 	bl	800fae8 <_Bfree>
 800f7fa:	4639      	mov	r1, r7
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	f000 f973 	bl	800fae8 <_Bfree>
 800f802:	e6a5      	b.n	800f550 <_dtoa_r+0x6d8>
 800f804:	2600      	movs	r6, #0
 800f806:	4637      	mov	r7, r6
 800f808:	e7e1      	b.n	800f7ce <_dtoa_r+0x956>
 800f80a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f80c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f810:	4637      	mov	r7, r6
 800f812:	e599      	b.n	800f348 <_dtoa_r+0x4d0>
 800f814:	9b08      	ldr	r3, [sp, #32]
 800f816:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	f000 80fd 	beq.w	800fa1a <_dtoa_r+0xba2>
 800f820:	2d00      	cmp	r5, #0
 800f822:	dd05      	ble.n	800f830 <_dtoa_r+0x9b8>
 800f824:	4639      	mov	r1, r7
 800f826:	462a      	mov	r2, r5
 800f828:	4620      	mov	r0, r4
 800f82a:	f000 fb2f 	bl	800fe8c <__lshift>
 800f82e:	4607      	mov	r7, r0
 800f830:	9b06      	ldr	r3, [sp, #24]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d05c      	beq.n	800f8f0 <_dtoa_r+0xa78>
 800f836:	6879      	ldr	r1, [r7, #4]
 800f838:	4620      	mov	r0, r4
 800f83a:	f000 f915 	bl	800fa68 <_Balloc>
 800f83e:	4605      	mov	r5, r0
 800f840:	b928      	cbnz	r0, 800f84e <_dtoa_r+0x9d6>
 800f842:	4b80      	ldr	r3, [pc, #512]	; (800fa44 <_dtoa_r+0xbcc>)
 800f844:	4602      	mov	r2, r0
 800f846:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f84a:	f7ff bb2e 	b.w	800eeaa <_dtoa_r+0x32>
 800f84e:	693a      	ldr	r2, [r7, #16]
 800f850:	3202      	adds	r2, #2
 800f852:	0092      	lsls	r2, r2, #2
 800f854:	f107 010c 	add.w	r1, r7, #12
 800f858:	300c      	adds	r0, #12
 800f85a:	f7fe fde1 	bl	800e420 <memcpy>
 800f85e:	2201      	movs	r2, #1
 800f860:	4629      	mov	r1, r5
 800f862:	4620      	mov	r0, r4
 800f864:	f000 fb12 	bl	800fe8c <__lshift>
 800f868:	9b00      	ldr	r3, [sp, #0]
 800f86a:	3301      	adds	r3, #1
 800f86c:	9301      	str	r3, [sp, #4]
 800f86e:	9b00      	ldr	r3, [sp, #0]
 800f870:	444b      	add	r3, r9
 800f872:	9307      	str	r3, [sp, #28]
 800f874:	9b02      	ldr	r3, [sp, #8]
 800f876:	f003 0301 	and.w	r3, r3, #1
 800f87a:	46b8      	mov	r8, r7
 800f87c:	9306      	str	r3, [sp, #24]
 800f87e:	4607      	mov	r7, r0
 800f880:	9b01      	ldr	r3, [sp, #4]
 800f882:	4631      	mov	r1, r6
 800f884:	3b01      	subs	r3, #1
 800f886:	4658      	mov	r0, fp
 800f888:	9302      	str	r3, [sp, #8]
 800f88a:	f7ff fa69 	bl	800ed60 <quorem>
 800f88e:	4603      	mov	r3, r0
 800f890:	3330      	adds	r3, #48	; 0x30
 800f892:	9004      	str	r0, [sp, #16]
 800f894:	4641      	mov	r1, r8
 800f896:	4658      	mov	r0, fp
 800f898:	9308      	str	r3, [sp, #32]
 800f89a:	f000 fb63 	bl	800ff64 <__mcmp>
 800f89e:	463a      	mov	r2, r7
 800f8a0:	4681      	mov	r9, r0
 800f8a2:	4631      	mov	r1, r6
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	f000 fb79 	bl	800ff9c <__mdiff>
 800f8aa:	68c2      	ldr	r2, [r0, #12]
 800f8ac:	9b08      	ldr	r3, [sp, #32]
 800f8ae:	4605      	mov	r5, r0
 800f8b0:	bb02      	cbnz	r2, 800f8f4 <_dtoa_r+0xa7c>
 800f8b2:	4601      	mov	r1, r0
 800f8b4:	4658      	mov	r0, fp
 800f8b6:	f000 fb55 	bl	800ff64 <__mcmp>
 800f8ba:	9b08      	ldr	r3, [sp, #32]
 800f8bc:	4602      	mov	r2, r0
 800f8be:	4629      	mov	r1, r5
 800f8c0:	4620      	mov	r0, r4
 800f8c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f8c6:	f000 f90f 	bl	800fae8 <_Bfree>
 800f8ca:	9b05      	ldr	r3, [sp, #20]
 800f8cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8ce:	9d01      	ldr	r5, [sp, #4]
 800f8d0:	ea43 0102 	orr.w	r1, r3, r2
 800f8d4:	9b06      	ldr	r3, [sp, #24]
 800f8d6:	430b      	orrs	r3, r1
 800f8d8:	9b08      	ldr	r3, [sp, #32]
 800f8da:	d10d      	bne.n	800f8f8 <_dtoa_r+0xa80>
 800f8dc:	2b39      	cmp	r3, #57	; 0x39
 800f8de:	d029      	beq.n	800f934 <_dtoa_r+0xabc>
 800f8e0:	f1b9 0f00 	cmp.w	r9, #0
 800f8e4:	dd01      	ble.n	800f8ea <_dtoa_r+0xa72>
 800f8e6:	9b04      	ldr	r3, [sp, #16]
 800f8e8:	3331      	adds	r3, #49	; 0x31
 800f8ea:	9a02      	ldr	r2, [sp, #8]
 800f8ec:	7013      	strb	r3, [r2, #0]
 800f8ee:	e774      	b.n	800f7da <_dtoa_r+0x962>
 800f8f0:	4638      	mov	r0, r7
 800f8f2:	e7b9      	b.n	800f868 <_dtoa_r+0x9f0>
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	e7e2      	b.n	800f8be <_dtoa_r+0xa46>
 800f8f8:	f1b9 0f00 	cmp.w	r9, #0
 800f8fc:	db06      	blt.n	800f90c <_dtoa_r+0xa94>
 800f8fe:	9905      	ldr	r1, [sp, #20]
 800f900:	ea41 0909 	orr.w	r9, r1, r9
 800f904:	9906      	ldr	r1, [sp, #24]
 800f906:	ea59 0101 	orrs.w	r1, r9, r1
 800f90a:	d120      	bne.n	800f94e <_dtoa_r+0xad6>
 800f90c:	2a00      	cmp	r2, #0
 800f90e:	ddec      	ble.n	800f8ea <_dtoa_r+0xa72>
 800f910:	4659      	mov	r1, fp
 800f912:	2201      	movs	r2, #1
 800f914:	4620      	mov	r0, r4
 800f916:	9301      	str	r3, [sp, #4]
 800f918:	f000 fab8 	bl	800fe8c <__lshift>
 800f91c:	4631      	mov	r1, r6
 800f91e:	4683      	mov	fp, r0
 800f920:	f000 fb20 	bl	800ff64 <__mcmp>
 800f924:	2800      	cmp	r0, #0
 800f926:	9b01      	ldr	r3, [sp, #4]
 800f928:	dc02      	bgt.n	800f930 <_dtoa_r+0xab8>
 800f92a:	d1de      	bne.n	800f8ea <_dtoa_r+0xa72>
 800f92c:	07da      	lsls	r2, r3, #31
 800f92e:	d5dc      	bpl.n	800f8ea <_dtoa_r+0xa72>
 800f930:	2b39      	cmp	r3, #57	; 0x39
 800f932:	d1d8      	bne.n	800f8e6 <_dtoa_r+0xa6e>
 800f934:	9a02      	ldr	r2, [sp, #8]
 800f936:	2339      	movs	r3, #57	; 0x39
 800f938:	7013      	strb	r3, [r2, #0]
 800f93a:	462b      	mov	r3, r5
 800f93c:	461d      	mov	r5, r3
 800f93e:	3b01      	subs	r3, #1
 800f940:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f944:	2a39      	cmp	r2, #57	; 0x39
 800f946:	d050      	beq.n	800f9ea <_dtoa_r+0xb72>
 800f948:	3201      	adds	r2, #1
 800f94a:	701a      	strb	r2, [r3, #0]
 800f94c:	e745      	b.n	800f7da <_dtoa_r+0x962>
 800f94e:	2a00      	cmp	r2, #0
 800f950:	dd03      	ble.n	800f95a <_dtoa_r+0xae2>
 800f952:	2b39      	cmp	r3, #57	; 0x39
 800f954:	d0ee      	beq.n	800f934 <_dtoa_r+0xabc>
 800f956:	3301      	adds	r3, #1
 800f958:	e7c7      	b.n	800f8ea <_dtoa_r+0xa72>
 800f95a:	9a01      	ldr	r2, [sp, #4]
 800f95c:	9907      	ldr	r1, [sp, #28]
 800f95e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f962:	428a      	cmp	r2, r1
 800f964:	d02a      	beq.n	800f9bc <_dtoa_r+0xb44>
 800f966:	4659      	mov	r1, fp
 800f968:	2300      	movs	r3, #0
 800f96a:	220a      	movs	r2, #10
 800f96c:	4620      	mov	r0, r4
 800f96e:	f000 f8dd 	bl	800fb2c <__multadd>
 800f972:	45b8      	cmp	r8, r7
 800f974:	4683      	mov	fp, r0
 800f976:	f04f 0300 	mov.w	r3, #0
 800f97a:	f04f 020a 	mov.w	r2, #10
 800f97e:	4641      	mov	r1, r8
 800f980:	4620      	mov	r0, r4
 800f982:	d107      	bne.n	800f994 <_dtoa_r+0xb1c>
 800f984:	f000 f8d2 	bl	800fb2c <__multadd>
 800f988:	4680      	mov	r8, r0
 800f98a:	4607      	mov	r7, r0
 800f98c:	9b01      	ldr	r3, [sp, #4]
 800f98e:	3301      	adds	r3, #1
 800f990:	9301      	str	r3, [sp, #4]
 800f992:	e775      	b.n	800f880 <_dtoa_r+0xa08>
 800f994:	f000 f8ca 	bl	800fb2c <__multadd>
 800f998:	4639      	mov	r1, r7
 800f99a:	4680      	mov	r8, r0
 800f99c:	2300      	movs	r3, #0
 800f99e:	220a      	movs	r2, #10
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	f000 f8c3 	bl	800fb2c <__multadd>
 800f9a6:	4607      	mov	r7, r0
 800f9a8:	e7f0      	b.n	800f98c <_dtoa_r+0xb14>
 800f9aa:	f1b9 0f00 	cmp.w	r9, #0
 800f9ae:	9a00      	ldr	r2, [sp, #0]
 800f9b0:	bfcc      	ite	gt
 800f9b2:	464d      	movgt	r5, r9
 800f9b4:	2501      	movle	r5, #1
 800f9b6:	4415      	add	r5, r2
 800f9b8:	f04f 0800 	mov.w	r8, #0
 800f9bc:	4659      	mov	r1, fp
 800f9be:	2201      	movs	r2, #1
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	9301      	str	r3, [sp, #4]
 800f9c4:	f000 fa62 	bl	800fe8c <__lshift>
 800f9c8:	4631      	mov	r1, r6
 800f9ca:	4683      	mov	fp, r0
 800f9cc:	f000 faca 	bl	800ff64 <__mcmp>
 800f9d0:	2800      	cmp	r0, #0
 800f9d2:	dcb2      	bgt.n	800f93a <_dtoa_r+0xac2>
 800f9d4:	d102      	bne.n	800f9dc <_dtoa_r+0xb64>
 800f9d6:	9b01      	ldr	r3, [sp, #4]
 800f9d8:	07db      	lsls	r3, r3, #31
 800f9da:	d4ae      	bmi.n	800f93a <_dtoa_r+0xac2>
 800f9dc:	462b      	mov	r3, r5
 800f9de:	461d      	mov	r5, r3
 800f9e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f9e4:	2a30      	cmp	r2, #48	; 0x30
 800f9e6:	d0fa      	beq.n	800f9de <_dtoa_r+0xb66>
 800f9e8:	e6f7      	b.n	800f7da <_dtoa_r+0x962>
 800f9ea:	9a00      	ldr	r2, [sp, #0]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d1a5      	bne.n	800f93c <_dtoa_r+0xac4>
 800f9f0:	f10a 0a01 	add.w	sl, sl, #1
 800f9f4:	2331      	movs	r3, #49	; 0x31
 800f9f6:	e779      	b.n	800f8ec <_dtoa_r+0xa74>
 800f9f8:	4b13      	ldr	r3, [pc, #76]	; (800fa48 <_dtoa_r+0xbd0>)
 800f9fa:	f7ff baaf 	b.w	800ef5c <_dtoa_r+0xe4>
 800f9fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	f47f aa86 	bne.w	800ef12 <_dtoa_r+0x9a>
 800fa06:	4b11      	ldr	r3, [pc, #68]	; (800fa4c <_dtoa_r+0xbd4>)
 800fa08:	f7ff baa8 	b.w	800ef5c <_dtoa_r+0xe4>
 800fa0c:	f1b9 0f00 	cmp.w	r9, #0
 800fa10:	dc03      	bgt.n	800fa1a <_dtoa_r+0xba2>
 800fa12:	9b05      	ldr	r3, [sp, #20]
 800fa14:	2b02      	cmp	r3, #2
 800fa16:	f73f aec9 	bgt.w	800f7ac <_dtoa_r+0x934>
 800fa1a:	9d00      	ldr	r5, [sp, #0]
 800fa1c:	4631      	mov	r1, r6
 800fa1e:	4658      	mov	r0, fp
 800fa20:	f7ff f99e 	bl	800ed60 <quorem>
 800fa24:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fa28:	f805 3b01 	strb.w	r3, [r5], #1
 800fa2c:	9a00      	ldr	r2, [sp, #0]
 800fa2e:	1aaa      	subs	r2, r5, r2
 800fa30:	4591      	cmp	r9, r2
 800fa32:	ddba      	ble.n	800f9aa <_dtoa_r+0xb32>
 800fa34:	4659      	mov	r1, fp
 800fa36:	2300      	movs	r3, #0
 800fa38:	220a      	movs	r2, #10
 800fa3a:	4620      	mov	r0, r4
 800fa3c:	f000 f876 	bl	800fb2c <__multadd>
 800fa40:	4683      	mov	fp, r0
 800fa42:	e7eb      	b.n	800fa1c <_dtoa_r+0xba4>
 800fa44:	08012d3b 	.word	0x08012d3b
 800fa48:	08012c94 	.word	0x08012c94
 800fa4c:	08012cb8 	.word	0x08012cb8

0800fa50 <_localeconv_r>:
 800fa50:	4800      	ldr	r0, [pc, #0]	; (800fa54 <_localeconv_r+0x4>)
 800fa52:	4770      	bx	lr
 800fa54:	20000188 	.word	0x20000188

0800fa58 <malloc>:
 800fa58:	4b02      	ldr	r3, [pc, #8]	; (800fa64 <malloc+0xc>)
 800fa5a:	4601      	mov	r1, r0
 800fa5c:	6818      	ldr	r0, [r3, #0]
 800fa5e:	f000 bbe1 	b.w	8010224 <_malloc_r>
 800fa62:	bf00      	nop
 800fa64:	20000034 	.word	0x20000034

0800fa68 <_Balloc>:
 800fa68:	b570      	push	{r4, r5, r6, lr}
 800fa6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fa6c:	4604      	mov	r4, r0
 800fa6e:	460d      	mov	r5, r1
 800fa70:	b976      	cbnz	r6, 800fa90 <_Balloc+0x28>
 800fa72:	2010      	movs	r0, #16
 800fa74:	f7ff fff0 	bl	800fa58 <malloc>
 800fa78:	4602      	mov	r2, r0
 800fa7a:	6260      	str	r0, [r4, #36]	; 0x24
 800fa7c:	b920      	cbnz	r0, 800fa88 <_Balloc+0x20>
 800fa7e:	4b18      	ldr	r3, [pc, #96]	; (800fae0 <_Balloc+0x78>)
 800fa80:	4818      	ldr	r0, [pc, #96]	; (800fae4 <_Balloc+0x7c>)
 800fa82:	2166      	movs	r1, #102	; 0x66
 800fa84:	f000 fd94 	bl	80105b0 <__assert_func>
 800fa88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fa8c:	6006      	str	r6, [r0, #0]
 800fa8e:	60c6      	str	r6, [r0, #12]
 800fa90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fa92:	68f3      	ldr	r3, [r6, #12]
 800fa94:	b183      	cbz	r3, 800fab8 <_Balloc+0x50>
 800fa96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa98:	68db      	ldr	r3, [r3, #12]
 800fa9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fa9e:	b9b8      	cbnz	r0, 800fad0 <_Balloc+0x68>
 800faa0:	2101      	movs	r1, #1
 800faa2:	fa01 f605 	lsl.w	r6, r1, r5
 800faa6:	1d72      	adds	r2, r6, #5
 800faa8:	0092      	lsls	r2, r2, #2
 800faaa:	4620      	mov	r0, r4
 800faac:	f000 fb5a 	bl	8010164 <_calloc_r>
 800fab0:	b160      	cbz	r0, 800facc <_Balloc+0x64>
 800fab2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fab6:	e00e      	b.n	800fad6 <_Balloc+0x6e>
 800fab8:	2221      	movs	r2, #33	; 0x21
 800faba:	2104      	movs	r1, #4
 800fabc:	4620      	mov	r0, r4
 800fabe:	f000 fb51 	bl	8010164 <_calloc_r>
 800fac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fac4:	60f0      	str	r0, [r6, #12]
 800fac6:	68db      	ldr	r3, [r3, #12]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d1e4      	bne.n	800fa96 <_Balloc+0x2e>
 800facc:	2000      	movs	r0, #0
 800face:	bd70      	pop	{r4, r5, r6, pc}
 800fad0:	6802      	ldr	r2, [r0, #0]
 800fad2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fad6:	2300      	movs	r3, #0
 800fad8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fadc:	e7f7      	b.n	800face <_Balloc+0x66>
 800fade:	bf00      	nop
 800fae0:	08012cc5 	.word	0x08012cc5
 800fae4:	08012d4c 	.word	0x08012d4c

0800fae8 <_Bfree>:
 800fae8:	b570      	push	{r4, r5, r6, lr}
 800faea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800faec:	4605      	mov	r5, r0
 800faee:	460c      	mov	r4, r1
 800faf0:	b976      	cbnz	r6, 800fb10 <_Bfree+0x28>
 800faf2:	2010      	movs	r0, #16
 800faf4:	f7ff ffb0 	bl	800fa58 <malloc>
 800faf8:	4602      	mov	r2, r0
 800fafa:	6268      	str	r0, [r5, #36]	; 0x24
 800fafc:	b920      	cbnz	r0, 800fb08 <_Bfree+0x20>
 800fafe:	4b09      	ldr	r3, [pc, #36]	; (800fb24 <_Bfree+0x3c>)
 800fb00:	4809      	ldr	r0, [pc, #36]	; (800fb28 <_Bfree+0x40>)
 800fb02:	218a      	movs	r1, #138	; 0x8a
 800fb04:	f000 fd54 	bl	80105b0 <__assert_func>
 800fb08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb0c:	6006      	str	r6, [r0, #0]
 800fb0e:	60c6      	str	r6, [r0, #12]
 800fb10:	b13c      	cbz	r4, 800fb22 <_Bfree+0x3a>
 800fb12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fb14:	6862      	ldr	r2, [r4, #4]
 800fb16:	68db      	ldr	r3, [r3, #12]
 800fb18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb1c:	6021      	str	r1, [r4, #0]
 800fb1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fb22:	bd70      	pop	{r4, r5, r6, pc}
 800fb24:	08012cc5 	.word	0x08012cc5
 800fb28:	08012d4c 	.word	0x08012d4c

0800fb2c <__multadd>:
 800fb2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb30:	690e      	ldr	r6, [r1, #16]
 800fb32:	4607      	mov	r7, r0
 800fb34:	4698      	mov	r8, r3
 800fb36:	460c      	mov	r4, r1
 800fb38:	f101 0014 	add.w	r0, r1, #20
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	6805      	ldr	r5, [r0, #0]
 800fb40:	b2a9      	uxth	r1, r5
 800fb42:	fb02 8101 	mla	r1, r2, r1, r8
 800fb46:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800fb4a:	0c2d      	lsrs	r5, r5, #16
 800fb4c:	fb02 c505 	mla	r5, r2, r5, ip
 800fb50:	b289      	uxth	r1, r1
 800fb52:	3301      	adds	r3, #1
 800fb54:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800fb58:	429e      	cmp	r6, r3
 800fb5a:	f840 1b04 	str.w	r1, [r0], #4
 800fb5e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800fb62:	dcec      	bgt.n	800fb3e <__multadd+0x12>
 800fb64:	f1b8 0f00 	cmp.w	r8, #0
 800fb68:	d022      	beq.n	800fbb0 <__multadd+0x84>
 800fb6a:	68a3      	ldr	r3, [r4, #8]
 800fb6c:	42b3      	cmp	r3, r6
 800fb6e:	dc19      	bgt.n	800fba4 <__multadd+0x78>
 800fb70:	6861      	ldr	r1, [r4, #4]
 800fb72:	4638      	mov	r0, r7
 800fb74:	3101      	adds	r1, #1
 800fb76:	f7ff ff77 	bl	800fa68 <_Balloc>
 800fb7a:	4605      	mov	r5, r0
 800fb7c:	b928      	cbnz	r0, 800fb8a <__multadd+0x5e>
 800fb7e:	4602      	mov	r2, r0
 800fb80:	4b0d      	ldr	r3, [pc, #52]	; (800fbb8 <__multadd+0x8c>)
 800fb82:	480e      	ldr	r0, [pc, #56]	; (800fbbc <__multadd+0x90>)
 800fb84:	21b5      	movs	r1, #181	; 0xb5
 800fb86:	f000 fd13 	bl	80105b0 <__assert_func>
 800fb8a:	6922      	ldr	r2, [r4, #16]
 800fb8c:	3202      	adds	r2, #2
 800fb8e:	f104 010c 	add.w	r1, r4, #12
 800fb92:	0092      	lsls	r2, r2, #2
 800fb94:	300c      	adds	r0, #12
 800fb96:	f7fe fc43 	bl	800e420 <memcpy>
 800fb9a:	4621      	mov	r1, r4
 800fb9c:	4638      	mov	r0, r7
 800fb9e:	f7ff ffa3 	bl	800fae8 <_Bfree>
 800fba2:	462c      	mov	r4, r5
 800fba4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800fba8:	3601      	adds	r6, #1
 800fbaa:	f8c3 8014 	str.w	r8, [r3, #20]
 800fbae:	6126      	str	r6, [r4, #16]
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbb6:	bf00      	nop
 800fbb8:	08012d3b 	.word	0x08012d3b
 800fbbc:	08012d4c 	.word	0x08012d4c

0800fbc0 <__hi0bits>:
 800fbc0:	0c03      	lsrs	r3, r0, #16
 800fbc2:	041b      	lsls	r3, r3, #16
 800fbc4:	b9d3      	cbnz	r3, 800fbfc <__hi0bits+0x3c>
 800fbc6:	0400      	lsls	r0, r0, #16
 800fbc8:	2310      	movs	r3, #16
 800fbca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fbce:	bf04      	itt	eq
 800fbd0:	0200      	lsleq	r0, r0, #8
 800fbd2:	3308      	addeq	r3, #8
 800fbd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fbd8:	bf04      	itt	eq
 800fbda:	0100      	lsleq	r0, r0, #4
 800fbdc:	3304      	addeq	r3, #4
 800fbde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fbe2:	bf04      	itt	eq
 800fbe4:	0080      	lsleq	r0, r0, #2
 800fbe6:	3302      	addeq	r3, #2
 800fbe8:	2800      	cmp	r0, #0
 800fbea:	db05      	blt.n	800fbf8 <__hi0bits+0x38>
 800fbec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fbf0:	f103 0301 	add.w	r3, r3, #1
 800fbf4:	bf08      	it	eq
 800fbf6:	2320      	moveq	r3, #32
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	4770      	bx	lr
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	e7e4      	b.n	800fbca <__hi0bits+0xa>

0800fc00 <__lo0bits>:
 800fc00:	6803      	ldr	r3, [r0, #0]
 800fc02:	f013 0207 	ands.w	r2, r3, #7
 800fc06:	4601      	mov	r1, r0
 800fc08:	d00b      	beq.n	800fc22 <__lo0bits+0x22>
 800fc0a:	07da      	lsls	r2, r3, #31
 800fc0c:	d424      	bmi.n	800fc58 <__lo0bits+0x58>
 800fc0e:	0798      	lsls	r0, r3, #30
 800fc10:	bf49      	itett	mi
 800fc12:	085b      	lsrmi	r3, r3, #1
 800fc14:	089b      	lsrpl	r3, r3, #2
 800fc16:	2001      	movmi	r0, #1
 800fc18:	600b      	strmi	r3, [r1, #0]
 800fc1a:	bf5c      	itt	pl
 800fc1c:	600b      	strpl	r3, [r1, #0]
 800fc1e:	2002      	movpl	r0, #2
 800fc20:	4770      	bx	lr
 800fc22:	b298      	uxth	r0, r3
 800fc24:	b9b0      	cbnz	r0, 800fc54 <__lo0bits+0x54>
 800fc26:	0c1b      	lsrs	r3, r3, #16
 800fc28:	2010      	movs	r0, #16
 800fc2a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fc2e:	bf04      	itt	eq
 800fc30:	0a1b      	lsreq	r3, r3, #8
 800fc32:	3008      	addeq	r0, #8
 800fc34:	071a      	lsls	r2, r3, #28
 800fc36:	bf04      	itt	eq
 800fc38:	091b      	lsreq	r3, r3, #4
 800fc3a:	3004      	addeq	r0, #4
 800fc3c:	079a      	lsls	r2, r3, #30
 800fc3e:	bf04      	itt	eq
 800fc40:	089b      	lsreq	r3, r3, #2
 800fc42:	3002      	addeq	r0, #2
 800fc44:	07da      	lsls	r2, r3, #31
 800fc46:	d403      	bmi.n	800fc50 <__lo0bits+0x50>
 800fc48:	085b      	lsrs	r3, r3, #1
 800fc4a:	f100 0001 	add.w	r0, r0, #1
 800fc4e:	d005      	beq.n	800fc5c <__lo0bits+0x5c>
 800fc50:	600b      	str	r3, [r1, #0]
 800fc52:	4770      	bx	lr
 800fc54:	4610      	mov	r0, r2
 800fc56:	e7e8      	b.n	800fc2a <__lo0bits+0x2a>
 800fc58:	2000      	movs	r0, #0
 800fc5a:	4770      	bx	lr
 800fc5c:	2020      	movs	r0, #32
 800fc5e:	4770      	bx	lr

0800fc60 <__i2b>:
 800fc60:	b510      	push	{r4, lr}
 800fc62:	460c      	mov	r4, r1
 800fc64:	2101      	movs	r1, #1
 800fc66:	f7ff feff 	bl	800fa68 <_Balloc>
 800fc6a:	4602      	mov	r2, r0
 800fc6c:	b928      	cbnz	r0, 800fc7a <__i2b+0x1a>
 800fc6e:	4b05      	ldr	r3, [pc, #20]	; (800fc84 <__i2b+0x24>)
 800fc70:	4805      	ldr	r0, [pc, #20]	; (800fc88 <__i2b+0x28>)
 800fc72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fc76:	f000 fc9b 	bl	80105b0 <__assert_func>
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	6144      	str	r4, [r0, #20]
 800fc7e:	6103      	str	r3, [r0, #16]
 800fc80:	bd10      	pop	{r4, pc}
 800fc82:	bf00      	nop
 800fc84:	08012d3b 	.word	0x08012d3b
 800fc88:	08012d4c 	.word	0x08012d4c

0800fc8c <__multiply>:
 800fc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc90:	4614      	mov	r4, r2
 800fc92:	690a      	ldr	r2, [r1, #16]
 800fc94:	6923      	ldr	r3, [r4, #16]
 800fc96:	429a      	cmp	r2, r3
 800fc98:	bfb8      	it	lt
 800fc9a:	460b      	movlt	r3, r1
 800fc9c:	460d      	mov	r5, r1
 800fc9e:	bfbc      	itt	lt
 800fca0:	4625      	movlt	r5, r4
 800fca2:	461c      	movlt	r4, r3
 800fca4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fca8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fcac:	68ab      	ldr	r3, [r5, #8]
 800fcae:	6869      	ldr	r1, [r5, #4]
 800fcb0:	eb0a 0709 	add.w	r7, sl, r9
 800fcb4:	42bb      	cmp	r3, r7
 800fcb6:	b085      	sub	sp, #20
 800fcb8:	bfb8      	it	lt
 800fcba:	3101      	addlt	r1, #1
 800fcbc:	f7ff fed4 	bl	800fa68 <_Balloc>
 800fcc0:	b930      	cbnz	r0, 800fcd0 <__multiply+0x44>
 800fcc2:	4602      	mov	r2, r0
 800fcc4:	4b42      	ldr	r3, [pc, #264]	; (800fdd0 <__multiply+0x144>)
 800fcc6:	4843      	ldr	r0, [pc, #268]	; (800fdd4 <__multiply+0x148>)
 800fcc8:	f240 115d 	movw	r1, #349	; 0x15d
 800fccc:	f000 fc70 	bl	80105b0 <__assert_func>
 800fcd0:	f100 0614 	add.w	r6, r0, #20
 800fcd4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fcd8:	4633      	mov	r3, r6
 800fcda:	2200      	movs	r2, #0
 800fcdc:	4543      	cmp	r3, r8
 800fcde:	d31e      	bcc.n	800fd1e <__multiply+0x92>
 800fce0:	f105 0c14 	add.w	ip, r5, #20
 800fce4:	f104 0314 	add.w	r3, r4, #20
 800fce8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fcec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fcf0:	9202      	str	r2, [sp, #8]
 800fcf2:	ebac 0205 	sub.w	r2, ip, r5
 800fcf6:	3a15      	subs	r2, #21
 800fcf8:	f022 0203 	bic.w	r2, r2, #3
 800fcfc:	3204      	adds	r2, #4
 800fcfe:	f105 0115 	add.w	r1, r5, #21
 800fd02:	458c      	cmp	ip, r1
 800fd04:	bf38      	it	cc
 800fd06:	2204      	movcc	r2, #4
 800fd08:	9201      	str	r2, [sp, #4]
 800fd0a:	9a02      	ldr	r2, [sp, #8]
 800fd0c:	9303      	str	r3, [sp, #12]
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d808      	bhi.n	800fd24 <__multiply+0x98>
 800fd12:	2f00      	cmp	r7, #0
 800fd14:	dc55      	bgt.n	800fdc2 <__multiply+0x136>
 800fd16:	6107      	str	r7, [r0, #16]
 800fd18:	b005      	add	sp, #20
 800fd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd1e:	f843 2b04 	str.w	r2, [r3], #4
 800fd22:	e7db      	b.n	800fcdc <__multiply+0x50>
 800fd24:	f8b3 a000 	ldrh.w	sl, [r3]
 800fd28:	f1ba 0f00 	cmp.w	sl, #0
 800fd2c:	d020      	beq.n	800fd70 <__multiply+0xe4>
 800fd2e:	f105 0e14 	add.w	lr, r5, #20
 800fd32:	46b1      	mov	r9, r6
 800fd34:	2200      	movs	r2, #0
 800fd36:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fd3a:	f8d9 b000 	ldr.w	fp, [r9]
 800fd3e:	b2a1      	uxth	r1, r4
 800fd40:	fa1f fb8b 	uxth.w	fp, fp
 800fd44:	fb0a b101 	mla	r1, sl, r1, fp
 800fd48:	4411      	add	r1, r2
 800fd4a:	f8d9 2000 	ldr.w	r2, [r9]
 800fd4e:	0c24      	lsrs	r4, r4, #16
 800fd50:	0c12      	lsrs	r2, r2, #16
 800fd52:	fb0a 2404 	mla	r4, sl, r4, r2
 800fd56:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fd5a:	b289      	uxth	r1, r1
 800fd5c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fd60:	45f4      	cmp	ip, lr
 800fd62:	f849 1b04 	str.w	r1, [r9], #4
 800fd66:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800fd6a:	d8e4      	bhi.n	800fd36 <__multiply+0xaa>
 800fd6c:	9901      	ldr	r1, [sp, #4]
 800fd6e:	5072      	str	r2, [r6, r1]
 800fd70:	9a03      	ldr	r2, [sp, #12]
 800fd72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fd76:	3304      	adds	r3, #4
 800fd78:	f1b9 0f00 	cmp.w	r9, #0
 800fd7c:	d01f      	beq.n	800fdbe <__multiply+0x132>
 800fd7e:	6834      	ldr	r4, [r6, #0]
 800fd80:	f105 0114 	add.w	r1, r5, #20
 800fd84:	46b6      	mov	lr, r6
 800fd86:	f04f 0a00 	mov.w	sl, #0
 800fd8a:	880a      	ldrh	r2, [r1, #0]
 800fd8c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fd90:	fb09 b202 	mla	r2, r9, r2, fp
 800fd94:	4492      	add	sl, r2
 800fd96:	b2a4      	uxth	r4, r4
 800fd98:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fd9c:	f84e 4b04 	str.w	r4, [lr], #4
 800fda0:	f851 4b04 	ldr.w	r4, [r1], #4
 800fda4:	f8be 2000 	ldrh.w	r2, [lr]
 800fda8:	0c24      	lsrs	r4, r4, #16
 800fdaa:	fb09 2404 	mla	r4, r9, r4, r2
 800fdae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fdb2:	458c      	cmp	ip, r1
 800fdb4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fdb8:	d8e7      	bhi.n	800fd8a <__multiply+0xfe>
 800fdba:	9a01      	ldr	r2, [sp, #4]
 800fdbc:	50b4      	str	r4, [r6, r2]
 800fdbe:	3604      	adds	r6, #4
 800fdc0:	e7a3      	b.n	800fd0a <__multiply+0x7e>
 800fdc2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d1a5      	bne.n	800fd16 <__multiply+0x8a>
 800fdca:	3f01      	subs	r7, #1
 800fdcc:	e7a1      	b.n	800fd12 <__multiply+0x86>
 800fdce:	bf00      	nop
 800fdd0:	08012d3b 	.word	0x08012d3b
 800fdd4:	08012d4c 	.word	0x08012d4c

0800fdd8 <__pow5mult>:
 800fdd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fddc:	4615      	mov	r5, r2
 800fdde:	f012 0203 	ands.w	r2, r2, #3
 800fde2:	4606      	mov	r6, r0
 800fde4:	460f      	mov	r7, r1
 800fde6:	d007      	beq.n	800fdf8 <__pow5mult+0x20>
 800fde8:	4c25      	ldr	r4, [pc, #148]	; (800fe80 <__pow5mult+0xa8>)
 800fdea:	3a01      	subs	r2, #1
 800fdec:	2300      	movs	r3, #0
 800fdee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fdf2:	f7ff fe9b 	bl	800fb2c <__multadd>
 800fdf6:	4607      	mov	r7, r0
 800fdf8:	10ad      	asrs	r5, r5, #2
 800fdfa:	d03d      	beq.n	800fe78 <__pow5mult+0xa0>
 800fdfc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fdfe:	b97c      	cbnz	r4, 800fe20 <__pow5mult+0x48>
 800fe00:	2010      	movs	r0, #16
 800fe02:	f7ff fe29 	bl	800fa58 <malloc>
 800fe06:	4602      	mov	r2, r0
 800fe08:	6270      	str	r0, [r6, #36]	; 0x24
 800fe0a:	b928      	cbnz	r0, 800fe18 <__pow5mult+0x40>
 800fe0c:	4b1d      	ldr	r3, [pc, #116]	; (800fe84 <__pow5mult+0xac>)
 800fe0e:	481e      	ldr	r0, [pc, #120]	; (800fe88 <__pow5mult+0xb0>)
 800fe10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fe14:	f000 fbcc 	bl	80105b0 <__assert_func>
 800fe18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fe1c:	6004      	str	r4, [r0, #0]
 800fe1e:	60c4      	str	r4, [r0, #12]
 800fe20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fe24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fe28:	b94c      	cbnz	r4, 800fe3e <__pow5mult+0x66>
 800fe2a:	f240 2171 	movw	r1, #625	; 0x271
 800fe2e:	4630      	mov	r0, r6
 800fe30:	f7ff ff16 	bl	800fc60 <__i2b>
 800fe34:	2300      	movs	r3, #0
 800fe36:	f8c8 0008 	str.w	r0, [r8, #8]
 800fe3a:	4604      	mov	r4, r0
 800fe3c:	6003      	str	r3, [r0, #0]
 800fe3e:	f04f 0900 	mov.w	r9, #0
 800fe42:	07eb      	lsls	r3, r5, #31
 800fe44:	d50a      	bpl.n	800fe5c <__pow5mult+0x84>
 800fe46:	4639      	mov	r1, r7
 800fe48:	4622      	mov	r2, r4
 800fe4a:	4630      	mov	r0, r6
 800fe4c:	f7ff ff1e 	bl	800fc8c <__multiply>
 800fe50:	4639      	mov	r1, r7
 800fe52:	4680      	mov	r8, r0
 800fe54:	4630      	mov	r0, r6
 800fe56:	f7ff fe47 	bl	800fae8 <_Bfree>
 800fe5a:	4647      	mov	r7, r8
 800fe5c:	106d      	asrs	r5, r5, #1
 800fe5e:	d00b      	beq.n	800fe78 <__pow5mult+0xa0>
 800fe60:	6820      	ldr	r0, [r4, #0]
 800fe62:	b938      	cbnz	r0, 800fe74 <__pow5mult+0x9c>
 800fe64:	4622      	mov	r2, r4
 800fe66:	4621      	mov	r1, r4
 800fe68:	4630      	mov	r0, r6
 800fe6a:	f7ff ff0f 	bl	800fc8c <__multiply>
 800fe6e:	6020      	str	r0, [r4, #0]
 800fe70:	f8c0 9000 	str.w	r9, [r0]
 800fe74:	4604      	mov	r4, r0
 800fe76:	e7e4      	b.n	800fe42 <__pow5mult+0x6a>
 800fe78:	4638      	mov	r0, r7
 800fe7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe7e:	bf00      	nop
 800fe80:	08012ea0 	.word	0x08012ea0
 800fe84:	08012cc5 	.word	0x08012cc5
 800fe88:	08012d4c 	.word	0x08012d4c

0800fe8c <__lshift>:
 800fe8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe90:	460c      	mov	r4, r1
 800fe92:	6849      	ldr	r1, [r1, #4]
 800fe94:	6923      	ldr	r3, [r4, #16]
 800fe96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fe9a:	68a3      	ldr	r3, [r4, #8]
 800fe9c:	4607      	mov	r7, r0
 800fe9e:	4691      	mov	r9, r2
 800fea0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fea4:	f108 0601 	add.w	r6, r8, #1
 800fea8:	42b3      	cmp	r3, r6
 800feaa:	db0b      	blt.n	800fec4 <__lshift+0x38>
 800feac:	4638      	mov	r0, r7
 800feae:	f7ff fddb 	bl	800fa68 <_Balloc>
 800feb2:	4605      	mov	r5, r0
 800feb4:	b948      	cbnz	r0, 800feca <__lshift+0x3e>
 800feb6:	4602      	mov	r2, r0
 800feb8:	4b28      	ldr	r3, [pc, #160]	; (800ff5c <__lshift+0xd0>)
 800feba:	4829      	ldr	r0, [pc, #164]	; (800ff60 <__lshift+0xd4>)
 800febc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fec0:	f000 fb76 	bl	80105b0 <__assert_func>
 800fec4:	3101      	adds	r1, #1
 800fec6:	005b      	lsls	r3, r3, #1
 800fec8:	e7ee      	b.n	800fea8 <__lshift+0x1c>
 800feca:	2300      	movs	r3, #0
 800fecc:	f100 0114 	add.w	r1, r0, #20
 800fed0:	f100 0210 	add.w	r2, r0, #16
 800fed4:	4618      	mov	r0, r3
 800fed6:	4553      	cmp	r3, sl
 800fed8:	db33      	blt.n	800ff42 <__lshift+0xb6>
 800feda:	6920      	ldr	r0, [r4, #16]
 800fedc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fee0:	f104 0314 	add.w	r3, r4, #20
 800fee4:	f019 091f 	ands.w	r9, r9, #31
 800fee8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800feec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fef0:	d02b      	beq.n	800ff4a <__lshift+0xbe>
 800fef2:	f1c9 0e20 	rsb	lr, r9, #32
 800fef6:	468a      	mov	sl, r1
 800fef8:	2200      	movs	r2, #0
 800fefa:	6818      	ldr	r0, [r3, #0]
 800fefc:	fa00 f009 	lsl.w	r0, r0, r9
 800ff00:	4302      	orrs	r2, r0
 800ff02:	f84a 2b04 	str.w	r2, [sl], #4
 800ff06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff0a:	459c      	cmp	ip, r3
 800ff0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ff10:	d8f3      	bhi.n	800fefa <__lshift+0x6e>
 800ff12:	ebac 0304 	sub.w	r3, ip, r4
 800ff16:	3b15      	subs	r3, #21
 800ff18:	f023 0303 	bic.w	r3, r3, #3
 800ff1c:	3304      	adds	r3, #4
 800ff1e:	f104 0015 	add.w	r0, r4, #21
 800ff22:	4584      	cmp	ip, r0
 800ff24:	bf38      	it	cc
 800ff26:	2304      	movcc	r3, #4
 800ff28:	50ca      	str	r2, [r1, r3]
 800ff2a:	b10a      	cbz	r2, 800ff30 <__lshift+0xa4>
 800ff2c:	f108 0602 	add.w	r6, r8, #2
 800ff30:	3e01      	subs	r6, #1
 800ff32:	4638      	mov	r0, r7
 800ff34:	612e      	str	r6, [r5, #16]
 800ff36:	4621      	mov	r1, r4
 800ff38:	f7ff fdd6 	bl	800fae8 <_Bfree>
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff42:	f842 0f04 	str.w	r0, [r2, #4]!
 800ff46:	3301      	adds	r3, #1
 800ff48:	e7c5      	b.n	800fed6 <__lshift+0x4a>
 800ff4a:	3904      	subs	r1, #4
 800ff4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff50:	f841 2f04 	str.w	r2, [r1, #4]!
 800ff54:	459c      	cmp	ip, r3
 800ff56:	d8f9      	bhi.n	800ff4c <__lshift+0xc0>
 800ff58:	e7ea      	b.n	800ff30 <__lshift+0xa4>
 800ff5a:	bf00      	nop
 800ff5c:	08012d3b 	.word	0x08012d3b
 800ff60:	08012d4c 	.word	0x08012d4c

0800ff64 <__mcmp>:
 800ff64:	b530      	push	{r4, r5, lr}
 800ff66:	6902      	ldr	r2, [r0, #16]
 800ff68:	690c      	ldr	r4, [r1, #16]
 800ff6a:	1b12      	subs	r2, r2, r4
 800ff6c:	d10e      	bne.n	800ff8c <__mcmp+0x28>
 800ff6e:	f100 0314 	add.w	r3, r0, #20
 800ff72:	3114      	adds	r1, #20
 800ff74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ff78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ff7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ff80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ff84:	42a5      	cmp	r5, r4
 800ff86:	d003      	beq.n	800ff90 <__mcmp+0x2c>
 800ff88:	d305      	bcc.n	800ff96 <__mcmp+0x32>
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	4610      	mov	r0, r2
 800ff8e:	bd30      	pop	{r4, r5, pc}
 800ff90:	4283      	cmp	r3, r0
 800ff92:	d3f3      	bcc.n	800ff7c <__mcmp+0x18>
 800ff94:	e7fa      	b.n	800ff8c <__mcmp+0x28>
 800ff96:	f04f 32ff 	mov.w	r2, #4294967295
 800ff9a:	e7f7      	b.n	800ff8c <__mcmp+0x28>

0800ff9c <__mdiff>:
 800ff9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa0:	460c      	mov	r4, r1
 800ffa2:	4606      	mov	r6, r0
 800ffa4:	4611      	mov	r1, r2
 800ffa6:	4620      	mov	r0, r4
 800ffa8:	4617      	mov	r7, r2
 800ffaa:	f7ff ffdb 	bl	800ff64 <__mcmp>
 800ffae:	1e05      	subs	r5, r0, #0
 800ffb0:	d110      	bne.n	800ffd4 <__mdiff+0x38>
 800ffb2:	4629      	mov	r1, r5
 800ffb4:	4630      	mov	r0, r6
 800ffb6:	f7ff fd57 	bl	800fa68 <_Balloc>
 800ffba:	b930      	cbnz	r0, 800ffca <__mdiff+0x2e>
 800ffbc:	4b39      	ldr	r3, [pc, #228]	; (80100a4 <__mdiff+0x108>)
 800ffbe:	4602      	mov	r2, r0
 800ffc0:	f240 2132 	movw	r1, #562	; 0x232
 800ffc4:	4838      	ldr	r0, [pc, #224]	; (80100a8 <__mdiff+0x10c>)
 800ffc6:	f000 faf3 	bl	80105b0 <__assert_func>
 800ffca:	2301      	movs	r3, #1
 800ffcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ffd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd4:	bfa4      	itt	ge
 800ffd6:	463b      	movge	r3, r7
 800ffd8:	4627      	movge	r7, r4
 800ffda:	4630      	mov	r0, r6
 800ffdc:	6879      	ldr	r1, [r7, #4]
 800ffde:	bfa6      	itte	ge
 800ffe0:	461c      	movge	r4, r3
 800ffe2:	2500      	movge	r5, #0
 800ffe4:	2501      	movlt	r5, #1
 800ffe6:	f7ff fd3f 	bl	800fa68 <_Balloc>
 800ffea:	b920      	cbnz	r0, 800fff6 <__mdiff+0x5a>
 800ffec:	4b2d      	ldr	r3, [pc, #180]	; (80100a4 <__mdiff+0x108>)
 800ffee:	4602      	mov	r2, r0
 800fff0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fff4:	e7e6      	b.n	800ffc4 <__mdiff+0x28>
 800fff6:	693e      	ldr	r6, [r7, #16]
 800fff8:	60c5      	str	r5, [r0, #12]
 800fffa:	6925      	ldr	r5, [r4, #16]
 800fffc:	f107 0114 	add.w	r1, r7, #20
 8010000:	f104 0914 	add.w	r9, r4, #20
 8010004:	f100 0e14 	add.w	lr, r0, #20
 8010008:	f107 0210 	add.w	r2, r7, #16
 801000c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010010:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010014:	46f2      	mov	sl, lr
 8010016:	2700      	movs	r7, #0
 8010018:	f859 3b04 	ldr.w	r3, [r9], #4
 801001c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010020:	fa1f f883 	uxth.w	r8, r3
 8010024:	fa17 f78b 	uxtah	r7, r7, fp
 8010028:	0c1b      	lsrs	r3, r3, #16
 801002a:	eba7 0808 	sub.w	r8, r7, r8
 801002e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010032:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010036:	fa1f f888 	uxth.w	r8, r8
 801003a:	141f      	asrs	r7, r3, #16
 801003c:	454d      	cmp	r5, r9
 801003e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010042:	f84a 3b04 	str.w	r3, [sl], #4
 8010046:	d8e7      	bhi.n	8010018 <__mdiff+0x7c>
 8010048:	1b2b      	subs	r3, r5, r4
 801004a:	3b15      	subs	r3, #21
 801004c:	f023 0303 	bic.w	r3, r3, #3
 8010050:	3304      	adds	r3, #4
 8010052:	3415      	adds	r4, #21
 8010054:	42a5      	cmp	r5, r4
 8010056:	bf38      	it	cc
 8010058:	2304      	movcc	r3, #4
 801005a:	4419      	add	r1, r3
 801005c:	4473      	add	r3, lr
 801005e:	469e      	mov	lr, r3
 8010060:	460d      	mov	r5, r1
 8010062:	4565      	cmp	r5, ip
 8010064:	d30e      	bcc.n	8010084 <__mdiff+0xe8>
 8010066:	f10c 0203 	add.w	r2, ip, #3
 801006a:	1a52      	subs	r2, r2, r1
 801006c:	f022 0203 	bic.w	r2, r2, #3
 8010070:	3903      	subs	r1, #3
 8010072:	458c      	cmp	ip, r1
 8010074:	bf38      	it	cc
 8010076:	2200      	movcc	r2, #0
 8010078:	441a      	add	r2, r3
 801007a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801007e:	b17b      	cbz	r3, 80100a0 <__mdiff+0x104>
 8010080:	6106      	str	r6, [r0, #16]
 8010082:	e7a5      	b.n	800ffd0 <__mdiff+0x34>
 8010084:	f855 8b04 	ldr.w	r8, [r5], #4
 8010088:	fa17 f488 	uxtah	r4, r7, r8
 801008c:	1422      	asrs	r2, r4, #16
 801008e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010092:	b2a4      	uxth	r4, r4
 8010094:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010098:	f84e 4b04 	str.w	r4, [lr], #4
 801009c:	1417      	asrs	r7, r2, #16
 801009e:	e7e0      	b.n	8010062 <__mdiff+0xc6>
 80100a0:	3e01      	subs	r6, #1
 80100a2:	e7ea      	b.n	801007a <__mdiff+0xde>
 80100a4:	08012d3b 	.word	0x08012d3b
 80100a8:	08012d4c 	.word	0x08012d4c

080100ac <__d2b>:
 80100ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80100b0:	4689      	mov	r9, r1
 80100b2:	2101      	movs	r1, #1
 80100b4:	ec57 6b10 	vmov	r6, r7, d0
 80100b8:	4690      	mov	r8, r2
 80100ba:	f7ff fcd5 	bl	800fa68 <_Balloc>
 80100be:	4604      	mov	r4, r0
 80100c0:	b930      	cbnz	r0, 80100d0 <__d2b+0x24>
 80100c2:	4602      	mov	r2, r0
 80100c4:	4b25      	ldr	r3, [pc, #148]	; (801015c <__d2b+0xb0>)
 80100c6:	4826      	ldr	r0, [pc, #152]	; (8010160 <__d2b+0xb4>)
 80100c8:	f240 310a 	movw	r1, #778	; 0x30a
 80100cc:	f000 fa70 	bl	80105b0 <__assert_func>
 80100d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80100d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80100d8:	bb35      	cbnz	r5, 8010128 <__d2b+0x7c>
 80100da:	2e00      	cmp	r6, #0
 80100dc:	9301      	str	r3, [sp, #4]
 80100de:	d028      	beq.n	8010132 <__d2b+0x86>
 80100e0:	4668      	mov	r0, sp
 80100e2:	9600      	str	r6, [sp, #0]
 80100e4:	f7ff fd8c 	bl	800fc00 <__lo0bits>
 80100e8:	9900      	ldr	r1, [sp, #0]
 80100ea:	b300      	cbz	r0, 801012e <__d2b+0x82>
 80100ec:	9a01      	ldr	r2, [sp, #4]
 80100ee:	f1c0 0320 	rsb	r3, r0, #32
 80100f2:	fa02 f303 	lsl.w	r3, r2, r3
 80100f6:	430b      	orrs	r3, r1
 80100f8:	40c2      	lsrs	r2, r0
 80100fa:	6163      	str	r3, [r4, #20]
 80100fc:	9201      	str	r2, [sp, #4]
 80100fe:	9b01      	ldr	r3, [sp, #4]
 8010100:	61a3      	str	r3, [r4, #24]
 8010102:	2b00      	cmp	r3, #0
 8010104:	bf14      	ite	ne
 8010106:	2202      	movne	r2, #2
 8010108:	2201      	moveq	r2, #1
 801010a:	6122      	str	r2, [r4, #16]
 801010c:	b1d5      	cbz	r5, 8010144 <__d2b+0x98>
 801010e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010112:	4405      	add	r5, r0
 8010114:	f8c9 5000 	str.w	r5, [r9]
 8010118:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801011c:	f8c8 0000 	str.w	r0, [r8]
 8010120:	4620      	mov	r0, r4
 8010122:	b003      	add	sp, #12
 8010124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010128:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801012c:	e7d5      	b.n	80100da <__d2b+0x2e>
 801012e:	6161      	str	r1, [r4, #20]
 8010130:	e7e5      	b.n	80100fe <__d2b+0x52>
 8010132:	a801      	add	r0, sp, #4
 8010134:	f7ff fd64 	bl	800fc00 <__lo0bits>
 8010138:	9b01      	ldr	r3, [sp, #4]
 801013a:	6163      	str	r3, [r4, #20]
 801013c:	2201      	movs	r2, #1
 801013e:	6122      	str	r2, [r4, #16]
 8010140:	3020      	adds	r0, #32
 8010142:	e7e3      	b.n	801010c <__d2b+0x60>
 8010144:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010148:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801014c:	f8c9 0000 	str.w	r0, [r9]
 8010150:	6918      	ldr	r0, [r3, #16]
 8010152:	f7ff fd35 	bl	800fbc0 <__hi0bits>
 8010156:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801015a:	e7df      	b.n	801011c <__d2b+0x70>
 801015c:	08012d3b 	.word	0x08012d3b
 8010160:	08012d4c 	.word	0x08012d4c

08010164 <_calloc_r>:
 8010164:	b513      	push	{r0, r1, r4, lr}
 8010166:	434a      	muls	r2, r1
 8010168:	4611      	mov	r1, r2
 801016a:	9201      	str	r2, [sp, #4]
 801016c:	f000 f85a 	bl	8010224 <_malloc_r>
 8010170:	4604      	mov	r4, r0
 8010172:	b118      	cbz	r0, 801017c <_calloc_r+0x18>
 8010174:	9a01      	ldr	r2, [sp, #4]
 8010176:	2100      	movs	r1, #0
 8010178:	f7fe f960 	bl	800e43c <memset>
 801017c:	4620      	mov	r0, r4
 801017e:	b002      	add	sp, #8
 8010180:	bd10      	pop	{r4, pc}
	...

08010184 <_free_r>:
 8010184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010186:	2900      	cmp	r1, #0
 8010188:	d048      	beq.n	801021c <_free_r+0x98>
 801018a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801018e:	9001      	str	r0, [sp, #4]
 8010190:	2b00      	cmp	r3, #0
 8010192:	f1a1 0404 	sub.w	r4, r1, #4
 8010196:	bfb8      	it	lt
 8010198:	18e4      	addlt	r4, r4, r3
 801019a:	f000 fa65 	bl	8010668 <__malloc_lock>
 801019e:	4a20      	ldr	r2, [pc, #128]	; (8010220 <_free_r+0x9c>)
 80101a0:	9801      	ldr	r0, [sp, #4]
 80101a2:	6813      	ldr	r3, [r2, #0]
 80101a4:	4615      	mov	r5, r2
 80101a6:	b933      	cbnz	r3, 80101b6 <_free_r+0x32>
 80101a8:	6063      	str	r3, [r4, #4]
 80101aa:	6014      	str	r4, [r2, #0]
 80101ac:	b003      	add	sp, #12
 80101ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80101b2:	f000 ba5f 	b.w	8010674 <__malloc_unlock>
 80101b6:	42a3      	cmp	r3, r4
 80101b8:	d90b      	bls.n	80101d2 <_free_r+0x4e>
 80101ba:	6821      	ldr	r1, [r4, #0]
 80101bc:	1862      	adds	r2, r4, r1
 80101be:	4293      	cmp	r3, r2
 80101c0:	bf04      	itt	eq
 80101c2:	681a      	ldreq	r2, [r3, #0]
 80101c4:	685b      	ldreq	r3, [r3, #4]
 80101c6:	6063      	str	r3, [r4, #4]
 80101c8:	bf04      	itt	eq
 80101ca:	1852      	addeq	r2, r2, r1
 80101cc:	6022      	streq	r2, [r4, #0]
 80101ce:	602c      	str	r4, [r5, #0]
 80101d0:	e7ec      	b.n	80101ac <_free_r+0x28>
 80101d2:	461a      	mov	r2, r3
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	b10b      	cbz	r3, 80101dc <_free_r+0x58>
 80101d8:	42a3      	cmp	r3, r4
 80101da:	d9fa      	bls.n	80101d2 <_free_r+0x4e>
 80101dc:	6811      	ldr	r1, [r2, #0]
 80101de:	1855      	adds	r5, r2, r1
 80101e0:	42a5      	cmp	r5, r4
 80101e2:	d10b      	bne.n	80101fc <_free_r+0x78>
 80101e4:	6824      	ldr	r4, [r4, #0]
 80101e6:	4421      	add	r1, r4
 80101e8:	1854      	adds	r4, r2, r1
 80101ea:	42a3      	cmp	r3, r4
 80101ec:	6011      	str	r1, [r2, #0]
 80101ee:	d1dd      	bne.n	80101ac <_free_r+0x28>
 80101f0:	681c      	ldr	r4, [r3, #0]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	6053      	str	r3, [r2, #4]
 80101f6:	4421      	add	r1, r4
 80101f8:	6011      	str	r1, [r2, #0]
 80101fa:	e7d7      	b.n	80101ac <_free_r+0x28>
 80101fc:	d902      	bls.n	8010204 <_free_r+0x80>
 80101fe:	230c      	movs	r3, #12
 8010200:	6003      	str	r3, [r0, #0]
 8010202:	e7d3      	b.n	80101ac <_free_r+0x28>
 8010204:	6825      	ldr	r5, [r4, #0]
 8010206:	1961      	adds	r1, r4, r5
 8010208:	428b      	cmp	r3, r1
 801020a:	bf04      	itt	eq
 801020c:	6819      	ldreq	r1, [r3, #0]
 801020e:	685b      	ldreq	r3, [r3, #4]
 8010210:	6063      	str	r3, [r4, #4]
 8010212:	bf04      	itt	eq
 8010214:	1949      	addeq	r1, r1, r5
 8010216:	6021      	streq	r1, [r4, #0]
 8010218:	6054      	str	r4, [r2, #4]
 801021a:	e7c7      	b.n	80101ac <_free_r+0x28>
 801021c:	b003      	add	sp, #12
 801021e:	bd30      	pop	{r4, r5, pc}
 8010220:	20004618 	.word	0x20004618

08010224 <_malloc_r>:
 8010224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010226:	1ccd      	adds	r5, r1, #3
 8010228:	f025 0503 	bic.w	r5, r5, #3
 801022c:	3508      	adds	r5, #8
 801022e:	2d0c      	cmp	r5, #12
 8010230:	bf38      	it	cc
 8010232:	250c      	movcc	r5, #12
 8010234:	2d00      	cmp	r5, #0
 8010236:	4606      	mov	r6, r0
 8010238:	db01      	blt.n	801023e <_malloc_r+0x1a>
 801023a:	42a9      	cmp	r1, r5
 801023c:	d903      	bls.n	8010246 <_malloc_r+0x22>
 801023e:	230c      	movs	r3, #12
 8010240:	6033      	str	r3, [r6, #0]
 8010242:	2000      	movs	r0, #0
 8010244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010246:	f000 fa0f 	bl	8010668 <__malloc_lock>
 801024a:	4921      	ldr	r1, [pc, #132]	; (80102d0 <_malloc_r+0xac>)
 801024c:	680a      	ldr	r2, [r1, #0]
 801024e:	4614      	mov	r4, r2
 8010250:	b99c      	cbnz	r4, 801027a <_malloc_r+0x56>
 8010252:	4f20      	ldr	r7, [pc, #128]	; (80102d4 <_malloc_r+0xb0>)
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	b923      	cbnz	r3, 8010262 <_malloc_r+0x3e>
 8010258:	4621      	mov	r1, r4
 801025a:	4630      	mov	r0, r6
 801025c:	f000 f998 	bl	8010590 <_sbrk_r>
 8010260:	6038      	str	r0, [r7, #0]
 8010262:	4629      	mov	r1, r5
 8010264:	4630      	mov	r0, r6
 8010266:	f000 f993 	bl	8010590 <_sbrk_r>
 801026a:	1c43      	adds	r3, r0, #1
 801026c:	d123      	bne.n	80102b6 <_malloc_r+0x92>
 801026e:	230c      	movs	r3, #12
 8010270:	6033      	str	r3, [r6, #0]
 8010272:	4630      	mov	r0, r6
 8010274:	f000 f9fe 	bl	8010674 <__malloc_unlock>
 8010278:	e7e3      	b.n	8010242 <_malloc_r+0x1e>
 801027a:	6823      	ldr	r3, [r4, #0]
 801027c:	1b5b      	subs	r3, r3, r5
 801027e:	d417      	bmi.n	80102b0 <_malloc_r+0x8c>
 8010280:	2b0b      	cmp	r3, #11
 8010282:	d903      	bls.n	801028c <_malloc_r+0x68>
 8010284:	6023      	str	r3, [r4, #0]
 8010286:	441c      	add	r4, r3
 8010288:	6025      	str	r5, [r4, #0]
 801028a:	e004      	b.n	8010296 <_malloc_r+0x72>
 801028c:	6863      	ldr	r3, [r4, #4]
 801028e:	42a2      	cmp	r2, r4
 8010290:	bf0c      	ite	eq
 8010292:	600b      	streq	r3, [r1, #0]
 8010294:	6053      	strne	r3, [r2, #4]
 8010296:	4630      	mov	r0, r6
 8010298:	f000 f9ec 	bl	8010674 <__malloc_unlock>
 801029c:	f104 000b 	add.w	r0, r4, #11
 80102a0:	1d23      	adds	r3, r4, #4
 80102a2:	f020 0007 	bic.w	r0, r0, #7
 80102a6:	1ac2      	subs	r2, r0, r3
 80102a8:	d0cc      	beq.n	8010244 <_malloc_r+0x20>
 80102aa:	1a1b      	subs	r3, r3, r0
 80102ac:	50a3      	str	r3, [r4, r2]
 80102ae:	e7c9      	b.n	8010244 <_malloc_r+0x20>
 80102b0:	4622      	mov	r2, r4
 80102b2:	6864      	ldr	r4, [r4, #4]
 80102b4:	e7cc      	b.n	8010250 <_malloc_r+0x2c>
 80102b6:	1cc4      	adds	r4, r0, #3
 80102b8:	f024 0403 	bic.w	r4, r4, #3
 80102bc:	42a0      	cmp	r0, r4
 80102be:	d0e3      	beq.n	8010288 <_malloc_r+0x64>
 80102c0:	1a21      	subs	r1, r4, r0
 80102c2:	4630      	mov	r0, r6
 80102c4:	f000 f964 	bl	8010590 <_sbrk_r>
 80102c8:	3001      	adds	r0, #1
 80102ca:	d1dd      	bne.n	8010288 <_malloc_r+0x64>
 80102cc:	e7cf      	b.n	801026e <_malloc_r+0x4a>
 80102ce:	bf00      	nop
 80102d0:	20004618 	.word	0x20004618
 80102d4:	2000461c 	.word	0x2000461c

080102d8 <__ssputs_r>:
 80102d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102dc:	688e      	ldr	r6, [r1, #8]
 80102de:	429e      	cmp	r6, r3
 80102e0:	4682      	mov	sl, r0
 80102e2:	460c      	mov	r4, r1
 80102e4:	4690      	mov	r8, r2
 80102e6:	461f      	mov	r7, r3
 80102e8:	d838      	bhi.n	801035c <__ssputs_r+0x84>
 80102ea:	898a      	ldrh	r2, [r1, #12]
 80102ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80102f0:	d032      	beq.n	8010358 <__ssputs_r+0x80>
 80102f2:	6825      	ldr	r5, [r4, #0]
 80102f4:	6909      	ldr	r1, [r1, #16]
 80102f6:	eba5 0901 	sub.w	r9, r5, r1
 80102fa:	6965      	ldr	r5, [r4, #20]
 80102fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010300:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010304:	3301      	adds	r3, #1
 8010306:	444b      	add	r3, r9
 8010308:	106d      	asrs	r5, r5, #1
 801030a:	429d      	cmp	r5, r3
 801030c:	bf38      	it	cc
 801030e:	461d      	movcc	r5, r3
 8010310:	0553      	lsls	r3, r2, #21
 8010312:	d531      	bpl.n	8010378 <__ssputs_r+0xa0>
 8010314:	4629      	mov	r1, r5
 8010316:	f7ff ff85 	bl	8010224 <_malloc_r>
 801031a:	4606      	mov	r6, r0
 801031c:	b950      	cbnz	r0, 8010334 <__ssputs_r+0x5c>
 801031e:	230c      	movs	r3, #12
 8010320:	f8ca 3000 	str.w	r3, [sl]
 8010324:	89a3      	ldrh	r3, [r4, #12]
 8010326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801032a:	81a3      	strh	r3, [r4, #12]
 801032c:	f04f 30ff 	mov.w	r0, #4294967295
 8010330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010334:	6921      	ldr	r1, [r4, #16]
 8010336:	464a      	mov	r2, r9
 8010338:	f7fe f872 	bl	800e420 <memcpy>
 801033c:	89a3      	ldrh	r3, [r4, #12]
 801033e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010346:	81a3      	strh	r3, [r4, #12]
 8010348:	6126      	str	r6, [r4, #16]
 801034a:	6165      	str	r5, [r4, #20]
 801034c:	444e      	add	r6, r9
 801034e:	eba5 0509 	sub.w	r5, r5, r9
 8010352:	6026      	str	r6, [r4, #0]
 8010354:	60a5      	str	r5, [r4, #8]
 8010356:	463e      	mov	r6, r7
 8010358:	42be      	cmp	r6, r7
 801035a:	d900      	bls.n	801035e <__ssputs_r+0x86>
 801035c:	463e      	mov	r6, r7
 801035e:	4632      	mov	r2, r6
 8010360:	6820      	ldr	r0, [r4, #0]
 8010362:	4641      	mov	r1, r8
 8010364:	f000 f966 	bl	8010634 <memmove>
 8010368:	68a3      	ldr	r3, [r4, #8]
 801036a:	6822      	ldr	r2, [r4, #0]
 801036c:	1b9b      	subs	r3, r3, r6
 801036e:	4432      	add	r2, r6
 8010370:	60a3      	str	r3, [r4, #8]
 8010372:	6022      	str	r2, [r4, #0]
 8010374:	2000      	movs	r0, #0
 8010376:	e7db      	b.n	8010330 <__ssputs_r+0x58>
 8010378:	462a      	mov	r2, r5
 801037a:	f000 f981 	bl	8010680 <_realloc_r>
 801037e:	4606      	mov	r6, r0
 8010380:	2800      	cmp	r0, #0
 8010382:	d1e1      	bne.n	8010348 <__ssputs_r+0x70>
 8010384:	6921      	ldr	r1, [r4, #16]
 8010386:	4650      	mov	r0, sl
 8010388:	f7ff fefc 	bl	8010184 <_free_r>
 801038c:	e7c7      	b.n	801031e <__ssputs_r+0x46>
	...

08010390 <_svfiprintf_r>:
 8010390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010394:	4698      	mov	r8, r3
 8010396:	898b      	ldrh	r3, [r1, #12]
 8010398:	061b      	lsls	r3, r3, #24
 801039a:	b09d      	sub	sp, #116	; 0x74
 801039c:	4607      	mov	r7, r0
 801039e:	460d      	mov	r5, r1
 80103a0:	4614      	mov	r4, r2
 80103a2:	d50e      	bpl.n	80103c2 <_svfiprintf_r+0x32>
 80103a4:	690b      	ldr	r3, [r1, #16]
 80103a6:	b963      	cbnz	r3, 80103c2 <_svfiprintf_r+0x32>
 80103a8:	2140      	movs	r1, #64	; 0x40
 80103aa:	f7ff ff3b 	bl	8010224 <_malloc_r>
 80103ae:	6028      	str	r0, [r5, #0]
 80103b0:	6128      	str	r0, [r5, #16]
 80103b2:	b920      	cbnz	r0, 80103be <_svfiprintf_r+0x2e>
 80103b4:	230c      	movs	r3, #12
 80103b6:	603b      	str	r3, [r7, #0]
 80103b8:	f04f 30ff 	mov.w	r0, #4294967295
 80103bc:	e0d1      	b.n	8010562 <_svfiprintf_r+0x1d2>
 80103be:	2340      	movs	r3, #64	; 0x40
 80103c0:	616b      	str	r3, [r5, #20]
 80103c2:	2300      	movs	r3, #0
 80103c4:	9309      	str	r3, [sp, #36]	; 0x24
 80103c6:	2320      	movs	r3, #32
 80103c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80103d0:	2330      	movs	r3, #48	; 0x30
 80103d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801057c <_svfiprintf_r+0x1ec>
 80103d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80103da:	f04f 0901 	mov.w	r9, #1
 80103de:	4623      	mov	r3, r4
 80103e0:	469a      	mov	sl, r3
 80103e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103e6:	b10a      	cbz	r2, 80103ec <_svfiprintf_r+0x5c>
 80103e8:	2a25      	cmp	r2, #37	; 0x25
 80103ea:	d1f9      	bne.n	80103e0 <_svfiprintf_r+0x50>
 80103ec:	ebba 0b04 	subs.w	fp, sl, r4
 80103f0:	d00b      	beq.n	801040a <_svfiprintf_r+0x7a>
 80103f2:	465b      	mov	r3, fp
 80103f4:	4622      	mov	r2, r4
 80103f6:	4629      	mov	r1, r5
 80103f8:	4638      	mov	r0, r7
 80103fa:	f7ff ff6d 	bl	80102d8 <__ssputs_r>
 80103fe:	3001      	adds	r0, #1
 8010400:	f000 80aa 	beq.w	8010558 <_svfiprintf_r+0x1c8>
 8010404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010406:	445a      	add	r2, fp
 8010408:	9209      	str	r2, [sp, #36]	; 0x24
 801040a:	f89a 3000 	ldrb.w	r3, [sl]
 801040e:	2b00      	cmp	r3, #0
 8010410:	f000 80a2 	beq.w	8010558 <_svfiprintf_r+0x1c8>
 8010414:	2300      	movs	r3, #0
 8010416:	f04f 32ff 	mov.w	r2, #4294967295
 801041a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801041e:	f10a 0a01 	add.w	sl, sl, #1
 8010422:	9304      	str	r3, [sp, #16]
 8010424:	9307      	str	r3, [sp, #28]
 8010426:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801042a:	931a      	str	r3, [sp, #104]	; 0x68
 801042c:	4654      	mov	r4, sl
 801042e:	2205      	movs	r2, #5
 8010430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010434:	4851      	ldr	r0, [pc, #324]	; (801057c <_svfiprintf_r+0x1ec>)
 8010436:	f7ef feeb 	bl	8000210 <memchr>
 801043a:	9a04      	ldr	r2, [sp, #16]
 801043c:	b9d8      	cbnz	r0, 8010476 <_svfiprintf_r+0xe6>
 801043e:	06d0      	lsls	r0, r2, #27
 8010440:	bf44      	itt	mi
 8010442:	2320      	movmi	r3, #32
 8010444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010448:	0711      	lsls	r1, r2, #28
 801044a:	bf44      	itt	mi
 801044c:	232b      	movmi	r3, #43	; 0x2b
 801044e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010452:	f89a 3000 	ldrb.w	r3, [sl]
 8010456:	2b2a      	cmp	r3, #42	; 0x2a
 8010458:	d015      	beq.n	8010486 <_svfiprintf_r+0xf6>
 801045a:	9a07      	ldr	r2, [sp, #28]
 801045c:	4654      	mov	r4, sl
 801045e:	2000      	movs	r0, #0
 8010460:	f04f 0c0a 	mov.w	ip, #10
 8010464:	4621      	mov	r1, r4
 8010466:	f811 3b01 	ldrb.w	r3, [r1], #1
 801046a:	3b30      	subs	r3, #48	; 0x30
 801046c:	2b09      	cmp	r3, #9
 801046e:	d94e      	bls.n	801050e <_svfiprintf_r+0x17e>
 8010470:	b1b0      	cbz	r0, 80104a0 <_svfiprintf_r+0x110>
 8010472:	9207      	str	r2, [sp, #28]
 8010474:	e014      	b.n	80104a0 <_svfiprintf_r+0x110>
 8010476:	eba0 0308 	sub.w	r3, r0, r8
 801047a:	fa09 f303 	lsl.w	r3, r9, r3
 801047e:	4313      	orrs	r3, r2
 8010480:	9304      	str	r3, [sp, #16]
 8010482:	46a2      	mov	sl, r4
 8010484:	e7d2      	b.n	801042c <_svfiprintf_r+0x9c>
 8010486:	9b03      	ldr	r3, [sp, #12]
 8010488:	1d19      	adds	r1, r3, #4
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	9103      	str	r1, [sp, #12]
 801048e:	2b00      	cmp	r3, #0
 8010490:	bfbb      	ittet	lt
 8010492:	425b      	neglt	r3, r3
 8010494:	f042 0202 	orrlt.w	r2, r2, #2
 8010498:	9307      	strge	r3, [sp, #28]
 801049a:	9307      	strlt	r3, [sp, #28]
 801049c:	bfb8      	it	lt
 801049e:	9204      	strlt	r2, [sp, #16]
 80104a0:	7823      	ldrb	r3, [r4, #0]
 80104a2:	2b2e      	cmp	r3, #46	; 0x2e
 80104a4:	d10c      	bne.n	80104c0 <_svfiprintf_r+0x130>
 80104a6:	7863      	ldrb	r3, [r4, #1]
 80104a8:	2b2a      	cmp	r3, #42	; 0x2a
 80104aa:	d135      	bne.n	8010518 <_svfiprintf_r+0x188>
 80104ac:	9b03      	ldr	r3, [sp, #12]
 80104ae:	1d1a      	adds	r2, r3, #4
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	9203      	str	r2, [sp, #12]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	bfb8      	it	lt
 80104b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80104bc:	3402      	adds	r4, #2
 80104be:	9305      	str	r3, [sp, #20]
 80104c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801058c <_svfiprintf_r+0x1fc>
 80104c4:	7821      	ldrb	r1, [r4, #0]
 80104c6:	2203      	movs	r2, #3
 80104c8:	4650      	mov	r0, sl
 80104ca:	f7ef fea1 	bl	8000210 <memchr>
 80104ce:	b140      	cbz	r0, 80104e2 <_svfiprintf_r+0x152>
 80104d0:	2340      	movs	r3, #64	; 0x40
 80104d2:	eba0 000a 	sub.w	r0, r0, sl
 80104d6:	fa03 f000 	lsl.w	r0, r3, r0
 80104da:	9b04      	ldr	r3, [sp, #16]
 80104dc:	4303      	orrs	r3, r0
 80104de:	3401      	adds	r4, #1
 80104e0:	9304      	str	r3, [sp, #16]
 80104e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104e6:	4826      	ldr	r0, [pc, #152]	; (8010580 <_svfiprintf_r+0x1f0>)
 80104e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80104ec:	2206      	movs	r2, #6
 80104ee:	f7ef fe8f 	bl	8000210 <memchr>
 80104f2:	2800      	cmp	r0, #0
 80104f4:	d038      	beq.n	8010568 <_svfiprintf_r+0x1d8>
 80104f6:	4b23      	ldr	r3, [pc, #140]	; (8010584 <_svfiprintf_r+0x1f4>)
 80104f8:	bb1b      	cbnz	r3, 8010542 <_svfiprintf_r+0x1b2>
 80104fa:	9b03      	ldr	r3, [sp, #12]
 80104fc:	3307      	adds	r3, #7
 80104fe:	f023 0307 	bic.w	r3, r3, #7
 8010502:	3308      	adds	r3, #8
 8010504:	9303      	str	r3, [sp, #12]
 8010506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010508:	4433      	add	r3, r6
 801050a:	9309      	str	r3, [sp, #36]	; 0x24
 801050c:	e767      	b.n	80103de <_svfiprintf_r+0x4e>
 801050e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010512:	460c      	mov	r4, r1
 8010514:	2001      	movs	r0, #1
 8010516:	e7a5      	b.n	8010464 <_svfiprintf_r+0xd4>
 8010518:	2300      	movs	r3, #0
 801051a:	3401      	adds	r4, #1
 801051c:	9305      	str	r3, [sp, #20]
 801051e:	4619      	mov	r1, r3
 8010520:	f04f 0c0a 	mov.w	ip, #10
 8010524:	4620      	mov	r0, r4
 8010526:	f810 2b01 	ldrb.w	r2, [r0], #1
 801052a:	3a30      	subs	r2, #48	; 0x30
 801052c:	2a09      	cmp	r2, #9
 801052e:	d903      	bls.n	8010538 <_svfiprintf_r+0x1a8>
 8010530:	2b00      	cmp	r3, #0
 8010532:	d0c5      	beq.n	80104c0 <_svfiprintf_r+0x130>
 8010534:	9105      	str	r1, [sp, #20]
 8010536:	e7c3      	b.n	80104c0 <_svfiprintf_r+0x130>
 8010538:	fb0c 2101 	mla	r1, ip, r1, r2
 801053c:	4604      	mov	r4, r0
 801053e:	2301      	movs	r3, #1
 8010540:	e7f0      	b.n	8010524 <_svfiprintf_r+0x194>
 8010542:	ab03      	add	r3, sp, #12
 8010544:	9300      	str	r3, [sp, #0]
 8010546:	462a      	mov	r2, r5
 8010548:	4b0f      	ldr	r3, [pc, #60]	; (8010588 <_svfiprintf_r+0x1f8>)
 801054a:	a904      	add	r1, sp, #16
 801054c:	4638      	mov	r0, r7
 801054e:	f7fe f81d 	bl	800e58c <_printf_float>
 8010552:	1c42      	adds	r2, r0, #1
 8010554:	4606      	mov	r6, r0
 8010556:	d1d6      	bne.n	8010506 <_svfiprintf_r+0x176>
 8010558:	89ab      	ldrh	r3, [r5, #12]
 801055a:	065b      	lsls	r3, r3, #25
 801055c:	f53f af2c 	bmi.w	80103b8 <_svfiprintf_r+0x28>
 8010560:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010562:	b01d      	add	sp, #116	; 0x74
 8010564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010568:	ab03      	add	r3, sp, #12
 801056a:	9300      	str	r3, [sp, #0]
 801056c:	462a      	mov	r2, r5
 801056e:	4b06      	ldr	r3, [pc, #24]	; (8010588 <_svfiprintf_r+0x1f8>)
 8010570:	a904      	add	r1, sp, #16
 8010572:	4638      	mov	r0, r7
 8010574:	f7fe faae 	bl	800ead4 <_printf_i>
 8010578:	e7eb      	b.n	8010552 <_svfiprintf_r+0x1c2>
 801057a:	bf00      	nop
 801057c:	08012eac 	.word	0x08012eac
 8010580:	08012eb6 	.word	0x08012eb6
 8010584:	0800e58d 	.word	0x0800e58d
 8010588:	080102d9 	.word	0x080102d9
 801058c:	08012eb2 	.word	0x08012eb2

08010590 <_sbrk_r>:
 8010590:	b538      	push	{r3, r4, r5, lr}
 8010592:	4d06      	ldr	r5, [pc, #24]	; (80105ac <_sbrk_r+0x1c>)
 8010594:	2300      	movs	r3, #0
 8010596:	4604      	mov	r4, r0
 8010598:	4608      	mov	r0, r1
 801059a:	602b      	str	r3, [r5, #0]
 801059c:	f7f3 fb5e 	bl	8003c5c <_sbrk>
 80105a0:	1c43      	adds	r3, r0, #1
 80105a2:	d102      	bne.n	80105aa <_sbrk_r+0x1a>
 80105a4:	682b      	ldr	r3, [r5, #0]
 80105a6:	b103      	cbz	r3, 80105aa <_sbrk_r+0x1a>
 80105a8:	6023      	str	r3, [r4, #0]
 80105aa:	bd38      	pop	{r3, r4, r5, pc}
 80105ac:	20008b34 	.word	0x20008b34

080105b0 <__assert_func>:
 80105b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105b2:	4614      	mov	r4, r2
 80105b4:	461a      	mov	r2, r3
 80105b6:	4b09      	ldr	r3, [pc, #36]	; (80105dc <__assert_func+0x2c>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	4605      	mov	r5, r0
 80105bc:	68d8      	ldr	r0, [r3, #12]
 80105be:	b14c      	cbz	r4, 80105d4 <__assert_func+0x24>
 80105c0:	4b07      	ldr	r3, [pc, #28]	; (80105e0 <__assert_func+0x30>)
 80105c2:	9100      	str	r1, [sp, #0]
 80105c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80105c8:	4906      	ldr	r1, [pc, #24]	; (80105e4 <__assert_func+0x34>)
 80105ca:	462b      	mov	r3, r5
 80105cc:	f000 f80e 	bl	80105ec <fiprintf>
 80105d0:	f000 faa4 	bl	8010b1c <abort>
 80105d4:	4b04      	ldr	r3, [pc, #16]	; (80105e8 <__assert_func+0x38>)
 80105d6:	461c      	mov	r4, r3
 80105d8:	e7f3      	b.n	80105c2 <__assert_func+0x12>
 80105da:	bf00      	nop
 80105dc:	20000034 	.word	0x20000034
 80105e0:	08012ebd 	.word	0x08012ebd
 80105e4:	08012eca 	.word	0x08012eca
 80105e8:	08012ef8 	.word	0x08012ef8

080105ec <fiprintf>:
 80105ec:	b40e      	push	{r1, r2, r3}
 80105ee:	b503      	push	{r0, r1, lr}
 80105f0:	4601      	mov	r1, r0
 80105f2:	ab03      	add	r3, sp, #12
 80105f4:	4805      	ldr	r0, [pc, #20]	; (801060c <fiprintf+0x20>)
 80105f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80105fa:	6800      	ldr	r0, [r0, #0]
 80105fc:	9301      	str	r3, [sp, #4]
 80105fe:	f000 f88f 	bl	8010720 <_vfiprintf_r>
 8010602:	b002      	add	sp, #8
 8010604:	f85d eb04 	ldr.w	lr, [sp], #4
 8010608:	b003      	add	sp, #12
 801060a:	4770      	bx	lr
 801060c:	20000034 	.word	0x20000034

08010610 <__ascii_mbtowc>:
 8010610:	b082      	sub	sp, #8
 8010612:	b901      	cbnz	r1, 8010616 <__ascii_mbtowc+0x6>
 8010614:	a901      	add	r1, sp, #4
 8010616:	b142      	cbz	r2, 801062a <__ascii_mbtowc+0x1a>
 8010618:	b14b      	cbz	r3, 801062e <__ascii_mbtowc+0x1e>
 801061a:	7813      	ldrb	r3, [r2, #0]
 801061c:	600b      	str	r3, [r1, #0]
 801061e:	7812      	ldrb	r2, [r2, #0]
 8010620:	1e10      	subs	r0, r2, #0
 8010622:	bf18      	it	ne
 8010624:	2001      	movne	r0, #1
 8010626:	b002      	add	sp, #8
 8010628:	4770      	bx	lr
 801062a:	4610      	mov	r0, r2
 801062c:	e7fb      	b.n	8010626 <__ascii_mbtowc+0x16>
 801062e:	f06f 0001 	mvn.w	r0, #1
 8010632:	e7f8      	b.n	8010626 <__ascii_mbtowc+0x16>

08010634 <memmove>:
 8010634:	4288      	cmp	r0, r1
 8010636:	b510      	push	{r4, lr}
 8010638:	eb01 0402 	add.w	r4, r1, r2
 801063c:	d902      	bls.n	8010644 <memmove+0x10>
 801063e:	4284      	cmp	r4, r0
 8010640:	4623      	mov	r3, r4
 8010642:	d807      	bhi.n	8010654 <memmove+0x20>
 8010644:	1e43      	subs	r3, r0, #1
 8010646:	42a1      	cmp	r1, r4
 8010648:	d008      	beq.n	801065c <memmove+0x28>
 801064a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801064e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010652:	e7f8      	b.n	8010646 <memmove+0x12>
 8010654:	4402      	add	r2, r0
 8010656:	4601      	mov	r1, r0
 8010658:	428a      	cmp	r2, r1
 801065a:	d100      	bne.n	801065e <memmove+0x2a>
 801065c:	bd10      	pop	{r4, pc}
 801065e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010666:	e7f7      	b.n	8010658 <memmove+0x24>

08010668 <__malloc_lock>:
 8010668:	4801      	ldr	r0, [pc, #4]	; (8010670 <__malloc_lock+0x8>)
 801066a:	f000 bc17 	b.w	8010e9c <__retarget_lock_acquire_recursive>
 801066e:	bf00      	nop
 8010670:	20008b3c 	.word	0x20008b3c

08010674 <__malloc_unlock>:
 8010674:	4801      	ldr	r0, [pc, #4]	; (801067c <__malloc_unlock+0x8>)
 8010676:	f000 bc12 	b.w	8010e9e <__retarget_lock_release_recursive>
 801067a:	bf00      	nop
 801067c:	20008b3c 	.word	0x20008b3c

08010680 <_realloc_r>:
 8010680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010682:	4607      	mov	r7, r0
 8010684:	4614      	mov	r4, r2
 8010686:	460e      	mov	r6, r1
 8010688:	b921      	cbnz	r1, 8010694 <_realloc_r+0x14>
 801068a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801068e:	4611      	mov	r1, r2
 8010690:	f7ff bdc8 	b.w	8010224 <_malloc_r>
 8010694:	b922      	cbnz	r2, 80106a0 <_realloc_r+0x20>
 8010696:	f7ff fd75 	bl	8010184 <_free_r>
 801069a:	4625      	mov	r5, r4
 801069c:	4628      	mov	r0, r5
 801069e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106a0:	f000 fc62 	bl	8010f68 <_malloc_usable_size_r>
 80106a4:	42a0      	cmp	r0, r4
 80106a6:	d20f      	bcs.n	80106c8 <_realloc_r+0x48>
 80106a8:	4621      	mov	r1, r4
 80106aa:	4638      	mov	r0, r7
 80106ac:	f7ff fdba 	bl	8010224 <_malloc_r>
 80106b0:	4605      	mov	r5, r0
 80106b2:	2800      	cmp	r0, #0
 80106b4:	d0f2      	beq.n	801069c <_realloc_r+0x1c>
 80106b6:	4631      	mov	r1, r6
 80106b8:	4622      	mov	r2, r4
 80106ba:	f7fd feb1 	bl	800e420 <memcpy>
 80106be:	4631      	mov	r1, r6
 80106c0:	4638      	mov	r0, r7
 80106c2:	f7ff fd5f 	bl	8010184 <_free_r>
 80106c6:	e7e9      	b.n	801069c <_realloc_r+0x1c>
 80106c8:	4635      	mov	r5, r6
 80106ca:	e7e7      	b.n	801069c <_realloc_r+0x1c>

080106cc <__sfputc_r>:
 80106cc:	6893      	ldr	r3, [r2, #8]
 80106ce:	3b01      	subs	r3, #1
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	b410      	push	{r4}
 80106d4:	6093      	str	r3, [r2, #8]
 80106d6:	da08      	bge.n	80106ea <__sfputc_r+0x1e>
 80106d8:	6994      	ldr	r4, [r2, #24]
 80106da:	42a3      	cmp	r3, r4
 80106dc:	db01      	blt.n	80106e2 <__sfputc_r+0x16>
 80106de:	290a      	cmp	r1, #10
 80106e0:	d103      	bne.n	80106ea <__sfputc_r+0x1e>
 80106e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106e6:	f000 b94b 	b.w	8010980 <__swbuf_r>
 80106ea:	6813      	ldr	r3, [r2, #0]
 80106ec:	1c58      	adds	r0, r3, #1
 80106ee:	6010      	str	r0, [r2, #0]
 80106f0:	7019      	strb	r1, [r3, #0]
 80106f2:	4608      	mov	r0, r1
 80106f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106f8:	4770      	bx	lr

080106fa <__sfputs_r>:
 80106fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106fc:	4606      	mov	r6, r0
 80106fe:	460f      	mov	r7, r1
 8010700:	4614      	mov	r4, r2
 8010702:	18d5      	adds	r5, r2, r3
 8010704:	42ac      	cmp	r4, r5
 8010706:	d101      	bne.n	801070c <__sfputs_r+0x12>
 8010708:	2000      	movs	r0, #0
 801070a:	e007      	b.n	801071c <__sfputs_r+0x22>
 801070c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010710:	463a      	mov	r2, r7
 8010712:	4630      	mov	r0, r6
 8010714:	f7ff ffda 	bl	80106cc <__sfputc_r>
 8010718:	1c43      	adds	r3, r0, #1
 801071a:	d1f3      	bne.n	8010704 <__sfputs_r+0xa>
 801071c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010720 <_vfiprintf_r>:
 8010720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010724:	460d      	mov	r5, r1
 8010726:	b09d      	sub	sp, #116	; 0x74
 8010728:	4614      	mov	r4, r2
 801072a:	4698      	mov	r8, r3
 801072c:	4606      	mov	r6, r0
 801072e:	b118      	cbz	r0, 8010738 <_vfiprintf_r+0x18>
 8010730:	6983      	ldr	r3, [r0, #24]
 8010732:	b90b      	cbnz	r3, 8010738 <_vfiprintf_r+0x18>
 8010734:	f000 fb14 	bl	8010d60 <__sinit>
 8010738:	4b89      	ldr	r3, [pc, #548]	; (8010960 <_vfiprintf_r+0x240>)
 801073a:	429d      	cmp	r5, r3
 801073c:	d11b      	bne.n	8010776 <_vfiprintf_r+0x56>
 801073e:	6875      	ldr	r5, [r6, #4]
 8010740:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010742:	07d9      	lsls	r1, r3, #31
 8010744:	d405      	bmi.n	8010752 <_vfiprintf_r+0x32>
 8010746:	89ab      	ldrh	r3, [r5, #12]
 8010748:	059a      	lsls	r2, r3, #22
 801074a:	d402      	bmi.n	8010752 <_vfiprintf_r+0x32>
 801074c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801074e:	f000 fba5 	bl	8010e9c <__retarget_lock_acquire_recursive>
 8010752:	89ab      	ldrh	r3, [r5, #12]
 8010754:	071b      	lsls	r3, r3, #28
 8010756:	d501      	bpl.n	801075c <_vfiprintf_r+0x3c>
 8010758:	692b      	ldr	r3, [r5, #16]
 801075a:	b9eb      	cbnz	r3, 8010798 <_vfiprintf_r+0x78>
 801075c:	4629      	mov	r1, r5
 801075e:	4630      	mov	r0, r6
 8010760:	f000 f96e 	bl	8010a40 <__swsetup_r>
 8010764:	b1c0      	cbz	r0, 8010798 <_vfiprintf_r+0x78>
 8010766:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010768:	07dc      	lsls	r4, r3, #31
 801076a:	d50e      	bpl.n	801078a <_vfiprintf_r+0x6a>
 801076c:	f04f 30ff 	mov.w	r0, #4294967295
 8010770:	b01d      	add	sp, #116	; 0x74
 8010772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010776:	4b7b      	ldr	r3, [pc, #492]	; (8010964 <_vfiprintf_r+0x244>)
 8010778:	429d      	cmp	r5, r3
 801077a:	d101      	bne.n	8010780 <_vfiprintf_r+0x60>
 801077c:	68b5      	ldr	r5, [r6, #8]
 801077e:	e7df      	b.n	8010740 <_vfiprintf_r+0x20>
 8010780:	4b79      	ldr	r3, [pc, #484]	; (8010968 <_vfiprintf_r+0x248>)
 8010782:	429d      	cmp	r5, r3
 8010784:	bf08      	it	eq
 8010786:	68f5      	ldreq	r5, [r6, #12]
 8010788:	e7da      	b.n	8010740 <_vfiprintf_r+0x20>
 801078a:	89ab      	ldrh	r3, [r5, #12]
 801078c:	0598      	lsls	r0, r3, #22
 801078e:	d4ed      	bmi.n	801076c <_vfiprintf_r+0x4c>
 8010790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010792:	f000 fb84 	bl	8010e9e <__retarget_lock_release_recursive>
 8010796:	e7e9      	b.n	801076c <_vfiprintf_r+0x4c>
 8010798:	2300      	movs	r3, #0
 801079a:	9309      	str	r3, [sp, #36]	; 0x24
 801079c:	2320      	movs	r3, #32
 801079e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80107a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80107a6:	2330      	movs	r3, #48	; 0x30
 80107a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801096c <_vfiprintf_r+0x24c>
 80107ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80107b0:	f04f 0901 	mov.w	r9, #1
 80107b4:	4623      	mov	r3, r4
 80107b6:	469a      	mov	sl, r3
 80107b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107bc:	b10a      	cbz	r2, 80107c2 <_vfiprintf_r+0xa2>
 80107be:	2a25      	cmp	r2, #37	; 0x25
 80107c0:	d1f9      	bne.n	80107b6 <_vfiprintf_r+0x96>
 80107c2:	ebba 0b04 	subs.w	fp, sl, r4
 80107c6:	d00b      	beq.n	80107e0 <_vfiprintf_r+0xc0>
 80107c8:	465b      	mov	r3, fp
 80107ca:	4622      	mov	r2, r4
 80107cc:	4629      	mov	r1, r5
 80107ce:	4630      	mov	r0, r6
 80107d0:	f7ff ff93 	bl	80106fa <__sfputs_r>
 80107d4:	3001      	adds	r0, #1
 80107d6:	f000 80aa 	beq.w	801092e <_vfiprintf_r+0x20e>
 80107da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107dc:	445a      	add	r2, fp
 80107de:	9209      	str	r2, [sp, #36]	; 0x24
 80107e0:	f89a 3000 	ldrb.w	r3, [sl]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	f000 80a2 	beq.w	801092e <_vfiprintf_r+0x20e>
 80107ea:	2300      	movs	r3, #0
 80107ec:	f04f 32ff 	mov.w	r2, #4294967295
 80107f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80107f4:	f10a 0a01 	add.w	sl, sl, #1
 80107f8:	9304      	str	r3, [sp, #16]
 80107fa:	9307      	str	r3, [sp, #28]
 80107fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010800:	931a      	str	r3, [sp, #104]	; 0x68
 8010802:	4654      	mov	r4, sl
 8010804:	2205      	movs	r2, #5
 8010806:	f814 1b01 	ldrb.w	r1, [r4], #1
 801080a:	4858      	ldr	r0, [pc, #352]	; (801096c <_vfiprintf_r+0x24c>)
 801080c:	f7ef fd00 	bl	8000210 <memchr>
 8010810:	9a04      	ldr	r2, [sp, #16]
 8010812:	b9d8      	cbnz	r0, 801084c <_vfiprintf_r+0x12c>
 8010814:	06d1      	lsls	r1, r2, #27
 8010816:	bf44      	itt	mi
 8010818:	2320      	movmi	r3, #32
 801081a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801081e:	0713      	lsls	r3, r2, #28
 8010820:	bf44      	itt	mi
 8010822:	232b      	movmi	r3, #43	; 0x2b
 8010824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010828:	f89a 3000 	ldrb.w	r3, [sl]
 801082c:	2b2a      	cmp	r3, #42	; 0x2a
 801082e:	d015      	beq.n	801085c <_vfiprintf_r+0x13c>
 8010830:	9a07      	ldr	r2, [sp, #28]
 8010832:	4654      	mov	r4, sl
 8010834:	2000      	movs	r0, #0
 8010836:	f04f 0c0a 	mov.w	ip, #10
 801083a:	4621      	mov	r1, r4
 801083c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010840:	3b30      	subs	r3, #48	; 0x30
 8010842:	2b09      	cmp	r3, #9
 8010844:	d94e      	bls.n	80108e4 <_vfiprintf_r+0x1c4>
 8010846:	b1b0      	cbz	r0, 8010876 <_vfiprintf_r+0x156>
 8010848:	9207      	str	r2, [sp, #28]
 801084a:	e014      	b.n	8010876 <_vfiprintf_r+0x156>
 801084c:	eba0 0308 	sub.w	r3, r0, r8
 8010850:	fa09 f303 	lsl.w	r3, r9, r3
 8010854:	4313      	orrs	r3, r2
 8010856:	9304      	str	r3, [sp, #16]
 8010858:	46a2      	mov	sl, r4
 801085a:	e7d2      	b.n	8010802 <_vfiprintf_r+0xe2>
 801085c:	9b03      	ldr	r3, [sp, #12]
 801085e:	1d19      	adds	r1, r3, #4
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	9103      	str	r1, [sp, #12]
 8010864:	2b00      	cmp	r3, #0
 8010866:	bfbb      	ittet	lt
 8010868:	425b      	neglt	r3, r3
 801086a:	f042 0202 	orrlt.w	r2, r2, #2
 801086e:	9307      	strge	r3, [sp, #28]
 8010870:	9307      	strlt	r3, [sp, #28]
 8010872:	bfb8      	it	lt
 8010874:	9204      	strlt	r2, [sp, #16]
 8010876:	7823      	ldrb	r3, [r4, #0]
 8010878:	2b2e      	cmp	r3, #46	; 0x2e
 801087a:	d10c      	bne.n	8010896 <_vfiprintf_r+0x176>
 801087c:	7863      	ldrb	r3, [r4, #1]
 801087e:	2b2a      	cmp	r3, #42	; 0x2a
 8010880:	d135      	bne.n	80108ee <_vfiprintf_r+0x1ce>
 8010882:	9b03      	ldr	r3, [sp, #12]
 8010884:	1d1a      	adds	r2, r3, #4
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	9203      	str	r2, [sp, #12]
 801088a:	2b00      	cmp	r3, #0
 801088c:	bfb8      	it	lt
 801088e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010892:	3402      	adds	r4, #2
 8010894:	9305      	str	r3, [sp, #20]
 8010896:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801097c <_vfiprintf_r+0x25c>
 801089a:	7821      	ldrb	r1, [r4, #0]
 801089c:	2203      	movs	r2, #3
 801089e:	4650      	mov	r0, sl
 80108a0:	f7ef fcb6 	bl	8000210 <memchr>
 80108a4:	b140      	cbz	r0, 80108b8 <_vfiprintf_r+0x198>
 80108a6:	2340      	movs	r3, #64	; 0x40
 80108a8:	eba0 000a 	sub.w	r0, r0, sl
 80108ac:	fa03 f000 	lsl.w	r0, r3, r0
 80108b0:	9b04      	ldr	r3, [sp, #16]
 80108b2:	4303      	orrs	r3, r0
 80108b4:	3401      	adds	r4, #1
 80108b6:	9304      	str	r3, [sp, #16]
 80108b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108bc:	482c      	ldr	r0, [pc, #176]	; (8010970 <_vfiprintf_r+0x250>)
 80108be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80108c2:	2206      	movs	r2, #6
 80108c4:	f7ef fca4 	bl	8000210 <memchr>
 80108c8:	2800      	cmp	r0, #0
 80108ca:	d03f      	beq.n	801094c <_vfiprintf_r+0x22c>
 80108cc:	4b29      	ldr	r3, [pc, #164]	; (8010974 <_vfiprintf_r+0x254>)
 80108ce:	bb1b      	cbnz	r3, 8010918 <_vfiprintf_r+0x1f8>
 80108d0:	9b03      	ldr	r3, [sp, #12]
 80108d2:	3307      	adds	r3, #7
 80108d4:	f023 0307 	bic.w	r3, r3, #7
 80108d8:	3308      	adds	r3, #8
 80108da:	9303      	str	r3, [sp, #12]
 80108dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108de:	443b      	add	r3, r7
 80108e0:	9309      	str	r3, [sp, #36]	; 0x24
 80108e2:	e767      	b.n	80107b4 <_vfiprintf_r+0x94>
 80108e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80108e8:	460c      	mov	r4, r1
 80108ea:	2001      	movs	r0, #1
 80108ec:	e7a5      	b.n	801083a <_vfiprintf_r+0x11a>
 80108ee:	2300      	movs	r3, #0
 80108f0:	3401      	adds	r4, #1
 80108f2:	9305      	str	r3, [sp, #20]
 80108f4:	4619      	mov	r1, r3
 80108f6:	f04f 0c0a 	mov.w	ip, #10
 80108fa:	4620      	mov	r0, r4
 80108fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010900:	3a30      	subs	r2, #48	; 0x30
 8010902:	2a09      	cmp	r2, #9
 8010904:	d903      	bls.n	801090e <_vfiprintf_r+0x1ee>
 8010906:	2b00      	cmp	r3, #0
 8010908:	d0c5      	beq.n	8010896 <_vfiprintf_r+0x176>
 801090a:	9105      	str	r1, [sp, #20]
 801090c:	e7c3      	b.n	8010896 <_vfiprintf_r+0x176>
 801090e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010912:	4604      	mov	r4, r0
 8010914:	2301      	movs	r3, #1
 8010916:	e7f0      	b.n	80108fa <_vfiprintf_r+0x1da>
 8010918:	ab03      	add	r3, sp, #12
 801091a:	9300      	str	r3, [sp, #0]
 801091c:	462a      	mov	r2, r5
 801091e:	4b16      	ldr	r3, [pc, #88]	; (8010978 <_vfiprintf_r+0x258>)
 8010920:	a904      	add	r1, sp, #16
 8010922:	4630      	mov	r0, r6
 8010924:	f7fd fe32 	bl	800e58c <_printf_float>
 8010928:	4607      	mov	r7, r0
 801092a:	1c78      	adds	r0, r7, #1
 801092c:	d1d6      	bne.n	80108dc <_vfiprintf_r+0x1bc>
 801092e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010930:	07d9      	lsls	r1, r3, #31
 8010932:	d405      	bmi.n	8010940 <_vfiprintf_r+0x220>
 8010934:	89ab      	ldrh	r3, [r5, #12]
 8010936:	059a      	lsls	r2, r3, #22
 8010938:	d402      	bmi.n	8010940 <_vfiprintf_r+0x220>
 801093a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801093c:	f000 faaf 	bl	8010e9e <__retarget_lock_release_recursive>
 8010940:	89ab      	ldrh	r3, [r5, #12]
 8010942:	065b      	lsls	r3, r3, #25
 8010944:	f53f af12 	bmi.w	801076c <_vfiprintf_r+0x4c>
 8010948:	9809      	ldr	r0, [sp, #36]	; 0x24
 801094a:	e711      	b.n	8010770 <_vfiprintf_r+0x50>
 801094c:	ab03      	add	r3, sp, #12
 801094e:	9300      	str	r3, [sp, #0]
 8010950:	462a      	mov	r2, r5
 8010952:	4b09      	ldr	r3, [pc, #36]	; (8010978 <_vfiprintf_r+0x258>)
 8010954:	a904      	add	r1, sp, #16
 8010956:	4630      	mov	r0, r6
 8010958:	f7fe f8bc 	bl	800ead4 <_printf_i>
 801095c:	e7e4      	b.n	8010928 <_vfiprintf_r+0x208>
 801095e:	bf00      	nop
 8010960:	08013024 	.word	0x08013024
 8010964:	08013044 	.word	0x08013044
 8010968:	08013004 	.word	0x08013004
 801096c:	08012eac 	.word	0x08012eac
 8010970:	08012eb6 	.word	0x08012eb6
 8010974:	0800e58d 	.word	0x0800e58d
 8010978:	080106fb 	.word	0x080106fb
 801097c:	08012eb2 	.word	0x08012eb2

08010980 <__swbuf_r>:
 8010980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010982:	460e      	mov	r6, r1
 8010984:	4614      	mov	r4, r2
 8010986:	4605      	mov	r5, r0
 8010988:	b118      	cbz	r0, 8010992 <__swbuf_r+0x12>
 801098a:	6983      	ldr	r3, [r0, #24]
 801098c:	b90b      	cbnz	r3, 8010992 <__swbuf_r+0x12>
 801098e:	f000 f9e7 	bl	8010d60 <__sinit>
 8010992:	4b21      	ldr	r3, [pc, #132]	; (8010a18 <__swbuf_r+0x98>)
 8010994:	429c      	cmp	r4, r3
 8010996:	d12b      	bne.n	80109f0 <__swbuf_r+0x70>
 8010998:	686c      	ldr	r4, [r5, #4]
 801099a:	69a3      	ldr	r3, [r4, #24]
 801099c:	60a3      	str	r3, [r4, #8]
 801099e:	89a3      	ldrh	r3, [r4, #12]
 80109a0:	071a      	lsls	r2, r3, #28
 80109a2:	d52f      	bpl.n	8010a04 <__swbuf_r+0x84>
 80109a4:	6923      	ldr	r3, [r4, #16]
 80109a6:	b36b      	cbz	r3, 8010a04 <__swbuf_r+0x84>
 80109a8:	6923      	ldr	r3, [r4, #16]
 80109aa:	6820      	ldr	r0, [r4, #0]
 80109ac:	1ac0      	subs	r0, r0, r3
 80109ae:	6963      	ldr	r3, [r4, #20]
 80109b0:	b2f6      	uxtb	r6, r6
 80109b2:	4283      	cmp	r3, r0
 80109b4:	4637      	mov	r7, r6
 80109b6:	dc04      	bgt.n	80109c2 <__swbuf_r+0x42>
 80109b8:	4621      	mov	r1, r4
 80109ba:	4628      	mov	r0, r5
 80109bc:	f000 f93c 	bl	8010c38 <_fflush_r>
 80109c0:	bb30      	cbnz	r0, 8010a10 <__swbuf_r+0x90>
 80109c2:	68a3      	ldr	r3, [r4, #8]
 80109c4:	3b01      	subs	r3, #1
 80109c6:	60a3      	str	r3, [r4, #8]
 80109c8:	6823      	ldr	r3, [r4, #0]
 80109ca:	1c5a      	adds	r2, r3, #1
 80109cc:	6022      	str	r2, [r4, #0]
 80109ce:	701e      	strb	r6, [r3, #0]
 80109d0:	6963      	ldr	r3, [r4, #20]
 80109d2:	3001      	adds	r0, #1
 80109d4:	4283      	cmp	r3, r0
 80109d6:	d004      	beq.n	80109e2 <__swbuf_r+0x62>
 80109d8:	89a3      	ldrh	r3, [r4, #12]
 80109da:	07db      	lsls	r3, r3, #31
 80109dc:	d506      	bpl.n	80109ec <__swbuf_r+0x6c>
 80109de:	2e0a      	cmp	r6, #10
 80109e0:	d104      	bne.n	80109ec <__swbuf_r+0x6c>
 80109e2:	4621      	mov	r1, r4
 80109e4:	4628      	mov	r0, r5
 80109e6:	f000 f927 	bl	8010c38 <_fflush_r>
 80109ea:	b988      	cbnz	r0, 8010a10 <__swbuf_r+0x90>
 80109ec:	4638      	mov	r0, r7
 80109ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109f0:	4b0a      	ldr	r3, [pc, #40]	; (8010a1c <__swbuf_r+0x9c>)
 80109f2:	429c      	cmp	r4, r3
 80109f4:	d101      	bne.n	80109fa <__swbuf_r+0x7a>
 80109f6:	68ac      	ldr	r4, [r5, #8]
 80109f8:	e7cf      	b.n	801099a <__swbuf_r+0x1a>
 80109fa:	4b09      	ldr	r3, [pc, #36]	; (8010a20 <__swbuf_r+0xa0>)
 80109fc:	429c      	cmp	r4, r3
 80109fe:	bf08      	it	eq
 8010a00:	68ec      	ldreq	r4, [r5, #12]
 8010a02:	e7ca      	b.n	801099a <__swbuf_r+0x1a>
 8010a04:	4621      	mov	r1, r4
 8010a06:	4628      	mov	r0, r5
 8010a08:	f000 f81a 	bl	8010a40 <__swsetup_r>
 8010a0c:	2800      	cmp	r0, #0
 8010a0e:	d0cb      	beq.n	80109a8 <__swbuf_r+0x28>
 8010a10:	f04f 37ff 	mov.w	r7, #4294967295
 8010a14:	e7ea      	b.n	80109ec <__swbuf_r+0x6c>
 8010a16:	bf00      	nop
 8010a18:	08013024 	.word	0x08013024
 8010a1c:	08013044 	.word	0x08013044
 8010a20:	08013004 	.word	0x08013004

08010a24 <__ascii_wctomb>:
 8010a24:	b149      	cbz	r1, 8010a3a <__ascii_wctomb+0x16>
 8010a26:	2aff      	cmp	r2, #255	; 0xff
 8010a28:	bf85      	ittet	hi
 8010a2a:	238a      	movhi	r3, #138	; 0x8a
 8010a2c:	6003      	strhi	r3, [r0, #0]
 8010a2e:	700a      	strbls	r2, [r1, #0]
 8010a30:	f04f 30ff 	movhi.w	r0, #4294967295
 8010a34:	bf98      	it	ls
 8010a36:	2001      	movls	r0, #1
 8010a38:	4770      	bx	lr
 8010a3a:	4608      	mov	r0, r1
 8010a3c:	4770      	bx	lr
	...

08010a40 <__swsetup_r>:
 8010a40:	4b32      	ldr	r3, [pc, #200]	; (8010b0c <__swsetup_r+0xcc>)
 8010a42:	b570      	push	{r4, r5, r6, lr}
 8010a44:	681d      	ldr	r5, [r3, #0]
 8010a46:	4606      	mov	r6, r0
 8010a48:	460c      	mov	r4, r1
 8010a4a:	b125      	cbz	r5, 8010a56 <__swsetup_r+0x16>
 8010a4c:	69ab      	ldr	r3, [r5, #24]
 8010a4e:	b913      	cbnz	r3, 8010a56 <__swsetup_r+0x16>
 8010a50:	4628      	mov	r0, r5
 8010a52:	f000 f985 	bl	8010d60 <__sinit>
 8010a56:	4b2e      	ldr	r3, [pc, #184]	; (8010b10 <__swsetup_r+0xd0>)
 8010a58:	429c      	cmp	r4, r3
 8010a5a:	d10f      	bne.n	8010a7c <__swsetup_r+0x3c>
 8010a5c:	686c      	ldr	r4, [r5, #4]
 8010a5e:	89a3      	ldrh	r3, [r4, #12]
 8010a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a64:	0719      	lsls	r1, r3, #28
 8010a66:	d42c      	bmi.n	8010ac2 <__swsetup_r+0x82>
 8010a68:	06dd      	lsls	r5, r3, #27
 8010a6a:	d411      	bmi.n	8010a90 <__swsetup_r+0x50>
 8010a6c:	2309      	movs	r3, #9
 8010a6e:	6033      	str	r3, [r6, #0]
 8010a70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010a74:	81a3      	strh	r3, [r4, #12]
 8010a76:	f04f 30ff 	mov.w	r0, #4294967295
 8010a7a:	e03e      	b.n	8010afa <__swsetup_r+0xba>
 8010a7c:	4b25      	ldr	r3, [pc, #148]	; (8010b14 <__swsetup_r+0xd4>)
 8010a7e:	429c      	cmp	r4, r3
 8010a80:	d101      	bne.n	8010a86 <__swsetup_r+0x46>
 8010a82:	68ac      	ldr	r4, [r5, #8]
 8010a84:	e7eb      	b.n	8010a5e <__swsetup_r+0x1e>
 8010a86:	4b24      	ldr	r3, [pc, #144]	; (8010b18 <__swsetup_r+0xd8>)
 8010a88:	429c      	cmp	r4, r3
 8010a8a:	bf08      	it	eq
 8010a8c:	68ec      	ldreq	r4, [r5, #12]
 8010a8e:	e7e6      	b.n	8010a5e <__swsetup_r+0x1e>
 8010a90:	0758      	lsls	r0, r3, #29
 8010a92:	d512      	bpl.n	8010aba <__swsetup_r+0x7a>
 8010a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a96:	b141      	cbz	r1, 8010aaa <__swsetup_r+0x6a>
 8010a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a9c:	4299      	cmp	r1, r3
 8010a9e:	d002      	beq.n	8010aa6 <__swsetup_r+0x66>
 8010aa0:	4630      	mov	r0, r6
 8010aa2:	f7ff fb6f 	bl	8010184 <_free_r>
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	6363      	str	r3, [r4, #52]	; 0x34
 8010aaa:	89a3      	ldrh	r3, [r4, #12]
 8010aac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010ab0:	81a3      	strh	r3, [r4, #12]
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	6063      	str	r3, [r4, #4]
 8010ab6:	6923      	ldr	r3, [r4, #16]
 8010ab8:	6023      	str	r3, [r4, #0]
 8010aba:	89a3      	ldrh	r3, [r4, #12]
 8010abc:	f043 0308 	orr.w	r3, r3, #8
 8010ac0:	81a3      	strh	r3, [r4, #12]
 8010ac2:	6923      	ldr	r3, [r4, #16]
 8010ac4:	b94b      	cbnz	r3, 8010ada <__swsetup_r+0x9a>
 8010ac6:	89a3      	ldrh	r3, [r4, #12]
 8010ac8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ad0:	d003      	beq.n	8010ada <__swsetup_r+0x9a>
 8010ad2:	4621      	mov	r1, r4
 8010ad4:	4630      	mov	r0, r6
 8010ad6:	f000 fa07 	bl	8010ee8 <__smakebuf_r>
 8010ada:	89a0      	ldrh	r0, [r4, #12]
 8010adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010ae0:	f010 0301 	ands.w	r3, r0, #1
 8010ae4:	d00a      	beq.n	8010afc <__swsetup_r+0xbc>
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	60a3      	str	r3, [r4, #8]
 8010aea:	6963      	ldr	r3, [r4, #20]
 8010aec:	425b      	negs	r3, r3
 8010aee:	61a3      	str	r3, [r4, #24]
 8010af0:	6923      	ldr	r3, [r4, #16]
 8010af2:	b943      	cbnz	r3, 8010b06 <__swsetup_r+0xc6>
 8010af4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010af8:	d1ba      	bne.n	8010a70 <__swsetup_r+0x30>
 8010afa:	bd70      	pop	{r4, r5, r6, pc}
 8010afc:	0781      	lsls	r1, r0, #30
 8010afe:	bf58      	it	pl
 8010b00:	6963      	ldrpl	r3, [r4, #20]
 8010b02:	60a3      	str	r3, [r4, #8]
 8010b04:	e7f4      	b.n	8010af0 <__swsetup_r+0xb0>
 8010b06:	2000      	movs	r0, #0
 8010b08:	e7f7      	b.n	8010afa <__swsetup_r+0xba>
 8010b0a:	bf00      	nop
 8010b0c:	20000034 	.word	0x20000034
 8010b10:	08013024 	.word	0x08013024
 8010b14:	08013044 	.word	0x08013044
 8010b18:	08013004 	.word	0x08013004

08010b1c <abort>:
 8010b1c:	b508      	push	{r3, lr}
 8010b1e:	2006      	movs	r0, #6
 8010b20:	f000 fa52 	bl	8010fc8 <raise>
 8010b24:	2001      	movs	r0, #1
 8010b26:	f7f3 f821 	bl	8003b6c <_exit>
	...

08010b2c <__sflush_r>:
 8010b2c:	898a      	ldrh	r2, [r1, #12]
 8010b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b32:	4605      	mov	r5, r0
 8010b34:	0710      	lsls	r0, r2, #28
 8010b36:	460c      	mov	r4, r1
 8010b38:	d458      	bmi.n	8010bec <__sflush_r+0xc0>
 8010b3a:	684b      	ldr	r3, [r1, #4]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	dc05      	bgt.n	8010b4c <__sflush_r+0x20>
 8010b40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	dc02      	bgt.n	8010b4c <__sflush_r+0x20>
 8010b46:	2000      	movs	r0, #0
 8010b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b4e:	2e00      	cmp	r6, #0
 8010b50:	d0f9      	beq.n	8010b46 <__sflush_r+0x1a>
 8010b52:	2300      	movs	r3, #0
 8010b54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010b58:	682f      	ldr	r7, [r5, #0]
 8010b5a:	602b      	str	r3, [r5, #0]
 8010b5c:	d032      	beq.n	8010bc4 <__sflush_r+0x98>
 8010b5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010b60:	89a3      	ldrh	r3, [r4, #12]
 8010b62:	075a      	lsls	r2, r3, #29
 8010b64:	d505      	bpl.n	8010b72 <__sflush_r+0x46>
 8010b66:	6863      	ldr	r3, [r4, #4]
 8010b68:	1ac0      	subs	r0, r0, r3
 8010b6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010b6c:	b10b      	cbz	r3, 8010b72 <__sflush_r+0x46>
 8010b6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010b70:	1ac0      	subs	r0, r0, r3
 8010b72:	2300      	movs	r3, #0
 8010b74:	4602      	mov	r2, r0
 8010b76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b78:	6a21      	ldr	r1, [r4, #32]
 8010b7a:	4628      	mov	r0, r5
 8010b7c:	47b0      	blx	r6
 8010b7e:	1c43      	adds	r3, r0, #1
 8010b80:	89a3      	ldrh	r3, [r4, #12]
 8010b82:	d106      	bne.n	8010b92 <__sflush_r+0x66>
 8010b84:	6829      	ldr	r1, [r5, #0]
 8010b86:	291d      	cmp	r1, #29
 8010b88:	d82c      	bhi.n	8010be4 <__sflush_r+0xb8>
 8010b8a:	4a2a      	ldr	r2, [pc, #168]	; (8010c34 <__sflush_r+0x108>)
 8010b8c:	40ca      	lsrs	r2, r1
 8010b8e:	07d6      	lsls	r6, r2, #31
 8010b90:	d528      	bpl.n	8010be4 <__sflush_r+0xb8>
 8010b92:	2200      	movs	r2, #0
 8010b94:	6062      	str	r2, [r4, #4]
 8010b96:	04d9      	lsls	r1, r3, #19
 8010b98:	6922      	ldr	r2, [r4, #16]
 8010b9a:	6022      	str	r2, [r4, #0]
 8010b9c:	d504      	bpl.n	8010ba8 <__sflush_r+0x7c>
 8010b9e:	1c42      	adds	r2, r0, #1
 8010ba0:	d101      	bne.n	8010ba6 <__sflush_r+0x7a>
 8010ba2:	682b      	ldr	r3, [r5, #0]
 8010ba4:	b903      	cbnz	r3, 8010ba8 <__sflush_r+0x7c>
 8010ba6:	6560      	str	r0, [r4, #84]	; 0x54
 8010ba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010baa:	602f      	str	r7, [r5, #0]
 8010bac:	2900      	cmp	r1, #0
 8010bae:	d0ca      	beq.n	8010b46 <__sflush_r+0x1a>
 8010bb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010bb4:	4299      	cmp	r1, r3
 8010bb6:	d002      	beq.n	8010bbe <__sflush_r+0x92>
 8010bb8:	4628      	mov	r0, r5
 8010bba:	f7ff fae3 	bl	8010184 <_free_r>
 8010bbe:	2000      	movs	r0, #0
 8010bc0:	6360      	str	r0, [r4, #52]	; 0x34
 8010bc2:	e7c1      	b.n	8010b48 <__sflush_r+0x1c>
 8010bc4:	6a21      	ldr	r1, [r4, #32]
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	4628      	mov	r0, r5
 8010bca:	47b0      	blx	r6
 8010bcc:	1c41      	adds	r1, r0, #1
 8010bce:	d1c7      	bne.n	8010b60 <__sflush_r+0x34>
 8010bd0:	682b      	ldr	r3, [r5, #0]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d0c4      	beq.n	8010b60 <__sflush_r+0x34>
 8010bd6:	2b1d      	cmp	r3, #29
 8010bd8:	d001      	beq.n	8010bde <__sflush_r+0xb2>
 8010bda:	2b16      	cmp	r3, #22
 8010bdc:	d101      	bne.n	8010be2 <__sflush_r+0xb6>
 8010bde:	602f      	str	r7, [r5, #0]
 8010be0:	e7b1      	b.n	8010b46 <__sflush_r+0x1a>
 8010be2:	89a3      	ldrh	r3, [r4, #12]
 8010be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010be8:	81a3      	strh	r3, [r4, #12]
 8010bea:	e7ad      	b.n	8010b48 <__sflush_r+0x1c>
 8010bec:	690f      	ldr	r7, [r1, #16]
 8010bee:	2f00      	cmp	r7, #0
 8010bf0:	d0a9      	beq.n	8010b46 <__sflush_r+0x1a>
 8010bf2:	0793      	lsls	r3, r2, #30
 8010bf4:	680e      	ldr	r6, [r1, #0]
 8010bf6:	bf08      	it	eq
 8010bf8:	694b      	ldreq	r3, [r1, #20]
 8010bfa:	600f      	str	r7, [r1, #0]
 8010bfc:	bf18      	it	ne
 8010bfe:	2300      	movne	r3, #0
 8010c00:	eba6 0807 	sub.w	r8, r6, r7
 8010c04:	608b      	str	r3, [r1, #8]
 8010c06:	f1b8 0f00 	cmp.w	r8, #0
 8010c0a:	dd9c      	ble.n	8010b46 <__sflush_r+0x1a>
 8010c0c:	6a21      	ldr	r1, [r4, #32]
 8010c0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010c10:	4643      	mov	r3, r8
 8010c12:	463a      	mov	r2, r7
 8010c14:	4628      	mov	r0, r5
 8010c16:	47b0      	blx	r6
 8010c18:	2800      	cmp	r0, #0
 8010c1a:	dc06      	bgt.n	8010c2a <__sflush_r+0xfe>
 8010c1c:	89a3      	ldrh	r3, [r4, #12]
 8010c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c22:	81a3      	strh	r3, [r4, #12]
 8010c24:	f04f 30ff 	mov.w	r0, #4294967295
 8010c28:	e78e      	b.n	8010b48 <__sflush_r+0x1c>
 8010c2a:	4407      	add	r7, r0
 8010c2c:	eba8 0800 	sub.w	r8, r8, r0
 8010c30:	e7e9      	b.n	8010c06 <__sflush_r+0xda>
 8010c32:	bf00      	nop
 8010c34:	20400001 	.word	0x20400001

08010c38 <_fflush_r>:
 8010c38:	b538      	push	{r3, r4, r5, lr}
 8010c3a:	690b      	ldr	r3, [r1, #16]
 8010c3c:	4605      	mov	r5, r0
 8010c3e:	460c      	mov	r4, r1
 8010c40:	b913      	cbnz	r3, 8010c48 <_fflush_r+0x10>
 8010c42:	2500      	movs	r5, #0
 8010c44:	4628      	mov	r0, r5
 8010c46:	bd38      	pop	{r3, r4, r5, pc}
 8010c48:	b118      	cbz	r0, 8010c52 <_fflush_r+0x1a>
 8010c4a:	6983      	ldr	r3, [r0, #24]
 8010c4c:	b90b      	cbnz	r3, 8010c52 <_fflush_r+0x1a>
 8010c4e:	f000 f887 	bl	8010d60 <__sinit>
 8010c52:	4b14      	ldr	r3, [pc, #80]	; (8010ca4 <_fflush_r+0x6c>)
 8010c54:	429c      	cmp	r4, r3
 8010c56:	d11b      	bne.n	8010c90 <_fflush_r+0x58>
 8010c58:	686c      	ldr	r4, [r5, #4]
 8010c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d0ef      	beq.n	8010c42 <_fflush_r+0xa>
 8010c62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010c64:	07d0      	lsls	r0, r2, #31
 8010c66:	d404      	bmi.n	8010c72 <_fflush_r+0x3a>
 8010c68:	0599      	lsls	r1, r3, #22
 8010c6a:	d402      	bmi.n	8010c72 <_fflush_r+0x3a>
 8010c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c6e:	f000 f915 	bl	8010e9c <__retarget_lock_acquire_recursive>
 8010c72:	4628      	mov	r0, r5
 8010c74:	4621      	mov	r1, r4
 8010c76:	f7ff ff59 	bl	8010b2c <__sflush_r>
 8010c7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c7c:	07da      	lsls	r2, r3, #31
 8010c7e:	4605      	mov	r5, r0
 8010c80:	d4e0      	bmi.n	8010c44 <_fflush_r+0xc>
 8010c82:	89a3      	ldrh	r3, [r4, #12]
 8010c84:	059b      	lsls	r3, r3, #22
 8010c86:	d4dd      	bmi.n	8010c44 <_fflush_r+0xc>
 8010c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c8a:	f000 f908 	bl	8010e9e <__retarget_lock_release_recursive>
 8010c8e:	e7d9      	b.n	8010c44 <_fflush_r+0xc>
 8010c90:	4b05      	ldr	r3, [pc, #20]	; (8010ca8 <_fflush_r+0x70>)
 8010c92:	429c      	cmp	r4, r3
 8010c94:	d101      	bne.n	8010c9a <_fflush_r+0x62>
 8010c96:	68ac      	ldr	r4, [r5, #8]
 8010c98:	e7df      	b.n	8010c5a <_fflush_r+0x22>
 8010c9a:	4b04      	ldr	r3, [pc, #16]	; (8010cac <_fflush_r+0x74>)
 8010c9c:	429c      	cmp	r4, r3
 8010c9e:	bf08      	it	eq
 8010ca0:	68ec      	ldreq	r4, [r5, #12]
 8010ca2:	e7da      	b.n	8010c5a <_fflush_r+0x22>
 8010ca4:	08013024 	.word	0x08013024
 8010ca8:	08013044 	.word	0x08013044
 8010cac:	08013004 	.word	0x08013004

08010cb0 <std>:
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	b510      	push	{r4, lr}
 8010cb4:	4604      	mov	r4, r0
 8010cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8010cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010cbe:	6083      	str	r3, [r0, #8]
 8010cc0:	8181      	strh	r1, [r0, #12]
 8010cc2:	6643      	str	r3, [r0, #100]	; 0x64
 8010cc4:	81c2      	strh	r2, [r0, #14]
 8010cc6:	6183      	str	r3, [r0, #24]
 8010cc8:	4619      	mov	r1, r3
 8010cca:	2208      	movs	r2, #8
 8010ccc:	305c      	adds	r0, #92	; 0x5c
 8010cce:	f7fd fbb5 	bl	800e43c <memset>
 8010cd2:	4b05      	ldr	r3, [pc, #20]	; (8010ce8 <std+0x38>)
 8010cd4:	6263      	str	r3, [r4, #36]	; 0x24
 8010cd6:	4b05      	ldr	r3, [pc, #20]	; (8010cec <std+0x3c>)
 8010cd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8010cda:	4b05      	ldr	r3, [pc, #20]	; (8010cf0 <std+0x40>)
 8010cdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010cde:	4b05      	ldr	r3, [pc, #20]	; (8010cf4 <std+0x44>)
 8010ce0:	6224      	str	r4, [r4, #32]
 8010ce2:	6323      	str	r3, [r4, #48]	; 0x30
 8010ce4:	bd10      	pop	{r4, pc}
 8010ce6:	bf00      	nop
 8010ce8:	08011001 	.word	0x08011001
 8010cec:	08011023 	.word	0x08011023
 8010cf0:	0801105b 	.word	0x0801105b
 8010cf4:	0801107f 	.word	0x0801107f

08010cf8 <_cleanup_r>:
 8010cf8:	4901      	ldr	r1, [pc, #4]	; (8010d00 <_cleanup_r+0x8>)
 8010cfa:	f000 b8af 	b.w	8010e5c <_fwalk_reent>
 8010cfe:	bf00      	nop
 8010d00:	08010c39 	.word	0x08010c39

08010d04 <__sfmoreglue>:
 8010d04:	b570      	push	{r4, r5, r6, lr}
 8010d06:	1e4a      	subs	r2, r1, #1
 8010d08:	2568      	movs	r5, #104	; 0x68
 8010d0a:	4355      	muls	r5, r2
 8010d0c:	460e      	mov	r6, r1
 8010d0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010d12:	f7ff fa87 	bl	8010224 <_malloc_r>
 8010d16:	4604      	mov	r4, r0
 8010d18:	b140      	cbz	r0, 8010d2c <__sfmoreglue+0x28>
 8010d1a:	2100      	movs	r1, #0
 8010d1c:	e9c0 1600 	strd	r1, r6, [r0]
 8010d20:	300c      	adds	r0, #12
 8010d22:	60a0      	str	r0, [r4, #8]
 8010d24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010d28:	f7fd fb88 	bl	800e43c <memset>
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	bd70      	pop	{r4, r5, r6, pc}

08010d30 <__sfp_lock_acquire>:
 8010d30:	4801      	ldr	r0, [pc, #4]	; (8010d38 <__sfp_lock_acquire+0x8>)
 8010d32:	f000 b8b3 	b.w	8010e9c <__retarget_lock_acquire_recursive>
 8010d36:	bf00      	nop
 8010d38:	20008b40 	.word	0x20008b40

08010d3c <__sfp_lock_release>:
 8010d3c:	4801      	ldr	r0, [pc, #4]	; (8010d44 <__sfp_lock_release+0x8>)
 8010d3e:	f000 b8ae 	b.w	8010e9e <__retarget_lock_release_recursive>
 8010d42:	bf00      	nop
 8010d44:	20008b40 	.word	0x20008b40

08010d48 <__sinit_lock_acquire>:
 8010d48:	4801      	ldr	r0, [pc, #4]	; (8010d50 <__sinit_lock_acquire+0x8>)
 8010d4a:	f000 b8a7 	b.w	8010e9c <__retarget_lock_acquire_recursive>
 8010d4e:	bf00      	nop
 8010d50:	20008b3b 	.word	0x20008b3b

08010d54 <__sinit_lock_release>:
 8010d54:	4801      	ldr	r0, [pc, #4]	; (8010d5c <__sinit_lock_release+0x8>)
 8010d56:	f000 b8a2 	b.w	8010e9e <__retarget_lock_release_recursive>
 8010d5a:	bf00      	nop
 8010d5c:	20008b3b 	.word	0x20008b3b

08010d60 <__sinit>:
 8010d60:	b510      	push	{r4, lr}
 8010d62:	4604      	mov	r4, r0
 8010d64:	f7ff fff0 	bl	8010d48 <__sinit_lock_acquire>
 8010d68:	69a3      	ldr	r3, [r4, #24]
 8010d6a:	b11b      	cbz	r3, 8010d74 <__sinit+0x14>
 8010d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d70:	f7ff bff0 	b.w	8010d54 <__sinit_lock_release>
 8010d74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010d78:	6523      	str	r3, [r4, #80]	; 0x50
 8010d7a:	4b13      	ldr	r3, [pc, #76]	; (8010dc8 <__sinit+0x68>)
 8010d7c:	4a13      	ldr	r2, [pc, #76]	; (8010dcc <__sinit+0x6c>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	62a2      	str	r2, [r4, #40]	; 0x28
 8010d82:	42a3      	cmp	r3, r4
 8010d84:	bf04      	itt	eq
 8010d86:	2301      	moveq	r3, #1
 8010d88:	61a3      	streq	r3, [r4, #24]
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	f000 f820 	bl	8010dd0 <__sfp>
 8010d90:	6060      	str	r0, [r4, #4]
 8010d92:	4620      	mov	r0, r4
 8010d94:	f000 f81c 	bl	8010dd0 <__sfp>
 8010d98:	60a0      	str	r0, [r4, #8]
 8010d9a:	4620      	mov	r0, r4
 8010d9c:	f000 f818 	bl	8010dd0 <__sfp>
 8010da0:	2200      	movs	r2, #0
 8010da2:	60e0      	str	r0, [r4, #12]
 8010da4:	2104      	movs	r1, #4
 8010da6:	6860      	ldr	r0, [r4, #4]
 8010da8:	f7ff ff82 	bl	8010cb0 <std>
 8010dac:	68a0      	ldr	r0, [r4, #8]
 8010dae:	2201      	movs	r2, #1
 8010db0:	2109      	movs	r1, #9
 8010db2:	f7ff ff7d 	bl	8010cb0 <std>
 8010db6:	68e0      	ldr	r0, [r4, #12]
 8010db8:	2202      	movs	r2, #2
 8010dba:	2112      	movs	r1, #18
 8010dbc:	f7ff ff78 	bl	8010cb0 <std>
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	61a3      	str	r3, [r4, #24]
 8010dc4:	e7d2      	b.n	8010d6c <__sinit+0xc>
 8010dc6:	bf00      	nop
 8010dc8:	08012c80 	.word	0x08012c80
 8010dcc:	08010cf9 	.word	0x08010cf9

08010dd0 <__sfp>:
 8010dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dd2:	4607      	mov	r7, r0
 8010dd4:	f7ff ffac 	bl	8010d30 <__sfp_lock_acquire>
 8010dd8:	4b1e      	ldr	r3, [pc, #120]	; (8010e54 <__sfp+0x84>)
 8010dda:	681e      	ldr	r6, [r3, #0]
 8010ddc:	69b3      	ldr	r3, [r6, #24]
 8010dde:	b913      	cbnz	r3, 8010de6 <__sfp+0x16>
 8010de0:	4630      	mov	r0, r6
 8010de2:	f7ff ffbd 	bl	8010d60 <__sinit>
 8010de6:	3648      	adds	r6, #72	; 0x48
 8010de8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010dec:	3b01      	subs	r3, #1
 8010dee:	d503      	bpl.n	8010df8 <__sfp+0x28>
 8010df0:	6833      	ldr	r3, [r6, #0]
 8010df2:	b30b      	cbz	r3, 8010e38 <__sfp+0x68>
 8010df4:	6836      	ldr	r6, [r6, #0]
 8010df6:	e7f7      	b.n	8010de8 <__sfp+0x18>
 8010df8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010dfc:	b9d5      	cbnz	r5, 8010e34 <__sfp+0x64>
 8010dfe:	4b16      	ldr	r3, [pc, #88]	; (8010e58 <__sfp+0x88>)
 8010e00:	60e3      	str	r3, [r4, #12]
 8010e02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010e06:	6665      	str	r5, [r4, #100]	; 0x64
 8010e08:	f000 f847 	bl	8010e9a <__retarget_lock_init_recursive>
 8010e0c:	f7ff ff96 	bl	8010d3c <__sfp_lock_release>
 8010e10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010e14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010e18:	6025      	str	r5, [r4, #0]
 8010e1a:	61a5      	str	r5, [r4, #24]
 8010e1c:	2208      	movs	r2, #8
 8010e1e:	4629      	mov	r1, r5
 8010e20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010e24:	f7fd fb0a 	bl	800e43c <memset>
 8010e28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010e2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010e30:	4620      	mov	r0, r4
 8010e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e34:	3468      	adds	r4, #104	; 0x68
 8010e36:	e7d9      	b.n	8010dec <__sfp+0x1c>
 8010e38:	2104      	movs	r1, #4
 8010e3a:	4638      	mov	r0, r7
 8010e3c:	f7ff ff62 	bl	8010d04 <__sfmoreglue>
 8010e40:	4604      	mov	r4, r0
 8010e42:	6030      	str	r0, [r6, #0]
 8010e44:	2800      	cmp	r0, #0
 8010e46:	d1d5      	bne.n	8010df4 <__sfp+0x24>
 8010e48:	f7ff ff78 	bl	8010d3c <__sfp_lock_release>
 8010e4c:	230c      	movs	r3, #12
 8010e4e:	603b      	str	r3, [r7, #0]
 8010e50:	e7ee      	b.n	8010e30 <__sfp+0x60>
 8010e52:	bf00      	nop
 8010e54:	08012c80 	.word	0x08012c80
 8010e58:	ffff0001 	.word	0xffff0001

08010e5c <_fwalk_reent>:
 8010e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e60:	4606      	mov	r6, r0
 8010e62:	4688      	mov	r8, r1
 8010e64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010e68:	2700      	movs	r7, #0
 8010e6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010e6e:	f1b9 0901 	subs.w	r9, r9, #1
 8010e72:	d505      	bpl.n	8010e80 <_fwalk_reent+0x24>
 8010e74:	6824      	ldr	r4, [r4, #0]
 8010e76:	2c00      	cmp	r4, #0
 8010e78:	d1f7      	bne.n	8010e6a <_fwalk_reent+0xe>
 8010e7a:	4638      	mov	r0, r7
 8010e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e80:	89ab      	ldrh	r3, [r5, #12]
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d907      	bls.n	8010e96 <_fwalk_reent+0x3a>
 8010e86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	d003      	beq.n	8010e96 <_fwalk_reent+0x3a>
 8010e8e:	4629      	mov	r1, r5
 8010e90:	4630      	mov	r0, r6
 8010e92:	47c0      	blx	r8
 8010e94:	4307      	orrs	r7, r0
 8010e96:	3568      	adds	r5, #104	; 0x68
 8010e98:	e7e9      	b.n	8010e6e <_fwalk_reent+0x12>

08010e9a <__retarget_lock_init_recursive>:
 8010e9a:	4770      	bx	lr

08010e9c <__retarget_lock_acquire_recursive>:
 8010e9c:	4770      	bx	lr

08010e9e <__retarget_lock_release_recursive>:
 8010e9e:	4770      	bx	lr

08010ea0 <__swhatbuf_r>:
 8010ea0:	b570      	push	{r4, r5, r6, lr}
 8010ea2:	460e      	mov	r6, r1
 8010ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ea8:	2900      	cmp	r1, #0
 8010eaa:	b096      	sub	sp, #88	; 0x58
 8010eac:	4614      	mov	r4, r2
 8010eae:	461d      	mov	r5, r3
 8010eb0:	da07      	bge.n	8010ec2 <__swhatbuf_r+0x22>
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	602b      	str	r3, [r5, #0]
 8010eb6:	89b3      	ldrh	r3, [r6, #12]
 8010eb8:	061a      	lsls	r2, r3, #24
 8010eba:	d410      	bmi.n	8010ede <__swhatbuf_r+0x3e>
 8010ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ec0:	e00e      	b.n	8010ee0 <__swhatbuf_r+0x40>
 8010ec2:	466a      	mov	r2, sp
 8010ec4:	f000 f902 	bl	80110cc <_fstat_r>
 8010ec8:	2800      	cmp	r0, #0
 8010eca:	dbf2      	blt.n	8010eb2 <__swhatbuf_r+0x12>
 8010ecc:	9a01      	ldr	r2, [sp, #4]
 8010ece:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010ed2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010ed6:	425a      	negs	r2, r3
 8010ed8:	415a      	adcs	r2, r3
 8010eda:	602a      	str	r2, [r5, #0]
 8010edc:	e7ee      	b.n	8010ebc <__swhatbuf_r+0x1c>
 8010ede:	2340      	movs	r3, #64	; 0x40
 8010ee0:	2000      	movs	r0, #0
 8010ee2:	6023      	str	r3, [r4, #0]
 8010ee4:	b016      	add	sp, #88	; 0x58
 8010ee6:	bd70      	pop	{r4, r5, r6, pc}

08010ee8 <__smakebuf_r>:
 8010ee8:	898b      	ldrh	r3, [r1, #12]
 8010eea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010eec:	079d      	lsls	r5, r3, #30
 8010eee:	4606      	mov	r6, r0
 8010ef0:	460c      	mov	r4, r1
 8010ef2:	d507      	bpl.n	8010f04 <__smakebuf_r+0x1c>
 8010ef4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ef8:	6023      	str	r3, [r4, #0]
 8010efa:	6123      	str	r3, [r4, #16]
 8010efc:	2301      	movs	r3, #1
 8010efe:	6163      	str	r3, [r4, #20]
 8010f00:	b002      	add	sp, #8
 8010f02:	bd70      	pop	{r4, r5, r6, pc}
 8010f04:	ab01      	add	r3, sp, #4
 8010f06:	466a      	mov	r2, sp
 8010f08:	f7ff ffca 	bl	8010ea0 <__swhatbuf_r>
 8010f0c:	9900      	ldr	r1, [sp, #0]
 8010f0e:	4605      	mov	r5, r0
 8010f10:	4630      	mov	r0, r6
 8010f12:	f7ff f987 	bl	8010224 <_malloc_r>
 8010f16:	b948      	cbnz	r0, 8010f2c <__smakebuf_r+0x44>
 8010f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f1c:	059a      	lsls	r2, r3, #22
 8010f1e:	d4ef      	bmi.n	8010f00 <__smakebuf_r+0x18>
 8010f20:	f023 0303 	bic.w	r3, r3, #3
 8010f24:	f043 0302 	orr.w	r3, r3, #2
 8010f28:	81a3      	strh	r3, [r4, #12]
 8010f2a:	e7e3      	b.n	8010ef4 <__smakebuf_r+0xc>
 8010f2c:	4b0d      	ldr	r3, [pc, #52]	; (8010f64 <__smakebuf_r+0x7c>)
 8010f2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010f30:	89a3      	ldrh	r3, [r4, #12]
 8010f32:	6020      	str	r0, [r4, #0]
 8010f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f38:	81a3      	strh	r3, [r4, #12]
 8010f3a:	9b00      	ldr	r3, [sp, #0]
 8010f3c:	6163      	str	r3, [r4, #20]
 8010f3e:	9b01      	ldr	r3, [sp, #4]
 8010f40:	6120      	str	r0, [r4, #16]
 8010f42:	b15b      	cbz	r3, 8010f5c <__smakebuf_r+0x74>
 8010f44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f48:	4630      	mov	r0, r6
 8010f4a:	f000 f8d1 	bl	80110f0 <_isatty_r>
 8010f4e:	b128      	cbz	r0, 8010f5c <__smakebuf_r+0x74>
 8010f50:	89a3      	ldrh	r3, [r4, #12]
 8010f52:	f023 0303 	bic.w	r3, r3, #3
 8010f56:	f043 0301 	orr.w	r3, r3, #1
 8010f5a:	81a3      	strh	r3, [r4, #12]
 8010f5c:	89a0      	ldrh	r0, [r4, #12]
 8010f5e:	4305      	orrs	r5, r0
 8010f60:	81a5      	strh	r5, [r4, #12]
 8010f62:	e7cd      	b.n	8010f00 <__smakebuf_r+0x18>
 8010f64:	08010cf9 	.word	0x08010cf9

08010f68 <_malloc_usable_size_r>:
 8010f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f6c:	1f18      	subs	r0, r3, #4
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	bfbc      	itt	lt
 8010f72:	580b      	ldrlt	r3, [r1, r0]
 8010f74:	18c0      	addlt	r0, r0, r3
 8010f76:	4770      	bx	lr

08010f78 <_raise_r>:
 8010f78:	291f      	cmp	r1, #31
 8010f7a:	b538      	push	{r3, r4, r5, lr}
 8010f7c:	4604      	mov	r4, r0
 8010f7e:	460d      	mov	r5, r1
 8010f80:	d904      	bls.n	8010f8c <_raise_r+0x14>
 8010f82:	2316      	movs	r3, #22
 8010f84:	6003      	str	r3, [r0, #0]
 8010f86:	f04f 30ff 	mov.w	r0, #4294967295
 8010f8a:	bd38      	pop	{r3, r4, r5, pc}
 8010f8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010f8e:	b112      	cbz	r2, 8010f96 <_raise_r+0x1e>
 8010f90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010f94:	b94b      	cbnz	r3, 8010faa <_raise_r+0x32>
 8010f96:	4620      	mov	r0, r4
 8010f98:	f000 f830 	bl	8010ffc <_getpid_r>
 8010f9c:	462a      	mov	r2, r5
 8010f9e:	4601      	mov	r1, r0
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fa6:	f000 b817 	b.w	8010fd8 <_kill_r>
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	d00a      	beq.n	8010fc4 <_raise_r+0x4c>
 8010fae:	1c59      	adds	r1, r3, #1
 8010fb0:	d103      	bne.n	8010fba <_raise_r+0x42>
 8010fb2:	2316      	movs	r3, #22
 8010fb4:	6003      	str	r3, [r0, #0]
 8010fb6:	2001      	movs	r0, #1
 8010fb8:	e7e7      	b.n	8010f8a <_raise_r+0x12>
 8010fba:	2400      	movs	r4, #0
 8010fbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010fc0:	4628      	mov	r0, r5
 8010fc2:	4798      	blx	r3
 8010fc4:	2000      	movs	r0, #0
 8010fc6:	e7e0      	b.n	8010f8a <_raise_r+0x12>

08010fc8 <raise>:
 8010fc8:	4b02      	ldr	r3, [pc, #8]	; (8010fd4 <raise+0xc>)
 8010fca:	4601      	mov	r1, r0
 8010fcc:	6818      	ldr	r0, [r3, #0]
 8010fce:	f7ff bfd3 	b.w	8010f78 <_raise_r>
 8010fd2:	bf00      	nop
 8010fd4:	20000034 	.word	0x20000034

08010fd8 <_kill_r>:
 8010fd8:	b538      	push	{r3, r4, r5, lr}
 8010fda:	4d07      	ldr	r5, [pc, #28]	; (8010ff8 <_kill_r+0x20>)
 8010fdc:	2300      	movs	r3, #0
 8010fde:	4604      	mov	r4, r0
 8010fe0:	4608      	mov	r0, r1
 8010fe2:	4611      	mov	r1, r2
 8010fe4:	602b      	str	r3, [r5, #0]
 8010fe6:	f7f2 fdb1 	bl	8003b4c <_kill>
 8010fea:	1c43      	adds	r3, r0, #1
 8010fec:	d102      	bne.n	8010ff4 <_kill_r+0x1c>
 8010fee:	682b      	ldr	r3, [r5, #0]
 8010ff0:	b103      	cbz	r3, 8010ff4 <_kill_r+0x1c>
 8010ff2:	6023      	str	r3, [r4, #0]
 8010ff4:	bd38      	pop	{r3, r4, r5, pc}
 8010ff6:	bf00      	nop
 8010ff8:	20008b34 	.word	0x20008b34

08010ffc <_getpid_r>:
 8010ffc:	f7f2 bd9e 	b.w	8003b3c <_getpid>

08011000 <__sread>:
 8011000:	b510      	push	{r4, lr}
 8011002:	460c      	mov	r4, r1
 8011004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011008:	f000 f894 	bl	8011134 <_read_r>
 801100c:	2800      	cmp	r0, #0
 801100e:	bfab      	itete	ge
 8011010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011012:	89a3      	ldrhlt	r3, [r4, #12]
 8011014:	181b      	addge	r3, r3, r0
 8011016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801101a:	bfac      	ite	ge
 801101c:	6563      	strge	r3, [r4, #84]	; 0x54
 801101e:	81a3      	strhlt	r3, [r4, #12]
 8011020:	bd10      	pop	{r4, pc}

08011022 <__swrite>:
 8011022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011026:	461f      	mov	r7, r3
 8011028:	898b      	ldrh	r3, [r1, #12]
 801102a:	05db      	lsls	r3, r3, #23
 801102c:	4605      	mov	r5, r0
 801102e:	460c      	mov	r4, r1
 8011030:	4616      	mov	r6, r2
 8011032:	d505      	bpl.n	8011040 <__swrite+0x1e>
 8011034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011038:	2302      	movs	r3, #2
 801103a:	2200      	movs	r2, #0
 801103c:	f000 f868 	bl	8011110 <_lseek_r>
 8011040:	89a3      	ldrh	r3, [r4, #12]
 8011042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801104a:	81a3      	strh	r3, [r4, #12]
 801104c:	4632      	mov	r2, r6
 801104e:	463b      	mov	r3, r7
 8011050:	4628      	mov	r0, r5
 8011052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011056:	f000 b817 	b.w	8011088 <_write_r>

0801105a <__sseek>:
 801105a:	b510      	push	{r4, lr}
 801105c:	460c      	mov	r4, r1
 801105e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011062:	f000 f855 	bl	8011110 <_lseek_r>
 8011066:	1c43      	adds	r3, r0, #1
 8011068:	89a3      	ldrh	r3, [r4, #12]
 801106a:	bf15      	itete	ne
 801106c:	6560      	strne	r0, [r4, #84]	; 0x54
 801106e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011076:	81a3      	strheq	r3, [r4, #12]
 8011078:	bf18      	it	ne
 801107a:	81a3      	strhne	r3, [r4, #12]
 801107c:	bd10      	pop	{r4, pc}

0801107e <__sclose>:
 801107e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011082:	f000 b813 	b.w	80110ac <_close_r>
	...

08011088 <_write_r>:
 8011088:	b538      	push	{r3, r4, r5, lr}
 801108a:	4d07      	ldr	r5, [pc, #28]	; (80110a8 <_write_r+0x20>)
 801108c:	4604      	mov	r4, r0
 801108e:	4608      	mov	r0, r1
 8011090:	4611      	mov	r1, r2
 8011092:	2200      	movs	r2, #0
 8011094:	602a      	str	r2, [r5, #0]
 8011096:	461a      	mov	r2, r3
 8011098:	f7f2 fd8f 	bl	8003bba <_write>
 801109c:	1c43      	adds	r3, r0, #1
 801109e:	d102      	bne.n	80110a6 <_write_r+0x1e>
 80110a0:	682b      	ldr	r3, [r5, #0]
 80110a2:	b103      	cbz	r3, 80110a6 <_write_r+0x1e>
 80110a4:	6023      	str	r3, [r4, #0]
 80110a6:	bd38      	pop	{r3, r4, r5, pc}
 80110a8:	20008b34 	.word	0x20008b34

080110ac <_close_r>:
 80110ac:	b538      	push	{r3, r4, r5, lr}
 80110ae:	4d06      	ldr	r5, [pc, #24]	; (80110c8 <_close_r+0x1c>)
 80110b0:	2300      	movs	r3, #0
 80110b2:	4604      	mov	r4, r0
 80110b4:	4608      	mov	r0, r1
 80110b6:	602b      	str	r3, [r5, #0]
 80110b8:	f7f2 fd9b 	bl	8003bf2 <_close>
 80110bc:	1c43      	adds	r3, r0, #1
 80110be:	d102      	bne.n	80110c6 <_close_r+0x1a>
 80110c0:	682b      	ldr	r3, [r5, #0]
 80110c2:	b103      	cbz	r3, 80110c6 <_close_r+0x1a>
 80110c4:	6023      	str	r3, [r4, #0]
 80110c6:	bd38      	pop	{r3, r4, r5, pc}
 80110c8:	20008b34 	.word	0x20008b34

080110cc <_fstat_r>:
 80110cc:	b538      	push	{r3, r4, r5, lr}
 80110ce:	4d07      	ldr	r5, [pc, #28]	; (80110ec <_fstat_r+0x20>)
 80110d0:	2300      	movs	r3, #0
 80110d2:	4604      	mov	r4, r0
 80110d4:	4608      	mov	r0, r1
 80110d6:	4611      	mov	r1, r2
 80110d8:	602b      	str	r3, [r5, #0]
 80110da:	f7f2 fd96 	bl	8003c0a <_fstat>
 80110de:	1c43      	adds	r3, r0, #1
 80110e0:	d102      	bne.n	80110e8 <_fstat_r+0x1c>
 80110e2:	682b      	ldr	r3, [r5, #0]
 80110e4:	b103      	cbz	r3, 80110e8 <_fstat_r+0x1c>
 80110e6:	6023      	str	r3, [r4, #0]
 80110e8:	bd38      	pop	{r3, r4, r5, pc}
 80110ea:	bf00      	nop
 80110ec:	20008b34 	.word	0x20008b34

080110f0 <_isatty_r>:
 80110f0:	b538      	push	{r3, r4, r5, lr}
 80110f2:	4d06      	ldr	r5, [pc, #24]	; (801110c <_isatty_r+0x1c>)
 80110f4:	2300      	movs	r3, #0
 80110f6:	4604      	mov	r4, r0
 80110f8:	4608      	mov	r0, r1
 80110fa:	602b      	str	r3, [r5, #0]
 80110fc:	f7f2 fd95 	bl	8003c2a <_isatty>
 8011100:	1c43      	adds	r3, r0, #1
 8011102:	d102      	bne.n	801110a <_isatty_r+0x1a>
 8011104:	682b      	ldr	r3, [r5, #0]
 8011106:	b103      	cbz	r3, 801110a <_isatty_r+0x1a>
 8011108:	6023      	str	r3, [r4, #0]
 801110a:	bd38      	pop	{r3, r4, r5, pc}
 801110c:	20008b34 	.word	0x20008b34

08011110 <_lseek_r>:
 8011110:	b538      	push	{r3, r4, r5, lr}
 8011112:	4d07      	ldr	r5, [pc, #28]	; (8011130 <_lseek_r+0x20>)
 8011114:	4604      	mov	r4, r0
 8011116:	4608      	mov	r0, r1
 8011118:	4611      	mov	r1, r2
 801111a:	2200      	movs	r2, #0
 801111c:	602a      	str	r2, [r5, #0]
 801111e:	461a      	mov	r2, r3
 8011120:	f7f2 fd8e 	bl	8003c40 <_lseek>
 8011124:	1c43      	adds	r3, r0, #1
 8011126:	d102      	bne.n	801112e <_lseek_r+0x1e>
 8011128:	682b      	ldr	r3, [r5, #0]
 801112a:	b103      	cbz	r3, 801112e <_lseek_r+0x1e>
 801112c:	6023      	str	r3, [r4, #0]
 801112e:	bd38      	pop	{r3, r4, r5, pc}
 8011130:	20008b34 	.word	0x20008b34

08011134 <_read_r>:
 8011134:	b538      	push	{r3, r4, r5, lr}
 8011136:	4d07      	ldr	r5, [pc, #28]	; (8011154 <_read_r+0x20>)
 8011138:	4604      	mov	r4, r0
 801113a:	4608      	mov	r0, r1
 801113c:	4611      	mov	r1, r2
 801113e:	2200      	movs	r2, #0
 8011140:	602a      	str	r2, [r5, #0]
 8011142:	461a      	mov	r2, r3
 8011144:	f7f2 fd1c 	bl	8003b80 <_read>
 8011148:	1c43      	adds	r3, r0, #1
 801114a:	d102      	bne.n	8011152 <_read_r+0x1e>
 801114c:	682b      	ldr	r3, [r5, #0]
 801114e:	b103      	cbz	r3, 8011152 <_read_r+0x1e>
 8011150:	6023      	str	r3, [r4, #0]
 8011152:	bd38      	pop	{r3, r4, r5, pc}
 8011154:	20008b34 	.word	0x20008b34

08011158 <_init>:
 8011158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801115a:	bf00      	nop
 801115c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801115e:	bc08      	pop	{r3}
 8011160:	469e      	mov	lr, r3
 8011162:	4770      	bx	lr

08011164 <_fini>:
 8011164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011166:	bf00      	nop
 8011168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801116a:	bc08      	pop	{r3}
 801116c:	469e      	mov	lr, r3
 801116e:	4770      	bx	lr
